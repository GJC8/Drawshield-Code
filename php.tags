!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BezierPoint	svg/bezier.inc	/^class BezierPoint$/;"	c
BezierSegmentFlags	svg/bezier.inc	/^class BezierSegmentFlags$/;"	c
BoundAR	svg/placecharge.inc	/^    $BoundAR = $boundX \/ $boundY;$/;"	v
BoundAR	svg/placecharge.inc	/^  $BoundAR = 1;$/;"	v
CH	svg/divisions/paly.inc	/^$CH = '';$/;"	v
CompiledBezierSegment	svg/bezier.inc	/^class CompiledBezierSegment$/;"	c
CompiledPolyBezier	svg/bezier.inc	/^class CompiledPolyBezier$/;"	c
CompiledShape	svg/bezier.inc	/^class CompiledShape extends ShapeInterface$/;"	c
CubicBezier	svg/bezier.inc	/^class CubicBezier$/;"	c
EdgeType	svg/edges/edge_type.inc	/^abstract class EdgeType$/;"	c
EdgeTypeBezier	svg/edges/edge_type.inc	/^abstract class EdgeTypeBezier extends EdgeType$/;"	c
EdgeTypeFlory	svg/edges/edge_type.inc	/^class EdgeTypeFlory extends EdgeTypeBezier$/;"	c
EdgeTypeFull	svg/edges/edge_type.inc	/^class EdgeTypeFull extends EdgeTypeBezier$/;"	c
EdgeTypeNull	svg/edges/edge_type.inc	/^class EdgeTypeNull extends EdgeType$/;"	c
EdgeTypeRepeating	svg/edges/edge_type.inc	/^class EdgeTypeRepeating extends EdgeTypeBezier$/;"	c
EllipseShieldShape	svg/ordinaries/shield_shape_utils.inc	/^class EllipseShieldShape extends ShieldShape$/;"	c
H1	svg/ordinaries/bar.inc	/^  $H1 = $bar_width * $height \/ 1000;$/;"	v
H2	svg/ordinaries/bar.inc	/^  $H2 = $H1 \/ 2;$/;"	v
H3	svg/ordinaries/bar.inc	/^        $H3 = ($H1 \/ 4) * 3 * 0.707;$/;"	v
H4	svg/ordinaries/bar.inc	/^        $H4 = $H1 \/ 4;$/;"	v
HeaterShieldShape	svg/ordinaries/shield_shape_utils.inc	/^class HeaterShieldShape extends ShieldShape$/;"	c
ID	parser/english/grammar.inc	/^                        $ID = $quarter->getAttribute('ID');$/;"	v
ID	parser/english/grammar.inc	/^                    $ID = null;$/;"	v
LozengeShieldShape	svg/ordinaries/shield_shape_utils.inc	/^class LozengeShieldShape extends ShieldShape$/;"	c
MaxAR	svg/placecharge.inc	/^    $MaxAR = $chargeAR * $Xflex;$/;"	v
MinAR	svg/placecharge.inc	/^    $MinAR = $chargeAR \/ $Yflex;$/;"	v
MutableShape	svg/bezier.inc	/^class MutableShape extends ShapeInterface$/;"	c
NC	svg/divisions/barry.inc	/^$NC = '';$/;"	v
NC	svg/divisions/paly.inc	/^$NC = '';$/;"	v
PathBuilder	svg/linetypes.inc	/^class PathBuilder$/;"	c
PlaceCharge	svg/placecharge.inc	/^function PlaceCharge ( $node,  \/\/ images$/;"	f
PlacementHints	svg/placecharge.inc	/^class PlacementHints$/;"	c
PolyBezier	svg/bezier.inc	/^class PolyBezier$/;"	c
Quarter	svg/quartering.inc	/^class Quarter$/;"	c
Quartering	svg/quartering.inc	/^class Quartering$/;"	c
RectShieldShape	svg/ordinaries/shield_shape_utils.inc	/^class RectShieldShape extends ShieldShape$/;"	c
S	svg/linetypes.inc	/^  $S = $size\/2;$/;"	v
SegmentAtData	svg/bezier.inc	/^class SegmentAtData$/;"	c
ShapeInterface	svg/bezier.inc	/^abstract class ShapeInterface$/;"	c
ShieldLayout	svg/size.inc	/^class ShieldLayout$/;"	c
ShieldPos	svg/size.inc	/^class ShieldPos$/;"	c
ShieldRect	svg/size.inc	/^class ShieldRect$/;"	c
ShieldShape	svg/ordinaries/shield_shape_utils.inc	/^abstract class ShieldShape$/;"	c
ShieldSize	svg/size.inc	/^class ShieldSize$/;"	c
SvgDParser	svg/bezier.inc	/^class SvgDParser$/;"	c
TinctureData	svg/tinctures.inc	/^class TinctureData$/;"	c
TransformMatrix	svg/transform.inc	/^class TransformMatrix$/;"	c
W2	svg/ordinaries/bar.inc	/^        $W2 = ($H1\/0.707) \/ 2;$/;"	v
X1	svg/divisions/paly.inc	/^      $X1 = $i * $stepH;$/;"	v
X1	svg/ordinaries/bar.inc	/^        $X1 = (($i+1) * $hSpacing) - $H2;$/;"	v
X1	svg/ordinaries/bar.inc	/^        $X1 = (($i+1) * $hSpacing) - 500 - $W2;$/;"	v
X2	svg/ordinaries/bar.inc	/^        $X2 = $X1 + $H3;$/;"	v
X2	svg/ordinaries/bar.inc	/^        $X2 = $X1 + ($H1 * 0.75);$/;"	v
X2	svg/placecharge.inc	/^			  $X2 = $chargeX \/ 2; $Y2 = $chargeY \/ 2;$/;"	v
XY2	svg/placecharge.inc	/^				$XY2 = $chargeX \/ 2;$/;"	v
Xflex	svg/placecharge.inc	/^            $Xflex = $Yflex = 9999;$/;"	v
Xflex	svg/placecharge.inc	/^  $Xflex = array_key_exists('wflex', $charge) ? $charge['wflex'] : 1;$/;"	v
Xoff	svg/linetypes.inc	/^      $Xoff = $dist;$/;"	v
Xoff	svg/linetypes.inc	/^  $Xoff = 0; $Yoff = 0;$/;"	v
Xscale	svg/placecharge.inc	/^        $Xscale = ($limit * $chargeY * $Yscale) \/ $chargeX;$/;"	v
Xscale	svg/placecharge.inc	/^    $Xscale = $Yscale = min ( $Xscale, $Yscale );$/;"	v
Xscale	svg/placecharge.inc	/^  $Xscale = $Yscale = min ( $Xscale, $Yscale );$/;"	v
Xscale	svg/placecharge.inc	/^  $Xscale = $boundX \/ $chargeX;$/;"	v
Xshift	svg/getcharge.inc	/^    $Xshift = (($newSize - $width) \/ -2) \/ $scale;$/;"	v
Xstart	svg/linetypes.inc	/^      $Xstart = $dist;$/;"	v
Xstart	svg/linetypes.inc	/^  $Xstart = 0;$/;"	v
Y1	svg/divisions/barry-pily.inc	/^      $Y1 = ($i - 1) * $stepV;$/;"	v
Y1	svg/divisions/barry.inc	/^  $Y1 = $layout->division_offset->y + $i * $stepV;$/;"	v
Y1	svg/ordinaries/bar.inc	/^        $Y1 = (($i+1) * $vSpacing) - $H2;$/;"	v
Y1	svg/ordinaries/bar.inc	/^        $Y1 = 500 - (($i+1) * $hSpacing);$/;"	v
Y2	svg/ordinaries/bar.inc	/^        $Y2 = $Y1 + ($H1 * 0.75);$/;"	v
Y2	svg/ordinaries/bar.inc	/^        $Y2 = $Y1 - $H3;$/;"	v
Yflex	svg/placecharge.inc	/^  $Yflex = array_key_exists('hflex', $charge) ? $charge['hflex'] : 1;$/;"	v
Yoff	svg/linetypes.inc	/^      $Yoff = $dist;$/;"	v
Yscale	svg/placecharge.inc	/^        $Yscale = ($chargeX*$Xscale)\/($limit*$chargeY);$/;"	v
Yscale	svg/placecharge.inc	/^  $Yscale = $boundY \/ $chargeY;$/;"	v
Yshift	svg/getcharge.inc	/^    $Yshift = (($newSize - $height) \/ -2)\/ $scale;$/;"	v
Ystart	svg/linetypes.inc	/^      $Ystart = $dist;$/;"	v
Ystart	svg/linetypes.inc	/^  $Ystart = 0;$/;"	v
__clone	svg/bezier.inc	/^    function __clone()$/;"	f
__construct	analyser/references.inc	/^  function __construct($xml) {$/;"	f
__construct	parser/english/lexicon.inc	/^    public function __construct()$/;"	f
__construct	parser/grammar.inc	/^  public function __construct( $language = 'english', BlazonML $schema) {$/;"	f
__construct	parser/matcher.inc	/^  function __construct($tokenList, $patternDB) {$/;"	f
__construct	parser/parser.inc	/^  public function __construct( $language = 'english' ) {$/;"	f
__construct	parser/tokeniser.inc	/^  function __construct($blazon) {$/;"	f
__construct	parser/utilities.inc	/^  public function __construct($version = '1.0', $encoding = null) {$/;"	f
__construct	parser/utilities.inc	/^  public function __construct(){$/;"	f
__construct	svg/bezier.inc	/^    function __construct($closed, $segments = [])$/;"	f
__construct	svg/bezier.inc	/^    function __construct($index, CubicBezier $segment, $t, CompiledBezierSegment $parent)$/;"	f
__construct	svg/bezier.inc	/^    function __construct($sub_paths)$/;"	f
__construct	svg/bezier.inc	/^    function __construct($sub_segments, $flags)$/;"	f
__construct	svg/bezier.inc	/^    function __construct(ShieldPos $pos, ShieldPos $tan_in = null, ShieldPos $tan_out = null)$/;"	f
__construct	svg/bezier.inc	/^    function __construct(ShieldPos $start, ShieldPos $tan1, ShieldPos $tan2, ShieldPos $finish)$/;"	f
__construct	svg/edges/edge_type.inc	/^    function __construct(PolyBezier $shape)$/;"	f
__construct	svg/edges/edge_type.inc	/^    function __construct(PolyBezier $shape, $can_be_halved, $reverse_behaviour, $scale_x, $scale_y)$/;"	f
__construct	svg/edges/edge_type.inc	/^    function __construct(PolyBezier $top, PolyBezier $bottom, PolyBezier $bottom_small)$/;"	f
__construct	svg/getwords.inc	/^    function __construct($fontName = 'serif') {$/;"	f
__construct	svg/messages.inc	/^  public function __construct ($dom) {$/;"	f
__construct	svg/metadata.inc	/^  public function __construct()$/;"	f
__construct	svg/ordinaries/shield_shape_utils.inc	/^    function __construct(ShieldPos $tan1, ShieldPos $tan2, ShieldPos $dest, $margin_bottom = 0, $margin_top = 0)$/;"	f
__construct	svg/proper.inc	/^  public function __construct()$/;"	f
__construct	svg/quartering.inc	/^    function __construct($layout)$/;"	f
__construct	svg/quartering.inc	/^    function __construct($pos, $size, $scale, $rel_size, $shape, $charge_hint = null, $section = "quarter")$/;"	f
__construct	svg/size.inc	/^    function __construct($width, $height)$/;"	f
__construct	svg/size.inc	/^    function __construct($x, $y)$/;"	f
__construct	svg/size.inc	/^    function __construct(ShieldPos $pos, ShieldSize $size)$/;"	f
__construct	svg/size.inc	/^    function __construct(ShieldSize $size, $shape, ShieldPos $center_point = null, ShieldRect $charge_hint = null, $chief = true, $section = null)$/;"	f
__construct	svg/tinctures.inc	/^    function __construct($tinctureNode, $rev = false, $inv = false)$/;"	f
__construct	svg/transform.inc	/^    function __construct()$/;"	f
__toString	svg/linetypes.inc	/^    function __toString()$/;"	f
__toString	svg/size.inc	/^    function __toString()$/;"	f
a	svg/bezier.inc	/^        $a = $lp2->translated(-$lp1->x, -$lp1->y);$/;"	v
a	svg/size.inc	/^        $a = $origin->angle_to($this) + $angle;$/;"	v
a	svg/transform.inc	/^    function a() { return $this->get(0, 0); }$/;"	f
a1	svg/divisions/gyronny.inc	/^        $a1 = $angle * $i;$/;"	v
a2	svg/divisions/gyronny.inc	/^        $a2 = $angle * ($i+1);$/;"	v
achievement	svg/draw.inc	/^                            $achievement = false; \/\/ can't combine these$/;"	v
achievement	svg/draw.inc	/^                    $achievement = true;$/;"	v
achievement	svg/draw.inc	/^    $achievement = false;$/;"	v
achievementNode	parser/grammar.inc	/^      $this->achievementNode = $this->schema->makeNode(blazonML::E_ACHIEVEMENT);$/;"	v
achievementNode	parser/grammar.inc	/^  protected $achievementNode = null;$/;"	v
addAchievement	parser/grammar.inc	/^  protected function addAchievement($child) {$/;"	f
addChild	svg/svgtools.inc	/^function addChild(SimpleXMLElement $element, $featureColours, $chargeGroup, $chargeName, $/;"	f
addInstruction	parser/grammar.inc	/^  protected function addInstruction($child) {$/;"	f
addMantling	svg/draw.inc	/^                            $addMantling = true;$/;"	v
addMantling	svg/draw.inc	/^                    $addMantling = true;$/;"	v
addMantling	svg/draw.inc	/^        $addMantling = false;$/;"	v
addMessage	svg/messages.inc	/^  public function addMessage( $category, $message ) {$/;"	f
addPatterns	parser/lexicon.inc	/^  public function addPatterns($key,$newPatterns) {$/;"	f
add_def	svg/svgtools.inc	/^function add_def($element = '', $content = '', $name = '', $title = '', $desc = ''){$/;"	f
add_def	svg/tinctures.inc	/^    private function add_def($element, $content)$/;"	f
add_element	shieldcommon.js	/^    function add_element(target, tag)$/;"	f
add_flory	svg/edges/edge_type.inc	/^    private function add_flory(ShieldPos $p0, ShieldPos $p1, ShieldPos $pm, MutableShape $target, $feature_height, $direction)$/;"	f
add_flory_bezier	svg/edges/edge_type.inc	/^    private function add_flory_bezier(CompiledPolyBezier $source, MutableShape $target, $feature_gap, $feature_height, &$data, &$tot_counts, $min_flories)$/;"	f
add_flory_segment	svg/edges/edge_type.inc	/^    private function add_flory_segment(CompiledBezierSegment $source, MutableShape $target, $feature_height, $direction, &$data)$/;"	f
add_path	svg/bezier.inc	/^    function add_path(PolyBezier $path)$/;"	f
add_point	svg/bezier.inc	/^    function add_point($point)$/;"	f
add_row	svg/quartering.inc	/^    function add_row($n_columns, $height_mult = null)$/;"	f
add_segment	svg/bezier.inc	/^    function add_segment(CompiledBezierSegment $segment)$/;"	f
add_spaces	svg/bezier.inc	/^        $add_spaces = preg_replace(["\/([a-zA-Z])([-+0-9.])\/", "\/([-+0-9.])([-a-zA-Z])\/"], "$1 $2", $d);$/;"	v
add_svg_transform	svg/transform.inc	/^    function add_svg_transform($transform)$/;"	f
add_svg_transform_item_split	svg/transform.inc	/^    private function add_svg_transform_item_split($name, $params)$/;"	f
add_text	shieldcommon.js	/^    function add_text(target, text)$/;"	f
add_text_element	shieldcommon.js	/^    function add_text_element(target, tag, text)$/;"	f
additions	analyser/utilities.inc	/^  $additions = array ( 'a' => 1, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5,$/;"	v
adjCenterX	svg/arrangements.inc	/^                $adjCenterX = ($adjX + ($adjWidth \/ 2)) \/ 1000;$/;"	v
adjCenterY	svg/arrangements.inc	/^                $adjCenterY = ($adjY + ($adjHeight\/ 2)) \/ 1000;$/;"	v
adjacentCharge	analyser/references.inc	/^        $adjacentCharge = $prevCharges->item($prevCharges->length - 1);$/;"	v
adjust	svg/linetypes.inc	/^    $adjust = meetEdges($dir, $io, $nextDir, $io, $size*2 );$/;"	v
adjust	svg/linetypes.inc	/^    $adjust = meetEdges($edges[$i]['dir'], $edges[$i]['end'], $edges[$next]['dir'], $edges[$next]['start'], $size );$/;"	v
adjust	svg/placecharge.inc	/^    function adjust($keyterm)$/;"	f
adjustDistance	svg/arrangements.inc	/^function adjustDistance($item, $placement) {$/;"	f
adjustPlacement	svg/arrangements.inc	/^   function adjustPlacement($placement,$boundingBox, $scaleSize = true) {$/;"	f
adjust_chief	parser/english/grammar.inc	/^    protected function adjust_chief($simple, $ordChgs)$/;"	f
adjust_tangent	svg/bezier.inc	/^    private function adjust_tangent($tangent, $pos_old, $pos_new)$/;"	f
adjustmentList	svg/arrangements.inc	/^                $adjustmentList = array_merge($adjustmentList, $pos_adjust);$/;"	v
adjustmentList	svg/arrangements.inc	/^        $adjustmentList = [$boundingBox];$/;"	v
adjustmentList	svg/arrangements.inc	/^    $adjustmentList = [];$/;"	v
adjustment_from_position	svg/arrangements.inc	/^function adjustment_from_position($position, $layout, $underlying_div, $bigOrdinary, $cadency, $item)$/;"	f
adjustment_quarter	svg/arrangements.inc	/^function adjustment_quarter($number, ShieldLayout $layout, $bigOrdinary)$/;"	f
adjustments	parser/english/grammar.inc	/^        $adjustments = array();$/;"	v
adjustments	svg/achievement.inc	/^    $adjustments = [];$/;"	v
adjustments	svg/achievement.inc	/^    $adjustments = null;$/;"	v
allMessages	drawshield.php	/^      $allMessages = $newDom->getElementsByTagNameNS('http:\/\/drawshield.net\/blazonML','message');$/;"	v
allTokens	parser/grammar.inc	/^      $allTokens = $this->tokenList->getTokens();$/;"	v
allowArr	parser/english/grammar.inc	/^                $allowArr = false;$/;"	v
allowPos	parser/english/grammar.inc	/^                $allowPos = false;$/;"	v
always_proper	parser/english/grammar.inc	/^        $always_proper = strpos($flags, 'P') !== false;$/;"	v
anchor_angle	svg/svgtools.inc	/^    $anchor_angle = 0;$/;"	v
anchor_radius	svg/svgtools.inc	/^    $anchor_radius = floatval($element["r"] ?? $element["rx"]);$/;"	v
anchor_transform	svg/svgtools.inc	/^    $anchor_transform = $element['transform'] ?? "";$/;"	v
ang	svg/transform.inc	/^                $ang = $params[0];$/;"	v
angle	svg/arrangements.inc	/^            $angle = $angle_start + $angle_step * $i;$/;"	v
angle	svg/arrangements.inc	/^    $angle = 0;$/;"	v
angle	svg/bezier.inc	/^        $angle = $segment_start->angle_to($segment_finish);$/;"	v
angle	svg/bezier.inc	/^        $angle = $this->tangent() + $angle;$/;"	v
angle	svg/charges/mullet/mullet.inc	/^    $angle = M_PI * 2 \/ $num_of;$/;"	v
angle	svg/divisions/gyronny.inc	/^    $angle = M_PI * 2 \/ $num_of;$/;"	v
angle	svg/edges/edge_type.inc	/^        $angle = atan2($p2->y - $p1->y, $p2->x - $p1->x);$/;"	v
angle	svg/linetypes.inc	/^    $angle = dir2angle($dir);$/;"	v
angle	svg/linetypes.inc	/^  $angle = $dirAngles[$startDir] - $dirAngles[$endDir];$/;"	v
angle	svg/ordinaries/flag/pall.inc	/^$angle = atan2($layout->center_point->y, $layout->center_point->x);$/;"	v
angle	svg/ordinaries/flag/saltire.inc	/^$angle = atan2($layout->size->height, $layout->size->width);$/;"	v
angle	svg/ordinaries/saltire.inc	/^    $angle = 45;$/;"	v
angle	svg/placecharge.inc	/^                $this->angle = -18;$/;"	v
angle	svg/placecharge.inc	/^                $this->angle = -27;$/;"	v
angle	svg/placecharge.inc	/^                $this->angle = -36;$/;"	v
angle	svg/placecharge.inc	/^                $this->angle = -9;$/;"	v
angle	svg/placecharge.inc	/^                $this->angle = 18;$/;"	v
angle	svg/placecharge.inc	/^                $this->angle = 27;$/;"	v
angle	svg/placecharge.inc	/^                $this->angle = 36;$/;"	v
angle	svg/placecharge.inc	/^                $this->angle = 9;$/;"	v
angle	svg/placecharge.inc	/^          $angle = ($orientation == 'bendwise') ? "-45" : "45";$/;"	v
angle	svg/placecharge.inc	/^          $angle = ($orientation == 'bendwise') ? "45" : "135";$/;"	v
angle	svg/placecharge.inc	/^    public $angle = 0;$/;"	v
angle_delta	svg/ordinaries/shield_shape_utils.inc	/^            $angle_delta = M_PI * 2;$/;"	v
angle_in	svg/edges/edge_type.inc	/^        $angle_in = $p0->angle_to($pm);$/;"	v
angle_out	svg/edges/edge_type.inc	/^        $angle_out = $pm->angle_to($p1);$/;"	v
angle_start	svg/arrangements.inc	/^        $angle_start = -32;$/;"	v
angle_step	svg/arrangements.inc	/^        $angle_step = 64 \/ ($n - 1);$/;"	v
angle_step	svg/ordinaries/shield_shape_utils.inc	/^        $angle_step = M_PI * 2 \/ $count;$/;"	v
angle_to	svg/size.inc	/^    function angle_to($other)$/;"	f
annuletMods	svg/charges/annulet/annulet.inc	/^$annuletMods = array('concentric', 'interlaced', 'braced', 'conjunct',);$/;"	v
apply	svg/edges/edge_type.inc	/^    function apply(CompiledShape $source, MutableShape $target, $feature_gap, $feature_height = null, $min_flories=1)$/;"	f
apply	svg/edges/edge_type.inc	/^    function apply(CompiledShape $source, MutableShape $target, $feature_width, $feature_height = null)$/;"	f
apply	svg/transform.inc	/^    function apply(ShieldPos $p): ShieldPos$/;"	f
apply_bezier	svg/edges/edge_type.inc	/^    function apply_bezier(CompiledPolyBezier $source, MutableShape $target, $feature_width, $feature_height)$/;"	f
apply_bezier_segment	svg/edges/edge_type.inc	/^    function apply_bezier_segment(CompiledBezierSegment $source, MutableShape $target, $feature_width, $feature_height)$/;"	f
apply_box	svg/transform.inc	/^    function apply_box(ShieldRect $r) : ShieldRect$/;"	f
apply_inv	svg/tinctures.inc	/^    private function apply_inv(&$data)$/;"	f
apply_line_segment	svg/edges/edge_type.inc	/^    function apply_line_segment(ShieldPos $p1, ShieldPos $p2, MutableShape $target, $height = null, $scale = 1)$/;"	f
apply_rev	svg/tinctures.inc	/^    private function apply_rev(&$data)$/;"	f
apply_tincture	svg/tinctures.inc	/^function apply_tincture ($tinctureNode, $targetSVG, ShieldLayout $layout, ShieldSize $chg_size = null,$/;"	f
ar	drawshield.php	/^        $ar = $blazonOption->getAttribute('keyterm');$/;"	v
ar	drawshield.php	/^$ar = null;$/;"	v
ar	parser/utilities.inc	/^    $ar = $numerator \/ $denominator;$/;"	v
ar	parser/utilities.inc	/^    $ar = 0.25;$/;"	v
ar	parser/utilities.inc	/^    $ar = 4;$/;"	v
ar	parser/utilities.inc	/^    $ar = floatval($ar);$/;"	v
arParts	parser/utilities.inc	/^    $arParts = explode(':', $ar);$/;"	v
arch	svg/charges/characters/word.inc	/^    $arch = add_def('path d="m 25,0 a1,0.7 0 0,0 400,0"',null);$/;"	v
arch	svg/charges/characters/word.inc	/^    $arch = add_def('path d="m 25,160 a1,0.7 0 0,1 400,0 a1,0.7 0 0,0 400,0"',null);$/;"	v
arch	svg/charges/characters/word.inc	/^    $arch = add_def('path d="m 25,200 a1,0.7 0 0,1 400,0"',null);$/;"	v
arch	svg/charges/characters/word.inc	/^    $arch = add_def('path d="m 50,200 a200,200 0 1,1 400,0 200,200 0 1,1 -400,0"',null);$/;"	v
arch	svg/ordinaries/mount.inc	/^$arch = (new PolyBezier())$/;"	v
arch_back	svg/ordinaries/mount.inc	/^            $arch_back = new CubicBezier($points[1]->pos, $points[1]->tan_out, $points[2]->tan_in, $points[2]->pos);$/;"	v
area_diag	svg/divisions/bendy.inc	/^$area_diag = hypot($area_width, $area_height);$/;"	v
area_height	svg/divisions/bendy.inc	/^$area_height = $layout->size->height - $layout->division_offset->y - $diag_off1 - $diag_off2;$/;"	v
area_width	svg/divisions/bendy.inc	/^$area_width = $layout->size->width - $diag_off1 - $diag_off2;$/;"	v
arg	tests/runtests.php	/^            $arg = rtrim($arg,'\\\\');$/;"	v
arg	tests/runtests.php	/^        $arg = '';$/;"	v
arg	tests/runtests.php	/^    $arg = '';$/;"	v
argArray	svg/pathtools.inc	/^  $argArray = array();$/;"	v
argString	svg/pathtools.inc	/^  $argString = preg_replace('\/-\/',' -', $argString);$/;"	v
args	randomblazon.php	/^$args = array_merge( $_POST, $_GET); \/\/ don't care where they came from$/;"	v
args	tests/runtests.php	/^    $args = [];$/;"	v
arm	svg/divisions/per-saltire.inc	/^$arm = (max($layout->center_point->x, $layout->center_point->y) + $margin) * M_SQRT2;$/;"	v
arm_d	svg/ordinaries/plain-cross.inc	/^$arm_d = ($layout->size->height - $cy) - $width \/ 2 + $margin;$/;"	v
arm_l	svg/ordinaries/pall.inc	/^    $arm_l = 1000;$/;"	v
arm_l	svg/ordinaries/plain-cross.inc	/^$arm_l = $cx - $width \/ 2 + $margin;$/;"	v
arm_length_external	svg/ordinaries/saltire.inc	/^$arm_length_external = $arm_length_internal - $width\/2;$/;"	v
arm_length_internal	svg/ordinaries/saltire.inc	/^$arm_length_internal = $margin + max($cx, $cy) * M_SQRT2;$/;"	v
arm_r	svg/ordinaries/plain-cross.inc	/^$arm_r = ($layout->size->width - $cx) - $width \/ 2 + $margin;$/;"	v
arm_u	svg/ordinaries/plain-cross.inc	/^$arm_u = $cy - $width \/ 2 + $margin;$/;"	v
arr	parser/english/grammar.inc	/^                    $arr = getModifierByType($child, 'arrangement', false);$/;"	v
arr	svg/arrangements.inc	/^    $arr = getModifierByType($item,'arrangement', true);$/;"	v
arr	svg/ordinary.inc	/^                $arr = getModifierByType($onObject, 'arrangement', true);$/;"	v
array_to_placement	svg/arrangements.inc	/^function array_to_placement($array)$/;"	f
array_to_placement_impl	svg/arrangements.inc	/^function array_to_placement_impl($array)$/;"	f
aspect	svg/getcharge.inc	/^                    $aspect = 0.6;$/;"	v
aspect	svg/getcharge.inc	/^                    $aspect = calculateAR($aspect);$/;"	v
aspect	svg/getcharge.inc	/^                $aspect = $xpath->evaluate("string(aspect\/@keyterm)", $node);$/;"	v
assume_num	parser/english/grammar.inc	/^                $assume_num = false; \/\/ reset if it was true$/;"	v
assume_num	parser/english/grammar.inc	/^        $assume_num = false;$/;"	v
atWord	parser/grammar.inc	/^  public function atWord() {$/;"	f
attitudes	svg/getcharge.inc	/^    static $attitudes = [];$/;"	v
attribs	svg/placecharge.inc	/^    $attribs = "transform=\\"translate($posX,$posY) scale($Xscale, $Yscale) $rotation\\"";$/;"	v
auto_center	svg/size.inc	/^    function auto_center()$/;"	f
auto_chief	svg/size.inc	/^    function auto_chief()$/;"	f
b	svg/bezier.inc	/^        $b = $rp1->translated(-$rp2->x, -$rp2->y);$/;"	v
b	svg/size.inc	/^        $b = $this->bottom() - $y2;$/;"	v
b	svg/transform.inc	/^    function b() { return $this->get(0, 1); }$/;"	f
background	svg/treatment.inc	/^        $background = $child;$/;"	v
background	svg/treatment.inc	/^  $background = $charge = null;$/;"	v
background	svg/treatment.inc	/^  $background = $charge1 = $charge2 = null;$/;"	v
badWords	parser/tokeniser.inc	/^    $this->badWords = true;$/;"	v
badWords	parser/tokeniser.inc	/^  public $badWords = false; \/\/ Set if unknown token encountered$/;"	v
baggage	drawshield.php	/^      $baggage = $dom->getElementsByTagNameNS('http:\/\/drawshield.net\/blazonML','input')->item(0);$/;"	v
baggage	drawshield.php	/^      $baggage = $dom->getElementsByTagNameNS('http:\/\/drawshield.net\/blazonML','messages')->item(0);$/;"	v
bar_length	svg/ordinaries/bar.inc	/^          $bar_length = '1000';$/;"	v
bar_length	svg/ordinaries/bar.inc	/^          $bar_length = '800';$/;"	v
bar_length	svg/ordinaries/bar.inc	/^  $bar_length = '1200';$/;"	v
bar_locs	svg/ordinaries/bar.inc	/^  $bar_locs = array ( \/\/  0    1     2       3          4          5             6               7                  8$/;"	v
bar_start	svg/ordinaries/bar.inc	/^          $bar_start = '-100';$/;"	v
bar_start	svg/ordinaries/bar.inc	/^          $bar_start = '100';$/;"	v
bar_start	svg/ordinaries/bar.inc	/^  $bar_start = '-100';$/;"	v
bar_width	svg/ordinaries/bar.inc	/^      $bar_width = 100;$/;"	v
bar_width	svg/ordinaries/bar.inc	/^      $bar_width = 200;$/;"	v
bar_width	svg/ordinaries/bar.inc	/^      $bar_width = 50;$/;"	v
bar_width	svg/ordinaries/bar.inc	/^      $bar_width = 80;$/;"	v
base	svg/divisions/tierced-in-bend.inc	/^$base = max($layout->size->width, $layout->size->height);$/;"	v
base	svg/ordinaries/baton.inc	/^$base = min($layout->center_point->x, $layout->center_point->y) - 100;$/;"	v
base	svg/ordinaries/bend-helper.inc	/^    $base = min($layout->center_point->x, $layout->center_point->y) - $margin;$/;"	v
base	svg/treatment.inc	/^            $base = apply_tincture($tinctures[1], '<rect x="0" y="0" width="' .$/;"	v
base	svg/treatment.inc	/^            $base = apply_tincture($tinctures[2], '<rect x="0" y="0" width="' .$/;"	v
base	svg/treatment.inc	/^        $base = '';$/;"	v
base	svg/treatment.inc	/^    $base = apply_tincture ( $background, '<rect x="0" y="0" width="200" height="200" \/>', $layout );$/;"	v
base	svg/treatment.inc	/^    $base = apply_tincture ( $background, '<rect x="0" y="0" width="300" height="300" \/>', $layout );$/;"	v
basename	svg/ordinary.inc	/^    $basename = basename($subfile, ".svg");$/;"	v
basename	tests/runtests.php	/^        $basename = substr($case,0,-4);$/;"	v
bb	svg/svgtools.inc	/^        $bb = $transform->apply_box($extra["bounding_box"]);$/;"	v
bb	svg/svgtools.inc	/^    $bb = $transform->apply_box($held["bounding_box"]);$/;"	v
bbElements	svg/arrangements.inc	/^     $bbElements = explode(',',$boundingBox);$/;"	v
bb_h	svg/arrangements.inc	/^      $bb_h = 800;$/;"	v
bb_h	svg/arrangements.inc	/^    $bb_h = $bb->size->height;$/;"	v
bb_w	svg/arrangements.inc	/^      $bb_w = 900;$/;"	v
bb_w	svg/arrangements.inc	/^    $bb_w = $bb->size->width;$/;"	v
bb_x	svg/arrangements.inc	/^      $bb_x = $bb_y = 100;$/;"	v
bb_x	svg/arrangements.inc	/^    $bb_x = $bb->left();$/;"	v
bb_y	svg/arrangements.inc	/^    $bb_y = $bb->top();$/;"	v
bbh	svg/arrangements.inc	/^     $bbh = $bbElements[3];$/;"	v
bbw	svg/arrangements.inc	/^     $bbw = $bbElements[2];$/;"	v
bbx	svg/arrangements.inc	/^     $bbx = $bbElements[0];$/;"	v
bbx	svg/placecharge.inc	/^  $bbx = 200;$/;"	v
bby	svg/arrangements.inc	/^     $bby = $bbElements[1];$/;"	v
bby	svg/placecharge.inc	/^  $bby = 200;$/;"	v
bend_diag_off	svg/divisions/bendy.inc	/^$bend_diag_off = $bend_length \/ M_SQRT2 \/ 2;$/;"	v
bend_length	svg/divisions/bendy.inc	/^$bend_length = max($layout->size->width, $layout->size->height) * M_SQRT2 + 100;$/;"	v
bend_length	svg/ordinaries/bar.inc	/^$bend_length = 1600; \/\/ future - adjust for flag height???$/;"	v
bend_path	svg/ordinaries/flag/bend.inc	/^$bend_path = rotatePath($path_spec,rad2deg($theta));$/;"	v
bend_width	svg/divisions/bendy.inc	/^$bend_width = $area_diag \/ $num_of;$/;"	v
bend_within	svg/ordinaries/bend-helper.inc	/^function bend_within($layout, $width)$/;"	f
bestEntry	svg/placement-data.inc	/^    $bestEntry = '';$/;"	v
bestExtra	svg/getcharge.inc	/^  $bestExtra = '';$/;"	v
bestExtra	svg/placement-data.inc	/^        $bestExtra = $extra;$/;"	v
bestExtra	svg/placement-data.inc	/^    $bestExtra = '';$/;"	v
bestFilename	svg/getcharge.inc	/^      $bestFilename = $entry;$/;"	v
bestFilename	svg/getcharge.inc	/^  $bestFilename = '';$/;"	v
bestMissing	svg/getcharge.inc	/^      $bestMissing = $missing;$/;"	v
bestMissing	svg/getcharge.inc	/^  $bestMissing = '';$/;"	v
bestMissing	svg/placement-data.inc	/^        $bestMissing = $missing;$/;"	v
bestMissing	svg/placement-data.inc	/^    $bestMissing = '';$/;"	v
bestValue	svg/placement-data.inc	/^        $bestValue = $func($item, $arg);$/;"	v
bestValue	svg/placement-data.inc	/^        $bestValue = $value;$/;"	v
best_height	svg/size.inc	/^    static function best_height($shape)$/;"	f
between	svg/placecharge.inc	/^      $between = null;$/;"	v
between	svg/placecharge.inc	/^    $between = $child->firstChild;$/;"	v
between	svg/placecharge.inc	/^  $between = null;$/;"	v
betweenMod	parser/english/grammar.inc	/^                        $betweenMod = $this->schema->makeMod(languageDB::CHARGE_BETWEEN, null,$/;"	v
betweenMod	parser/english/grammar.inc	/^                $betweenMod = $this->schema->makeMod(languageDB::CHARGE_BETWEEN, null,$/;"	v
betweenMod	parser/english/grammar.inc	/^                $betweenMod = null;$/;"	v
betweenMod	parser/english/grammar.inc	/^            $betweenMod = null;$/;"	v
between_placement	svg/placecharge.inc	/^    $between_placement = get_placement($between, $layout);$/;"	v
bez	svg/bezier.inc	/^        $bez = new PolyBezier();$/;"	v
bez	svg/ordinaries/mount.inc	/^            $bez = $arch_back->split($t)[0];$/;"	v
bez	svg/ordinaries/mount.inc	/^            $bez = $bez->translated(-$bez->finish->x, 0);$/;"	v
bez_l	svg/ordinaries/shield_shape_utils.inc	/^        $bez_l = $this->scaled_curve($tip, $scale, -1);$/;"	v
bez_r	svg/ordinaries/shield_shape_utils.inc	/^        $bez_r = $this->scaled_curve($tip, $scale, 1);$/;"	v
bezier	svg/bezier.inc	/^        $this->bezier = $bezier ?? new MutableShape();$/;"	v
bezier	svg/bezier.inc	/^    public $bezier;$/;"	v
bezier_a	svg/bezier.inc	/^    private static function bezier_a($k0, $k1, $k2, $k3)$/;"	f
bezier_b	svg/bezier.inc	/^    private static function bezier_b($k0, $k1, $k2)$/;"	f
bezier_c	svg/bezier.inc	/^    private static function bezier_c($k0, $k1)$/;"	f
bezier_component	svg/bezier.inc	/^    static function bezier_component($t, $k0, $k1, $k2, $k3)$/;"	f
bezier_d	svg/bezier.inc	/^    private static function bezier_d($k0)$/;"	f
bezier_solve	svg/bezier.inc	/^    static function bezier_solve($t, ShieldPos $p1, ShieldPos $p2, ShieldPos $p3, ShieldPos $p4)$/;"	f
bigOrdinary	svg/arrangements.inc	/^            $bigOrdinary = $xpath->evaluate("boolean(..\/ordinary[@keyterm='fess'] or ..\/ordinary[@keyterm='pale'] or ..\/ordinary[@keyterm='plain-cross'])", $item);$/;"	v
big_rows	svg/arrangements.inc	/^  $big_rows = array ( \/\/ over 20, all the same$/;"	v
bl	svg/ordinaries/shield_shape_utils.inc	/^            $bl = new  ShieldPos($inset + $margin_top, $inset);$/;"	v
black	svg/proper.inc	/^  static $black;$/;"	v
blazon	randomblazon.php	/^    $blazon = create();$/;"	v
blazon	randomblazon.php	/^    $blazon = expand(randomly($fieldTypes));$/;"	v
blazon	randomblazon.php	/^    $blazon = punctuate($blazon) . $separator;$/;"	v
blazonML	parser/utilities.inc	/^class blazonML extends DOMDocument {$/;"	c
blazonMLText	svg/draw.inc	/^                $blazonMLText = $dom->saveXml(); \/\/ Need to remove the processing instruction$/;"	v
blazonMLText	svg/draw.inc	/^                $blazonMLText = preg_replace('\/<\\?xml version="1\\.0"( encoding="utf-8")?\\?>\/i', '', $blazonMLText);$/;"	v
blazonNode	svg/draw.inc	/^        $blazonNode = $dom->documentElement;$/;"	v
blazonNode	svg/draw.inc	/^    $blazonNode = $dom->documentElement;$/;"	v
blazonOption	drawshield.php	/^    $blazonOption = $blazonOptions->item($i);$/;"	v
blazonOptions	drawshield.php	/^$blazonOptions = $xpath->query('\/\/instructions\/child::*');$/;"	v
blue	svg/proper.inc	/^  static $blue;$/;"	v
blue	svg/tinctures.inc	/^  $blue = intval('0x' . substr($hex,4,2),16);$/;"	v
blue1	svg/tinctures.inc	/^    $blue1 = intval('0x' . substr($hex1,4,2),16);$/;"	v
blue2	svg/tinctures.inc	/^    $blue2 = intval('0x' . substr($hex2,4,2),16);$/;"	v
blue3	svg/tinctures.inc	/^    $blue3 = intval(($blue1 + $blue2) \/ 2);$/;"	v
body	svg/draw.inc	/^                $body = '<g transform="translate(57,0) scale(0.88) ">' . $body . '<\/g>';$/;"	v
body	svg/draw.inc	/^            $body = '<g transform="translate(0,-100) ">' . $body . '<\/g>' . $motto;$/;"	v
body	svg/draw.inc	/^            $body = getEffect($effect, 'below') . '<g ' . getEffect($effect, 'filter') . '>' . $body . getEffect($effect, 'above') . '<\/g>';$/;"	v
body	svg/draw.inc	/^            $body = quickPlace($compartment['body'], $compartment['width'], $compartment['height'], 1000, 300, 500, 910, rgb($compartment['fill']), $compartment['adjustments']) . $body;$/;"	v
body	svg/draw.inc	/^        $body = $mantling . '<g transform="translate(191.667,400) scale(0.61667) ">' . $body . '<\/g>';$/;"	v
body	svg/draw.inc	/^        $body = '';$/;"	v
body	svg/draw.inc	/^        $body = '<g mask="url(#' . $clipShield . ')">' . $body . '<\/g>';$/;"	v
body	svg/draw.inc	/^        $body = '<g transform="translate(150,0) scale(0.7) ">' . $body . '<\/g>' . $supports;$/;"	v
body	svg/draw.inc	/^        $body = getEffect($effect, 'below') . '<g ' . getEffect($effect, 'filter') . '>' . $body . getEffect($effect, 'above') . '<\/g>';$/;"	v
body	svg/draw.inc	/^        $body = quickPlace($body, 1000, 1200, 1000, 1200, 500, 600, null, $shieldAdjustments);$/;"	v
body	svg/getcharge.inc	/^            $body = "<g style='filter:url(#$id)'>$body<\/g>";$/;"	v
body	svg/getcharge.inc	/^            $body = '<g clip-path="url(#' . $clip . ')" >' . makeshield( $shield, $child_layout ) . "<\/g>\\n";$/;"	v
body	svg/getcharge.inc	/^          $body = $charges . '<g transform="translate(' . $xAdjust . ',' . $yAdjust . ') scale(' . $scale . ')">' . $body . '<\/g>';$/;"	v
body	svg/getcharge.inc	/^          $body = '<g transform="translate(' . $xAdjust . ',' . $yAdjust . ') scale(' . $scale . ')">' . $body . '<\/g>' . $charges;$/;"	v
body	svg/getcharge.inc	/^        $body = "<defs>" . implode("", $defs) . "<\/defs>" . $body;$/;"	v
body	svg/getcharge.inc	/^        $body = '<g clip-path="url(#' . $clip . ')">' . $body . '<\/g>';$/;"	v
body	svg/getcharge.inc	/^        $body = '<g transform="translate(-' .  $half . ',0)" clip-path="url(#' . $clip . ')">' . $body . '<\/g>';$/;"	v
body	svg/getcharge.inc	/^        $body = '<g transform="translate(0, -' .  $half . ')" clip-path="url(#' . $clip . ')">' . $body . '<\/g>';$/;"	v
body	svg/getcharge.inc	/^      $body = '<g clip-path="url(#' . $clip . ')">' . $body . '<\/g>';$/;"	v
body	svg/getcharge.inc	/^      $body = add_def() . $body;$/;"	v
body	svg/getcharge.inc	/^    $body = $height = $width = \/* $licence = *\/ null;$/;"	v
body	svg/getcharge.inc	/^    $body = $sunBody . $body;$/;"	v
body	svg/ordinaries/bar.inc	/^  $body = '';$/;"	v
body	svg/svgtools.inc	/^        $body = apply_tincture($tincture[0], $body, $held["layout"], new ShieldSize($held["width"], $held["height"]), 0, false, false);$/;"	v
body	svg/svgtools.inc	/^    $body = $held["body"];$/;"	v
body2	svg/ordinaries/bordure.inc	/^    $body2 = $shape->compony($layout, 0, $width + $margin);$/;"	v
body2	svg/ordinaries/orle.inc	/^    $body2 = $shape->compony($layout, $margin, $width);$/;"	v
body2	svg/ordinaries/tressure.inc	/^    $body2 = $shape->compony($layout, $margin, $width);$/;"	v
body2	svg/ordinary.inc	/^      $body2 = apply_tincture ( $body2_col, $body2_spec, $layout, null, $rot, $mirrored, $inverted );$/;"	v
body2_fill	svg/ordinary.inc	/^      $body2_fill = add_def( 'pattern patternContentUnits="userSpaceOnUse" patternUnits="userSpaceOnUse" x="0" ' .$/;"	v
body2_spec	svg/ordinary.inc	/^        $body2_spec = '<path d="' . makePath($body2_spec, $linetype, 30) . '" \/>';$/;"	v
body2_spec	svg/ordinary.inc	/^      $body2_spec = subPercent($ord_data['body2'], $layout);$/;"	v
bodyCol	svg/tinctures.inc	/^            $bodyCol = $tincture->firstChild->getAttribute('spec');$/;"	v
bodyCol	svg/tinctures.inc	/^        $bodyCol = get_rgb($tincture);$/;"	v
bodySVG	svg/ordinary.inc	/^	$bodySVG = '';$/;"	v
bodySpec	svg/ordinaries/chevronel.inc	/^        $bodySpec = "<g transform='translate(0,-$dy)'>$bodySpec<\/g>";$/;"	v
bodySpec	svg/ordinaries/chevronel.inc	/^      $bodySpec = '<path d="M 197.98,214.09 C 187.88,226.21 -46.46,1268.69 -46.46,1268.69 L 32.32,1270.71 L 193.94,553.50 L 349.51,1216.16 L 391.93,1056.55 L 197.98,214.09 z" \/>$/;"	v
bodySpec	svg/ordinaries/chevronel.inc	/^      $bodySpec = '<path d="M 290.92,210.05 L 40.40,1260.60 L 125.25,1260.60 L 292.94,551.48 L 454.56,1224.24 L 496.99,1052.51 L 290.92,210.05 z" \/>$/;"	v
bodySpec	svg/ordinaries/chevronel.inc	/^      $bodySpec = '<path d="M 369.71,210.05 L 139.40,1240.40 L 220.21,1240.40 L 371.73,551.48 L 533.36,1240.40 L 606.09,1240.40 L 369.71,210.05 z" \/>$/;"	v
bodySpec	svg/ordinaries/chevronel.inc	/^      $bodySpec = '<path d="M 503.05,210.05 L 822.26,1240.40 C 822.26,1240.40 711.14,1240.40 713.16,1240.40 C 715.18,1240.40 507.09,551.48$/;"	v
body_col	svg/getcharge.inc	/^          $body_col = getProper($chargeGroup, $chargeName );$/;"	v
body_col	svg/getcharge.inc	/^    $body_col = null;$/;"	v
bottom	svg/divisions/pily-bendy.inc	/^$bottom = $layout->size->height;$/;"	v
bottom	svg/divisions/pily.inc	/^$bottom = $layout->size->height;$/;"	v
bottom	svg/edges/edge_type.inc	/^        $this->bottom = $this->normalized($bottom);$/;"	v
bottom	svg/ordinaries/flag/saltire.inc	/^$bottom = $layout->size->height;$/;"	v
bottom	svg/ordinaries/pile.inc	/^    $bottom = $layout->size->height * 0.9;$/;"	v
bottom	svg/ordinaries/pile.inc	/^    $bottom = $layout->size->height;$/;"	v
bottom	svg/ordinaries/shield_shape_utils.inc	/^        $bottom = $layout->size->height - $inset;$/;"	v
bottom	svg/ordinaries/shield_shape_utils.inc	/^        $bottom = $layout->size->height - $this->margin_bottom - $mid + $this->dest->y * $scale;$/;"	v
bottom	svg/quartering.inc	/^    $bottom = $layout->size->height;$/;"	v
bottom	svg/size.inc	/^    function bottom()$/;"	f
bottom_s	svg/quartering.inc	/^    $bottom_s = $layout->size->height * $h * 2;$/;"	v
bottom_small	svg/edges/edge_type.inc	/^        $this->bottom_small = $this->normalized($bottom_small);$/;"	v
boundX	svg/achievement.inc	/^    $boundX = 300;$/;"	v
boundX	svg/placecharge.inc	/^        $boundX = min( $boundX, $boundY );$/;"	v
boundX	svg/placecharge.inc	/^      $boundX = $boundY;$/;"	v
boundY	svg/achievement.inc	/^    $boundY = 600;$/;"	v
boundY	svg/placecharge.inc	/^        $boundY = $boundX;$/;"	v
boundY	svg/placecharge.inc	/^      $boundY = $temp;$/;"	v
boundingBox	svg/arrangements.inc	/^                $boundingBox = $adjust;$/;"	v
boundingBox	svg/arrangements.inc	/^                $boundingBox = new ShieldRect ($newCenter, new ShieldSize(($layout->size->width * $adjWidth * 0.9),$/;"	v
boundingBox	svg/arrangements.inc	/^            $boundingBox = 'x';$/;"	v
boundingBox	svg/arrangements.inc	/^        $boundingBox = $layout->charge_hint;$/;"	v
boundingBox	svg/arrangements.inc	/^        $boundingBox = new ShieldRect($/;"	v
boundingBox	svg/arrangements.inc	/^        $boundingBox = new ShieldRect($center, clone $layout->size);$/;"	v
bounding_box	svg/getcharge.inc	/^            $bounding_box = ShieldRect::from_corners(0, 0, $width, $height);$/;"	v
bounding_box	svg/getcharge.inc	/^    $bounding_box = null;$/;"	v
bounding_box	svg/svgtools.inc	/^    $bounding_box = ShieldRect::from_corners(0, 0, $width, $height);$/;"	v
box_placement	svg/arrangements.inc	/^function box_placement($box, $rot = 0, $inv = 0, $rev = 0)$/;"	f
br	svg/ordinaries/shield_shape_utils.inc	/^            $br = new  ShieldPos($layout->size->width - $inset, $inset + $margin_top);$/;"	v
brown	svg/proper.inc	/^  static $brown;$/;"	v
build_bend	svg/ordinaries/bend-helper.inc	/^function build_bend($layout, $width, $margin, $offset = 0, $path_builder = null)$/;"	f
build_chevron	svg/ordinaries/chevron-helper.inc	/^function build_chevron(ShieldLayout $layout, $width, $offset, PathBuilder $builder, $y_align = 0)$/;"	f
builder	svg/achievement.inc	/^        $builder = new WordBuilder('hooge');$/;"	v
builder	svg/charges/characters/word.inc	/^$builder = new WordBuilder($fontFamily);$/;"	v
builder	svg/divisions/bendy.inc	/^$builder = new PathBuilder();$/;"	v
builder	svg/divisions/chausse.inc	/^$builder = new MutableShape();$/;"	v
builder	svg/divisions/chevronny.inc	/^$builder = new PathBuilder();$/;"	v
builder	svg/divisions/gyronny.inc	/^$builder = new MutableShape();$/;"	v
builder	svg/divisions/per-chief.inc	/^$builder = new PathBuilder();$/;"	v
builder	svg/divisions/per-fess.inc	/^$builder = new PathBuilder();$/;"	v
builder	svg/divisions/pily-bendy.inc	/^$builder = new MutableShape();$/;"	v
builder	svg/divisions/pily.inc	/^$builder = new MutableShape();$/;"	v
builder	svg/ordinaries/bend.inc	/^    $builder = new PathBuilder();$/;"	v
builder	svg/ordinaries/chevron.inc	/^    $builder = new PathBuilder();$/;"	v
builder	svg/ordinaries/chevronel.inc	/^$builder = new PathBuilder();$/;"	v
builder	svg/ordinaries/enty.inc	/^$builder = SvgDParser::parse_d("M 888.70158,1124.8309 C 558.99143,923.1401 499.23001,705.74879 499.23001,705.74879 c 0,0 -59.76141,217.39131 -389.47156,419.08211 l 389.47156,112.6087 z");$/;"	v
builder	svg/ordinaries/fess.inc	/^    $builder = new MutableShape();$/;"	v
builder	svg/ordinaries/flag/pall.inc	/^$builder = new MutableShape();$/;"	v
builder	svg/ordinaries/pile.inc	/^    $builder = new MutableShape();$/;"	v
builder	svg/ordinaries/shield_shape_utils.inc	/^            $builder = new MutableShape();$/;"	v
builder	svg/ordinaries/square-flaunch.inc	/^$builder = new MutableShape();$/;"	v
builder_2	svg/divisions/flag/per-pall.inc	/^$builder_2 = new MutableShape();$/;"	v
builder_2	svg/divisions/per-pall.inc	/^$builder_2 = path_builder($layout->center_point->x, $layout->center_point->y);$/;"	v
builder_2	svg/divisions/per-saltire.inc	/^$builder_2 = path_builder($layout->center_point->x, $layout->center_point->y)->offset(false)->quarterly();$/;"	v
builder_2	svg/divisions/tierced-in-bend.inc	/^    $builder_2 = path_builder($layout->center_point->x + $base, $layout->center_point->y - $base)$/;"	v
builder_2	svg/divisions/tierced-in-bend.inc	/^    $builder_2 = path_builder($layout->center_point->x - $base, $layout->center_point->y - $base)$/;"	v
builder_2	svg/divisions/tierced-in-chevron.inc	/^    $builder_2 = path_builder($layout->center_point->x, $y + $width * M_SQRT2)$/;"	v
builder_2	svg/divisions/tierced-in-chevron.inc	/^    $builder_2 = path_builder($layout->center_point->x, $y - $width \/ M_SQRT2)$/;"	v
builder_2	svg/divisions/tierced-in-fess.inc	/^$builder_2 = path_builder(-$margin, $y1)$/;"	v
builder_3	svg/divisions/flag/per-pall.inc	/^$builder_3 = new MutableShape();$/;"	v
builder_3	svg/divisions/per-pall.inc	/^$builder_3 = path_builder($layout->center_point->x, $layout->center_point->y);$/;"	v
builder_3	svg/divisions/per-saltire.inc	/^$builder_3 = path_builder($layout->center_point->x, $layout->center_point->y)->offset(false)->quarterly();$/;"	v
builder_3	svg/divisions/tierced-in-bend.inc	/^    $builder_3 = path_builder($layout->center_point->x + $base, $layout->center_point->y - $base)$/;"	v
builder_3	svg/divisions/tierced-in-bend.inc	/^    $builder_3 = path_builder($layout->center_point->x - $base, $layout->center_point->y - $base)$/;"	v
builder_3	svg/divisions/tierced-in-chevron.inc	/^    $builder_3 = path_builder($layout->center_point->x, $y + $width \/ M_SQRT2)$/;"	v
builder_3	svg/divisions/tierced-in-chevron.inc	/^    $builder_3 = path_builder($layout->center_point->x, $y)$/;"	v
builder_3	svg/divisions/tierced-in-fess.inc	/^$builder_3 = path_builder(-$margin, $y2)$/;"	v
builder_4	svg/divisions/per-saltire.inc	/^$builder_4 = path_builder($layout->center_point->x, $layout->center_point->y)->offset(false)->quarterly();$/;"	v
bundle	svg/getcharge.inc	/^  $bundle = getModifierNodeByType($node, 'bundle');$/;"	v
byChance	randomblazon.php	/^function byChance($chance) {$/;"	f
c	svg/bezier.inc	/^            $c = $points[$i];$/;"	v
c	svg/bezier.inc	/^            $c = $points[0];$/;"	v
c	svg/bezier.inc	/^        $c = $lp1->translated(-$rp1->x, -$rp1->y);$/;"	v
c	svg/transform.inc	/^    function c() { return $this->get(1, 0); }$/;"	f
cache	svg/edges/edge_type.inc	/^        static $cache = [];$/;"	v
cadency	svg/arrangements.inc	/^    $cadency = existModifierWithKeyterm($item,'difference');$/;"	v
calcHeight	svg/division.inc	/^  $calcHeight = $layout->size->height;$/;"	v
calcHeight	svg/ordinary.inc	/^  $calcHeight = $layout->size->height; \/\/ value to use for calculating drawing height$/;"	v
calcPlace	svg/arrangements.inc	/^function calcPlace( $node, $aspect, $bb = '100,100,800,900'  ) {$/;"	f
calculateAR	parser/utilities.inc	/^function calculateAR($ar) {$/;"	f
callback	svg/pathtools.inc	/^  $callback = function ( $match ) use ( $layout ) {$/;"	v
can_be_halved	svg/edges/edge_type.inc	/^        $this->can_be_halved = $can_be_halved;$/;"	v
cases	tests/runtests.php	/^    $cases = scandir($testcases);$/;"	v
caucasian	svg/proper.inc	/^  static $caucasian;$/;"	v
cb	svg/bezier.inc	/^            $cb = $bez->compile();$/;"	v
cbb_height	svg/arrangements.inc	/^    $cbb_height = $bb_h \/ $num_rows;$/;"	v
cbb_height	svg/arrangements.inc	/^    $cbb_height = ($num_rows == 1) ? $bb_h : ($bb_h * (1-$space_pct)) \/ $num_rows;$/;"	v
cbb_width	svg/arrangements.inc	/^    $cbb_width = $bb_w \/ $max_row;$/;"	v
cbb_width	svg/arrangements.inc	/^    $cbb_width = ($max_row <= 1 ) ? $bb_w : ($bb_w * (1-$space_pct)) \/ $max_row;$/;"	v
center	svg/arrangements.inc	/^    $center = $layout->center_point;$/;"	v
center	svg/arrangements.inc	/^    $center = new ShieldPos($layout->size->width \/ 2, $layout->size->height \/ 2);$/;"	v
center_off	svg/ordinaries/cross-formy.inc	/^$center_off = 103;$/;"	v
center_point	svg/size.inc	/^            $center_point = new ShieldPos(500, $height \/ 2);$/;"	v
center_point	svg/size.inc	/^            $this->center_point = $center_point;$/;"	v
center_point	svg/size.inc	/^            $this->center_point = new ShieldPos($this->size->width \/ 2, $this->size->height \/ 2);$/;"	v
center_point	svg/size.inc	/^            $this->center_point = new ShieldPos($this->size->width \/ 2, 500);$/;"	v
center_point	svg/size.inc	/^        $center_point = new ShieldPos(500, 500);$/;"	v
center_point_ratio	svg/size.inc	/^    function center_point_ratio()$/;"	f
center_x	svg/quartering.inc	/^    $center_x = $layout->size->width \/ 2;$/;"	v
center_y	svg/quartering.inc	/^    $center_y = $layout->size->height * $h;$/;"	v
centering	svg/getwords.inc	/^            $centering = ($width - ($glyphLine['width'] * $scale)) \/ 2;$/;"	v
centreY	svg/achievement.inc	/^    $centreY = 600;$/;"	v
centre_x	svg/arrangements.inc	/^          $centre_x = $bb_x + $offset + (($cbb_width + $horiz_gap) * $j) + ($cbb_width\/2);$/;"	v
centre_x	svg/arrangements.inc	/^          $centre_x = $bb_x + ($bb_w\/2);$/;"	v
centre_x	svg/arrangements.inc	/^          $centre_x = $bb_x + ($cbb_width * $j) + ($cbb_width\/2);$/;"	v
centre_x	svg/arrangements.inc	/^          $centre_x = $bb_x + ((1000 - $bb_x - $bb_x - ($cbb_width * $row_list[$i]))\/2) + ($cbb_width * $j) + ($cbb_width\/2);$/;"	v
centre_y	svg/arrangements.inc	/^      $centre_y = $bb_y + ($cbb_height * $i) + ($cbb_height \/ 2);$/;"	v
centre_y	svg/arrangements.inc	/^      $centre_y = $bb_y + (($cbb_height + $vert_gap) * $i) + ($cbb_height \/ 2);$/;"	v
char	svg/pathtools.inc	/^    $char = $argString[$count];$/;"	v
charWidth	svg/charges/characters/letter.inc	/^      $charWidth = $glyph['horiz-adv-x'];$/;"	v
charge	analyser/utilities.inc	/^  $charge = $dom->createElement('charge');$/;"	v
charge	parser/english/grammar.inc	/^            $charge = self::charge(true,false,false); \/\/ assume number, don't allow positions or arrangements$/;"	v
charge	parser/english/grammar.inc	/^        $charge = $this->schema->makeNode(blazonML::E_CHARGE, array(blazonML::A_NUMBER => "$chgNum"), self::tokens(), self::lineNo());$/;"	v
charge	parser/english/grammar.inc	/^    $charge = self::charge(true,true,false); \/\/ assume number, allow arrangements, don't allow positions$/;"	v
charge	parser/english/grammar.inc	/^    protected function charge($assumeNum = false, $allowArr = true, $allowPos = true)$/;"	f
charge	svg/ordinaries/square-flaunch.inc	/^$charge = new ShieldRect(new ShieldPos($w \/ 3, $layout->center_point->y), new ShieldSize($w * 2\/3, $h\/3));$/;"	v
charge	svg/placecharge.inc	/^  $charge = getCharge( $node, $layout );$/;"	v
charge1	svg/treatment.inc	/^            $charge1 = $child;$/;"	v
charge2	svg/treatment.inc	/^            $charge2 = $child;$/;"	v
chargeAR	svg/placecharge.inc	/^    $chargeAR = $chargeX \/ $chargeY;$/;"	v
chargeInAnnulo	svg/getcharge.inc	/^function chargeInAnnulo($node, &$charge, $base_name, $dir)$/;"	f
chargeList	parser/english/grammar.inc	/^                    $chargeList = $this->schema->makeNode(blazonML::E_LIST);$/;"	v
chargeList	parser/english/grammar.inc	/^        $chargeList = null;$/;"	v
chargeOnMods	svg/getcharge.inc	/^  $chargeOnMods = getModifiersByTypeAsArray($node,'chargewith', true); \/\/ get the actual nodes$/;"	v
chargeOnTop	svg/getcharge.inc	/^            $chargeOnTop = true;$/;"	v
chargeOnTop	svg/getcharge.inc	/^    $chargeOnTop = false;$/;"	v
chargeToAdd	svg/getcharge.inc	/^            $chargeToAdd = $child->firstChild;$/;"	v
chargeToAdd	svg/getcharge.inc	/^    $chargeToAdd = $chargeOn->firstChild;$/;"	v
chargeToAddType	svg/getcharge.inc	/^    $chargeToAddType = $chargeToAdd->getAttribute('keyterm');$/;"	v
chargeWithType	svg/getcharge.inc	/^            $chargeWithType = $child->getAttribute('keyterm');$/;"	v
chargeWithType	svg/getcharge.inc	/^    $chargeWithType = $chargeOn->getAttribute('keyterm');$/;"	v
chargeWithinSVG	svg/ordinary.inc	/^    $chargeWithinSVG = makeCharge($chargesWithin, $layout, $withinPlacement);$/;"	v
chargeWithinSVG	svg/ordinary.inc	/^  $chargeWithinSVG = '';$/;"	v
chargeX	svg/placecharge.inc	/^				$chargeX = ($chargeX + $chargeY) * 0.707;$/;"	v
chargeX	svg/placecharge.inc	/^  $chargeX = max(1,$charge['width']); \/\/ protect against zero$/;"	v
chargeY	svg/placecharge.inc	/^        $chargeY = $chargeX;$/;"	v
chargeY	svg/placecharge.inc	/^  $chargeY = max(1,$charge['height']);$/;"	v
charge_col	svg/getcharge.inc	/^          $charge_col = resolveReference($child);$/;"	v
charge_col	svg/getcharge.inc	/^    $charge_col = null;$/;"	v
charge_hint	svg/quartering.inc	/^        $this->charge_hint = $charge_hint;$/;"	v
charge_hint	svg/size.inc	/^                $charge_hint = new ShieldRect(clone $center_point, $size->scaled(0.8));$/;"	v
charge_hint	svg/size.inc	/^                $charge_hint = new ShieldRect(new ShieldPos(245, 305), new ShieldSize(510, 580));$/;"	v
charge_hint	svg/size.inc	/^        $charge_hint = null;$/;"	v
charge_hint	svg/size.inc	/^        $this->charge_hint = $charge_hint;$/;"	v
charge_mods	svg/svgtools.inc	/^    $charge_mods = $xpath->query("modifier", $held["node"]);$/;"	v
charge_placement	svg/ordinaries/shield_shape_utils.inc	/^    function charge_placement(ShieldLayout $layout, $margin, $width)$/;"	f
charges	svg/getcharge.inc	/^        $charges = makeCharge($chargeToAdd, $new_layout);$/;"	v
charges	svg/getcharge.inc	/^        $charges = makeSquareCharge($chargeToAdd);$/;"	v
charges	svg/getcharge.inc	/^        $charges = sprintf('<g transform="translate(%2f,%2f) scale(%4f)">%s<\/g>',$/;"	v
charges	svg/getcharge.inc	/^    $charges = [];$/;"	v
charges	svg/metadata.inc	/^  static $charges = array();$/;"	v
charges	svg/proper.inc	/^  static $charges = array();$/;"	v
chargesOn	svg/ordinaries/cross-nordic.inc	/^$chargesOn = sprintf('%d,%d,%d,%d', $midway, $midway, $size, $size );$/;"	v
chargesWithin	svg/ordinary.inc	/^    $chargesWithin = (object)$chargesWithin->firstChild;$/;"	v
chars	svg/getwords.inc	/^        $chars = mb_strlen($text);$/;"	v
checkBadWords	parser/grammar.inc	/^  public function checkBadWords () {$/;"	f
checkOverAllParts	parser/english/grammar.inc	/^            $checkOverAllParts = true;$/;"	v
checkOverAllParts	parser/english/grammar.inc	/^        $checkOverAllParts = false;$/;"	v
check_match	parser/matcher.inc	/^  protected function check_match ( $match_string ) {$/;"	f
checkpoint	parser/utilities.inc	/^interface checkpoint {$/;"	i
chevron	svg/linetypes.inc	/^    function chevron($flag=true)$/;"	f
chevron_width	svg/ordinaries/chevron-helper.inc	/^function chevron_width(ShieldLayout $layout, $number)$/;"	f
chevron_width	svg/ordinaries/chevron.inc	/^$chevron_width = 200;$/;"	v
chevron_width	svg/ordinaries/chevronel.inc	/^$chevron_width = chevron_width($layout, 1);$/;"	v
chg	svg/ordinaries/orle.inc	/^    $chg = createChargeNode('emblem\/ermine-spot',12);$/;"	v
chgNum	parser/english/grammar.inc	/^                $chgNum = 1;$/;"	v
chgNum	parser/english/grammar.inc	/^        $chgNum = self::find(languageDB::QUANTITY);$/;"	v
chgX	svg/tinctures.inc	/^        $chgX = $chg_size->width;$/;"	v
chgY	svg/tinctures.inc	/^        $chgY = $chg_size->height;$/;"	v
chg_data	svg/getcharge.inc	/^        $chg_data = array();$/;"	v
chg_data	svg/getcharge.inc	/^      $chg_data = $chg_data_cache[$chg_ref];$/;"	v
chg_data	svg/getcharge.inc	/^      $chg_data = includeCharge( $node, $file, $chg_data, $folder, $chargeKey );$/;"	v
chg_data	svg/getcharge.inc	/^      $chg_data = read_chg_file($node);$/;"	v
chg_data	svg/getcharge.inc	/^    $chg_data = array_merge(getMetadata($group, $chargeKey), $chg_data);$/;"	v
chg_data	svg/getcharge.inc	/^  $chg_data = array();$/;"	v
chg_data_cache	svg/getcharge.inc	/^ $chg_data_cache = array();$/;"	v
chg_ref	svg/getcharge.inc	/^     $chg_ref = unique('chg');$/;"	v
chg_ref	svg/getcharge.inc	/^    $chg_ref = getModifierValueByKeyterm($node, 'chg_data');$/;"	v
chief	parser/english/grammar.inc	/^                $chief = $this->adjust_chief($simple, $ordChgs);$/;"	v
chief	parser/english/grammar.inc	/^                $chief = $this->schema->makeNode("chief");$/;"	v
chief	parser/english/grammar.inc	/^        $chief = null;$/;"	v
chief	svg/shield.inc	/^                    $chief = $kid;$/;"	v
chief	svg/shield.inc	/^    $chief = null;$/;"	v
chief	svg/size.inc	/^        $this->chief = $chief;$/;"	v
chief	svg/size.inc	/^        $this->chief = new ShieldRect($/;"	v
chief_on	parser/english/grammar.inc	/^    private function chief_on($chief_ordinary)$/;"	f
child	analyser/references.inc	/^            $child = $subShield->firstChild;$/;"	v
child	parser/english/grammar.inc	/^                    $child = $ordChgs->childNodes[$i];$/;"	v
child_layout	svg/getcharge.inc	/^                $child_layout = new ShieldLayout(new ShieldSize($width, $height), $shape);$/;"	v
child_layout_1	svg/shield.inc	/^  $child_layout_1 = new ShieldLayout($size, $layout->shape, $cp, null, true, "dexter");$/;"	v
child_layout_2	svg/shield.inc	/^  $child_layout_2 = new ShieldLayout($size, $layout->shape, $cp, null, true, "sinister");$/;"	v
children	analyser/references.inc	/^        $children = $node->childNodes;$/;"	v
children	svg/division.inc	/^  $children = $node->childNodes;$/;"	v
children	svg/ordinary.inc	/^  $children = array();$/;"	v
children	svg/shield.inc	/^    $children = $child->childNodes;$/;"	v
children	svg/treatment.inc	/^  $children = $node->childNodes;$/;"	v
choices	randomblazon.php	/^    $choices = [];$/;"	v
chosen	randomblazon.php	/^        $chosen = $choices[rand(0, $maxIndex)];$/;"	v
chunks	svg/getwords.inc	/^            $chunks = array_chunk($tmp, $length);$/;"	v
chunks	svg/pathtools.inc	/^  $chunks = preg_split('\/([a-z])\/i', $path, null, PREG_SPLIT_DELIM_CAPTURE );$/;"	v
class	svg/svgtools.inc	/^      $class = "feature $id";$/;"	v
class	svg/svgtools.inc	/^    $class = '';$/;"	v
clean	svg/bezier.inc	/^    function clean()$/;"	f
cleaned	svg/bezier.inc	/^        $cleaned = [];$/;"	v
cleanup	randomblazon.php	/^function cleanup($string) { \/\/ remove expansions to get core value$/;"	f
clearErrors	parser/grammar.inc	/^  protected function clearErrors( $type = null ) {$/;"	f
clear_tags	svg/bezier.inc	/^    function clear_tags()$/;"	f
clip	svg/getcharge.inc	/^            $clip = add_def( 'clipPath', '<path d="' . $clipPath . '" \/>' );$/;"	v
clip	svg/getcharge.inc	/^        $clip = add_def ( 'clipPath', '<rect x="' . $half . '" y="0" width="' . $half . '" height="' . $height . '" \/>' );$/;"	v
clip	svg/getcharge.inc	/^        $clip = add_def ( 'clipPath', '<rect x="0" y="' . $half . '" width="' . $width . '" height="' . $half . '" \/>' );$/;"	v
clip	svg/getcharge.inc	/^        $clip = add_def ( 'clipPath', '<rect x="0" y="0" width="' . $half . '" height="' . $height . '" \/>' );$/;"	v
clip	svg/getcharge.inc	/^        $clip = add_def ( 'clipPath', '<rect x="0" y="0" width="' . $width . '" height="' . $half . '" \/>' );$/;"	v
clip	svg/getcharge.inc	/^      $clip = add_def ( 'clipPath', '<rect x="0" y="0" width="' . $half . '" height="' . $height . '" \/>' );$/;"	v
clip	svg/getcharge.inc	/^      $clip = add_def ( 'clipPath', '<rect x="0" y="0" width="' . $width . '" height="' . $half . '" \/>' );$/;"	v
clip1	svg/shield.inc	/^  $clip1 = add_def( 'clipPath', "<rect x='0' y='0' width='{$size->width}'  height='{$size->height}'\/>" );$/;"	v
clip2	svg/shield.inc	/^  $clip2 = add_def( 'clipPath', "<rect x='{$size->width}' y='0' width='{$size->width}'  height='{$size->height}'\/>" );$/;"	v
clipI	svg/shield.inc	/^  $clipI = add_def( 'clipPath', "<rect x='0' y='0' width='{$size->width}'  height='{$size->height}'\/>" );$/;"	v
clipPath	svg/getcharge.inc	/^            $clipPath = getShape($child_layout);$/;"	v
clipShield	svg/draw.inc	/^        $clipShield = add_def('mask', '<path fill="#FFFFFF" d="' . $outline . '" \/>' );$/;"	v
clip_attr	svg/shield.inc	/^        $clip_attr = " clip-path='url(#$clip_id)'";$/;"	v
clip_attr	svg/shield.inc	/^    $clip_attr = "";$/;"	v
clipdef	svg/quartering.inc	/^                $clipdef = add_def( 'clipPath', "<path d=\\"M0,0 h$width v$height h-$width v-$height Z\\" \/>");$/;"	v
clipdef	svg/quartering.inc	/^                $clipdef = add_def( 'clipPath', "<path d=\\"{$clips[$index]}\\" \/>");$/;"	v
clips	svg/quartering.inc	/^    $clips = [$/;"	v
clone	analyser/references.inc	/^        $clone = $node->cloneNode(true);$/;"	v
cloneAndFix	shieldcommon.js	/^function cloneAndFix(node,doc){$/;"	f
cloneToDoc	shieldcommon.js	/^function cloneToDoc(node,doc){$/;"	f
cloned	svg/bezier.inc	/^        $cloned = [];$/;"	v
close	svg/bezier.inc	/^    function close()$/;"	f
close	svg/linetypes.inc	/^    function close($flag)$/;"	f
close_path	svg/linetypes.inc	/^      $close_path = ( $dist != 0 );$/;"	v
close_path	svg/linetypes.inc	/^  $close_path = true;$/;"	v
closed	svg/bezier.inc	/^        $this->closed = $closed;$/;"	v
closed	svg/bezier.inc	/^        $this->closed = true;$/;"	v
closed	svg/bezier.inc	/^    function closed()$/;"	f
closed	svg/bezier.inc	/^    private $closed = false;$/;"	v
closed	svg/bezier.inc	/^    public $closed = false;$/;"	v
col	analyser/utilities.inc	/^	$col = $tinc_node->firstChild;$/;"	v
col	analyser/utilities.inc	/^  $col = $dom->createElement('colour');$/;"	v
colNode	parser/english/grammar.inc	/^                        $colNode = $this->schema->makeNode(blazonML::E_COLOUR,$/;"	v
colNode	parser/english/grammar.inc	/^            $colNode = $this->schema->makeNode(blazonML::E_COLOUR,$/;"	v
col_type	svg/getcharge.inc	/^        $col_type = $charge_col->firstChild;$/;"	v
colour	analyser/references.inc	/^      $colour = createColourNode('cendree');$/;"	v
colour	parser/english/grammar.inc	/^                            $colour = $colourCodes[$colour];$/;"	v
colour	parser/english/grammar.inc	/^                        $colour = '';$/;"	v
colour	parser/english/grammar.inc	/^                $colour = $colourCodes[$colour];$/;"	v
colour	parser/english/grammar.inc	/^                $colour = null;$/;"	v
colour	parser/english/grammar.inc	/^        $colour = '';$/;"	v
colour	parser/english/grammar.inc	/^    protected function colour()$/;"	f
colour	svg/achievement.inc	/^                $colour = rgb($child->getAttribute(blazonML::A_KEYTERM));$/;"	v
colour	svg/achievement.inc	/^    $colour = rgb('sable');$/;"	v
colourCodes	parser/english/grammar.inc	/^        $colourCodes = [$/;"	v
colourOrFur	parser/english/grammar.inc	/^          $colourOrFur = null; \/\/ used$/;"	v
colourOrFur	parser/english/grammar.inc	/^    $colourOrFur = null;$/;"	v
colours	svg/achievement.inc	/^            $colours = array();$/;"	v
colours	svg/treatment.inc	/^  $colours = [];$/;"	v
column	svg/transform.inc	/^    function column($i)$/;"	f
comb	svg/size.inc	/^        $comb = $this->combined($other);$/;"	v
combine	svg/size.inc	/^    function combine(ShieldRect $other)$/;"	f
combine_from	svg/bezier.inc	/^    function combine_from(MutableShape $other)$/;"	f
combined	svg/size.inc	/^    function combined(ShieldRect $other)$/;"	f
comma	parser/grammar.inc	/^  protected function comma() {$/;"	f
command	svg/pathtools.inc	/^    $command = $chunks[$i];$/;"	v
command	tests/runtests.php	/^    $command = "diff -I \\"timestamp\\" -I \\"release-id\\" -I \\"licence\\" \\"$expected$basename.svg\\" \\"$responses$basename.svg\\"";$/;"	v
comment	parser/tokeniser.inc	/^            $comment = '*';$/;"	v
comment	parser/tokeniser.inc	/^            $comment = false;$/;"	v
comment	parser/tokeniser.inc	/^          $comment = $blazon[$i];$/;"	v
comment	parser/tokeniser.inc	/^    $comment = false;$/;"	v
comp	parser/english/grammar.inc	/^                $comp = $this->schema->makeMod(languageDB::COLOUR_MODS, null, $keyterm, self::tokens(), self::lineNo());$/;"	v
compType	parser/english/grammar.inc	/^            $compType = 'mound'; \/\/ default if none give or found$/;"	v
compType	parser/english/grammar.inc	/^        $compType = self::find(languageDB::COMP_TYPE);$/;"	v
compType	svg/achievement.inc	/^    $compType = $compartmentNode->getAttribute(blazonML::A_KEYTERM);$/;"	v
compartment	parser/english/grammar.inc	/^    protected function compartment() {$/;"	f
compartment	svg/draw.inc	/^                            $compartment = drawCompartment($subNode);$/;"	v
compartment	svg/draw.inc	/^    $compartment = '';$/;"	v
compartmentNode	parser/english/grammar.inc	/^        $compartmentNode = $this->schema->makeNode(blazonML::E_COMPARTMENT, array ($/;"	v
compile	svg/bezier.inc	/^    function compile()$/;"	f
compiled	svg/bezier.inc	/^        $compiled = [];$/;"	v
compiled	svg/bezier.inc	/^        $compiled = new CompiledPolyBezier($this->closed);$/;"	v
compiled	svg/ordinary.inc	/^        $compiled = $spec->compile();$/;"	v
component	svg/pathtools.inc	/^        $component = 'man';$/;"	v
component	svg/pathtools.inc	/^      $component = 'exp';$/;"	v
component	svg/pathtools.inc	/^  $component = 'man';$/;"	v
componentTinctures	randomblazon.php	/^$componentTinctures = [ $/;"	v
compony	svg/ordinaries/shield_shape_utils.inc	/^    function compony(ShieldLayout $layout, $inset, $width, MutableShape $builder = null)$/;"	f
compony	svg/ordinary.inc	/^    $compony = getModifierByType($node,'compony');$/;"	v
conjoined	svg/arrangements.inc	/^  $conjoined = existModifierWithKeyterm($node,'conjoined');$/;"	v
content	tests/runtests.php	/^    $content = file($testcases . $filename);$/;"	v
context	parser/grammar.inc	/^      $context = $getOffset;$/;"	v
context	parser/grammar.inc	/^    $context = '';$/;"	v
coord	svg/bezier.inc	/^    private function coord()$/;"	f
coords	svg/pathtools.inc	/^            $coords = matMul($a, $b, $c, $d, 0, 0, $numbers[$j], $numbers[$j+1]);$/;"	v
coords	svg/pathtools.inc	/^          $coords =  matMul($a, $b, $c, $d, $e, $f, $numbers[$j], $numbers[$j+1]);$/;"	v
coords	svg/pathtools.inc	/^          $coords = matMul($a, $b, $c, $d, $e, $f, $numbers[0], $numbers[1]);$/;"	v
coords	svg/pathtools.inc	/^          $coords = matMul($a, $b, $c, $d, 0, 0, $numbers[$j], $numbers[$j+1]);$/;"	v
coords	svg/pathtools.inc	/^        $coords =  matMul($a, $b, $c, $d, $e, $f, $numbers[0], 0);$/;"	v
coords	svg/pathtools.inc	/^        $coords =  matMul($a, $b, $c, $d, $e, $f, 0, $numbers[0]);$/;"	v
coords	svg/pathtools.inc	/^        $coords =  matMul($a, $b, $c, $d, 0, 0, $numbers[0], 0);$/;"	v
coords	svg/pathtools.inc	/^        $coords =  matMul($a, $b, $c, $d, 0, 0, 0, $numbers[0]);$/;"	v
copy	svg/bezier.inc	/^        $copy = clone $this;$/;"	v
correct_h	svg/arrangements.inc	/^                $correct_h = $total_h \/ 1000;$/;"	v
cos	svg/pathtools.inc	/^      $cos = cos(deg2rad($theta));$/;"	v
cot_linetype	svg/ordinaries/bar.inc	/^      $cot_linetype= getModifierByType($cot_node,'linetype', false);$/;"	v
cot_linetype	svg/ordinary.inc	/^			$cot_linetype= getModifierByType($cot_node,'linetype', false);$/;"	v
cot_tinc	svg/ordinaries/bar.inc	/^			$cot_tinc = getTinctureNode($cot_node);$/;"	v
cot_tinc	svg/ordinary.inc	/^			  $cot_tinc = $tinc1;$/;"	v
cot_tinc	svg/ordinary.inc	/^			$cot_tinc = getTinctureNode($cot_node);$/;"	v
cotiseSVG	svg/ordinaries/bar.inc	/^		  $cotiseSVG = apply_tincture ( $cot_tinc, $cotiseSVG, $layout );$/;"	v
cotiseSVG	svg/ordinaries/bar.inc	/^      $cotiseSVG = '';$/;"	v
cotiseSVG	svg/ordinary.inc	/^	$cotiseSVG = '';$/;"	v
cotiseSVG	svg/ordinary.inc	/^        $cotiseSVG = apply_tincture ( $cot_tinc, $cotiseSVG, $layout );$/;"	v
cotiseSVG	svg/ordinary.inc	/^    $cotiseSVG = '';$/;"	v
cotiseSize	svg/ordinary.inc	/^    $cotiseSize = 40;$/;"	v
cotticing	parser/english/grammar.inc	/^    protected function cotticing()$/;"	f
count	parser/english/grammar.inc	/^                            $count = count($positions);$/;"	v
count	parser/english/grammar.inc	/^                $count = 1;$/;"	v
count	parser/english/grammar.inc	/^        $count = 0;$/;"	v
count	randomblazon.php	/^        $count = 1;$/;"	v
count	randomblazon.php	/^        $count = 500;$/;"	v
count	randomblazon.php	/^    $count = intval($args['count']);$/;"	v
count	randomblazon.php	/^$count = 1;$/;"	v
count	svg/edges/edge_type.inc	/^            $count = 1;$/;"	v
count	svg/edges/edge_type.inc	/^        $count = $data["count"];$/;"	v
count	svg/edges/edge_type.inc	/^        $count = floor(count($shape->sub_segments()) \/ $scale);$/;"	v
count	svg/edges/edge_type.inc	/^        $count = round($source->length() \/ $feature_width);$/;"	v
count	svg/linetypes.inc	/^  $count = 0;$/;"	v
count_x	svg/ordinaries/shield_shape_utils.inc	/^        $count_x = 4;$/;"	v
count_y	svg/ordinaries/shield_shape_utils.inc	/^        $count_y = 4;$/;"	v
counter	parser/english/grammar.inc	/^      $counter = $this->schema->makeNode(blazonML::E_COUNTERCHANGED, null, self::tokens(), self::lineNo());$/;"	v
counter	parser/utilities.inc	/^  protected $counter = 0;$/;"	v
counterDiv	svg/tinctures.inc	/^                $counterDiv = $division->item(($division->length)-1);$/;"	v
counterTreatment	svg/tinctures.inc	/^                    $counterTreatment = $treatment->item(($treatment->length) - 1);$/;"	v
couped	svg/ordinaries/bar.inc	/^  $couped = 'none';$/;"	v
cp	svg/shield.inc	/^  $cp = $layout->center_point->translated(0, $layout->center_point->y);$/;"	v
cpEndX	svg/pathtools.inc	/^          $cpEndX = $numbers[$j+2];$/;"	v
cpEndY	svg/pathtools.inc	/^          $cpEndY = $numbers[$j+3];$/;"	v
cpStartX	svg/pathtools.inc	/^          $cpStartX = $numbers[$j+0];$/;"	v
cpStartY	svg/pathtools.inc	/^          $cpStartY = $numbers[$j+1];$/;"	v
create	randomblazon.php	/^function create()$/;"	f
createBody	svg/ordinary.inc	/^function createBody($spec, $lineType, $feature_size, $layout) {$/;"	f
createChargeNode	analyser/utilities.inc	/^function createChargeNode($keyterm, $number = 1) {$/;"	f
createColourNode	analyser/utilities.inc	/^function createColourNode($colour, $index='1') {$/;"	f
createCotise	svg/ordinary.inc	/^function createCotise($spec, $num, $lineType, $layout, $cotiseSize, $feature_size) {$/;"	f
createCottices	svg/ordinary.inc	/^function createCottices($spec, $numberCottices, $lineType, $layout)$/;"	f
createLexicon	randomblazon.php	/^function createLexicon($item) {$/;"	f
createModifierNode	analyser/utilities.inc	/^function createModifierNode($type, $keyterm, $value = null ) {$/;"	f
createTinctureNode	analyser/utilities.inc	/^function createTinctureNode($index = 1) {$/;"	f
createVoid	svg/ordinary.inc	/^function createVoid($spec, $lineType, $feature_size, $layout) {$/;"	f
created	randomblazon.php	/^            $created = true;$/;"	v
created	randomblazon.php	/^    $created = false;$/;"	v
crest	parser/english/grammar.inc	/^  protected function crest() {$/;"	f
crestCharges	svg/draw.inc	/^            $crestCharges = makeCharge($crest->firstChild, ShieldLayout::square());$/;"	v
crestNode	parser/english/grammar.inc	/^    $crestNode = $this->schema->makeNode(blazonML::E_CREST, array ($/;"	v
crests	svg/draw.inc	/^    $crests = [];$/;"	v
cross	svg/arrangements.inc	/^    $cross = [$/;"	v
cross_c	svg/shield.inc	/^        $cross_c = new ShieldPos($new_size->width \/ 2, $new_size->height \/ 2);$/;"	v
crown	svg/getcharge.inc	/^        $crown = false;$/;"	v
crownCol	svg/getcharge.inc	/^          $crownCol = $temp;$/;"	v
crownCol	svg/getcharge.inc	/^      $crownCol = $charge_col;$/;"	v
crownType	parser/english/grammar.inc	/^                    $crownType = $crown;$/;"	v
crownType	parser/english/grammar.inc	/^        $crownType = 'default'; \/\/ default crown$/;"	v
crownType	svg/getcharge.inc	/^      $crownType = $crown->getAttribute('value');$/;"	v
cubic_to	svg/bezier.inc	/^    function cubic_to()$/;"	f
cubic_to	svg/bezier.inc	/^    function cubic_to(ShieldPos $handle1, ShieldPos $handle2, ShieldPos $dest)$/;"	f
cubics	svg/bezier.inc	/^                    $cubics = [];$/;"	v
cubics	svg/bezier.inc	/^            $cubics = [];$/;"	v
curValue	analyser/utilities.inc	/^  $curValue = $node->getAttribute('renderinfo');$/;"	v
curX	svg/pathtools.inc	/^          $curX = $endX;$/;"	v
curX	svg/pathtools.inc	/^          $curX = $x;$/;"	v
curX	svg/pathtools.inc	/^        $curX = $x;$/;"	v
curX	svg/pathtools.inc	/^  $curX = $Xoff; $curY = $Yoff; $/;"	v
curY	svg/pathtools.inc	/^          $curY = $endY;$/;"	v
curY	svg/pathtools.inc	/^          $curY = $y;$/;"	v
curY	svg/pathtools.inc	/^        $curY = $y;$/;"	v
cur_word	parser/tokeniser.inc	/^    $this->cur_word = 0;$/;"	v
cur_word	parser/tokeniser.inc	/^  public $cur_word;$/;"	v
curlHandle	tests/runtests.php	/^    $curlHandle = curl_init();$/;"	v
curlHandle	tests/runtests.php	/^$curlHandle = null;$/;"	v
currentCharge	parser/english/grammar.inc	/^                        $currentCharge = $temp;$/;"	v
currentCharge	parser/english/grammar.inc	/^                    $currentCharge = $otherCharge;$/;"	v
currentCharge	parser/english/grammar.inc	/^            $currentCharge = $topCharge;$/;"	v
currentID	analyser/references.inc	/^                    $currentID = 0;$/;"	v
currentID	analyser/references.inc	/^        $currentID = 0;$/;"	v
currentNodeID	analyser/utilities.inc	/^    $currentNodeID = $node->getAttribute('ID');$/;"	v
currentRNPPenalty	svg/getcharge.inc	/^    $currentRNPPenalty = $requiredNotPresentPenalty;$/;"	v
currentRNPPenalty	svg/placement-data.inc	/^      $currentRNPPenalty = $requiredNotPresentPenalty;$/;"	v
curtok	svg/bezier.inc	/^    private function curtok()$/;"	f
custom_size	svg/size.inc	/^    private static $custom_size = [$/;"	v
cx	svg/arrangements.inc	/^    $cx = $boundingBox->pos->x;$/;"	v
cx	svg/arrangements.inc	/^    $cx = $box->pos->x;$/;"	v
cx	svg/charges/mullet/mullet.inc	/^    $cx = $size \/ 2;$/;"	v
cx	svg/divisions/quarterly.inc	/^$cx = $layout->center_point->x;$/;"	v
cx	svg/ordinaries/bend-helper.inc	/^    $cx = $layout->center_point->x;$/;"	v
cx	svg/ordinaries/flag/saltire.inc	/^$cx = $layout->size->width \/ 2;$/;"	v
cx	svg/ordinaries/plain-cross.inc	/^$cx = $layout->center_point->x;$/;"	v
cx	svg/ordinaries/saltire.inc	/^$cx = $layout->center_point->x;$/;"	v
cx	svg/ordinaries/shield_shape_utils.inc	/^        $cx = $layout->center_point->x;$/;"	v
cx	svg/placecharge.inc	/^      $cx = $items[0];$/;"	v
cx	svg/placecharge.inc	/^  $cx = 500; \/\/ default values$/;"	v
cy	svg/arrangements.inc	/^    $cy = $box->pos->y;$/;"	v
cy	svg/arrangements.inc	/^    $cy = lerp($boundingBox->pos->y, $boundingBox->bottom(), 0.8);$/;"	v
cy	svg/charges/mullet/mullet.inc	/^    $cy = $size \/ 2;$/;"	v
cy	svg/divisions/quarterly.inc	/^$cy = $layout->center_point->y;$/;"	v
cy	svg/ordinaries/bend-helper.inc	/^    $cy = $layout->center_point->y;$/;"	v
cy	svg/ordinaries/chevronel.inc	/^$cy = -$chevron_width \/ M_SQRT2;$/;"	v
cy	svg/ordinaries/flag/saltire.inc	/^$cy = $layout->size->height \/ 2;$/;"	v
cy	svg/ordinaries/plain-cross.inc	/^$cy = $layout->center_point->y;$/;"	v
cy	svg/ordinaries/saltire.inc	/^$cy = $layout->center_point->y;$/;"	v
cy	svg/ordinaries/shield_shape_utils.inc	/^        $cy = $layout->center_point->y;$/;"	v
cy	svg/placecharge.inc	/^      $cy = $items[1];$/;"	v
cy	svg/placecharge.inc	/^  $cy = 500;$/;"	v
d	svg/arrangements.inc	/^                $d = $off + $delta * $i;$/;"	v
d	svg/bezier.inc	/^            $d = $c->pos->distance($inter);$/;"	v
d	svg/bezier.inc	/^        $d = "";$/;"	v
d	svg/bezier.inc	/^        $d = "M {$p0->pos->x} {$p0->pos->y} \\nC";$/;"	v
d	svg/charges/mullet/mullet.inc	/^    $d = "M $cx " . ($cy - $r1) . " L ";$/;"	v
d	svg/divisions/flag/per-bend.inc	/^$d = intval(sqrt(1000000 + ($h * $h))); \/\/ diagonal length$/;"	v
d	svg/getwords.inc	/^            $d = $glyph['d'];$/;"	v
d	svg/ordinaries/flag/bend.inc	/^$d = intval(sqrt(1000000 + ($h * $h))); \/\/ diagonal length$/;"	v
d	svg/ordinaries/saltire.inc	/^    $d = $width + 50\/M_SQRT2;$/;"	v
d	svg/transform.inc	/^    function d() { return $this->get(1, 1); }$/;"	f
d1	svg/ordinaries/saltire.inc	/^    $d1 = ($width + 50)\/M_SQRT2;$/;"	v
darkBrown	svg/proper.inc	/^  static $darkBrown;$/;"	v
data	parser/grammar.inc	/^    $data = $this->stateStore->restore($state);$/;"	v
data	parser/utilities.inc	/^      $data = $this->storage[$state];$/;"	v
data	parser/utilities.inc	/^      $data = null;$/;"	v
data	svg/edges/edge_type.inc	/^        $data = [];$/;"	v
data	svg/effects.inc	/^  $data = $effectData[$effect];$/;"	v
data	svg/svgtools.inc	/^                $data = $strokeCol;$/;"	v
data	svg/svgtools.inc	/^              $data = floatval($data) * $multiplier;$/;"	v
data	svg/tinctures.inc	/^        $data = new TinctureData(createColourNode('gray','1'),$rev, $inv);$/;"	v
data	svg/tinctures.inc	/^    $data = new TinctureData($tinctureNode, $rev, $inv);$/;"	v
daughterNode	parser/english/grammar.inc	/^            $daughterNode = $this->schema->makeNode(blazonML::E_COMPLEX, array('keyterm' => $keyterm), self::tokens(), self::lineNo());$/;"	v
dbquery	shieldcommon.js	/^function dbquery() {$/;"	f
def	svg/svgtools.inc	/^    $def = '<' . $element . ' id="' . $myid . '" >' . "\\n";$/;"	v
default1	svg/achievement.inc	/^                $default1 = $default2 = $hat = rgb('gray');$/;"	v
default1	svg/achievement.inc	/^                $default1 = $default2 = $hat = rgb('purpure');$/;"	v
default1	svg/achievement.inc	/^                $default1 = $default2 = $hat = rgb('sable');$/;"	v
default1	svg/achievement.inc	/^                $default1 = $default2 = $hat = rgb('vert');$/;"	v
default1	svg/achievement.inc	/^                $default1 = $default2 = rgb('purpure');$/;"	v
default1	svg/achievement.inc	/^        $default1 = rgb('argent');$/;"	v
default1	svg/achievement.inc	/^    $default1 = rgb('argent');$/;"	v
default2	svg/achievement.inc	/^        $default2 = rgb('gray');$/;"	v
default2	svg/achievement.inc	/^    $default2 = rgb('gray');$/;"	v
defaultSize	parser/english/grammar.inc	/^        $defaultSize = 10;$/;"	v
defaultWidth	svg/charges/characters/letter.inc	/^$defaultWidth = $glyphs->defs->font['horiz-adv-x'];$/;"	v
defaultXSize	svg/getwords.inc	/^        $this->defaultXSize = 500;$/;"	v
defaults	randomblazon.php	/^$defaults = [$/;"	v
defaults	svg/achievement.inc	/^    $defaults = array ($/;"	v
defs	svg/achievement.inc	/^                    $defs = array_merge($defs, $tincture_data->defs);$/;"	v
defs	svg/achievement.inc	/^    $defs = [];$/;"	v
defs	svg/draw.inc	/^        $defs = '<defs>' . getEffect($effect, 'defs') . $extraDefs .  '<\/defs>';$/;"	v
defs	svg/draw.inc	/^        $defs = '<defs>' . getEffect($effect, 'defs') . $extraDefs . '<\/defs>';$/;"	v
defs	svg/getcharge.inc	/^                        $defs = array_merge($defs, $tincture_data->defs);$/;"	v
defs	svg/getcharge.inc	/^    $defs = [];$/;"	v
defs	svg/hatching.inc	/^    $defs = "";$/;"	v
defs	svg/svgtools.inc	/^      $defs = ''; \/\/ Clear defs, ready for some more$/;"	v
defs	svg/svgtools.inc	/^  static $defs;$/;"	v
defs	svg/tinctures.inc	/^        $this->defs = [];$/;"	v
defs	svg/tinctures.inc	/^    function defs()$/;"	f
defs_svg	svg/achievement.inc	/^        $defs_svg  = "<defs>" . implode("", $defs) . "<\/defs>";$/;"	v
defs_svg	svg/achievement.inc	/^    $defs_svg  = "";$/;"	v
delta	svg/arrangements.inc	/^            $delta = $min_ext \/ ($n\/2+1);$/;"	v
delta_angle	svg/edges/edge_type.inc	/^        $delta_angle = abs($angle_out-$angle_in);$/;"	v
delta_y	svg/ordinaries/chevron.inc	/^    $delta_y = $layout->size->height * 0.28;$/;"	v
denominator	parser/utilities.inc	/^      $denominator = intval($arParts[1]);$/;"	v
denominator	parser/utilities.inc	/^    $denominator = 0;$/;"	v
denominator	svg/bezier.inc	/^        $denominator = $a->y * $b->x - $a->x * $b->y;$/;"	v
dest	svg/ordinaries/shield_shape_utils.inc	/^        $this->dest = $dest;$/;"	v
dest	svg/svgtools.inc	/^    $dest = new ShieldPos(floatval($element["cx"]), floatval($element["cy"]));$/;"	v
dexterX	svg/achievement.inc	/^    $dexterX = $boundX \/ 2;$/;"	v
dh	svg/getcharge.inc	/^  $dh = opendir($folder);$/;"	v
diag_off1	svg/divisions/bendy.inc	/^$diag_off1 = 0;$/;"	v
diag_off2	svg/divisions/bendy.inc	/^$diag_off2 = 0;$/;"	v
diag_off2	svg/divisions/bendy.inc	/^$diag_off2 = max(0, $diag_off2-$layout->division_offset->y);$/;"	v
diagonal	svg/ordinaries/flag/chevron.inc	/^$diagonal = (int)($calcHeight * 0.707 + 141);$/;"	v
dir	svg/linetypes.inc	/^      $dir = strtolower($dir);$/;"	v
dir	svg/linetypes.inc	/^    $dir = $edgeSpec[0];$/;"	v
dir	svg/linetypes.inc	/^    $dir = $match[0];$/;"	v
dir2angle	svg/linetypes.inc	/^function dir2angle ( $dir ) {$/;"	f
dirAngles	svg/linetypes.inc	/^  $dirAngles = array ( 'A' => 0, 'B' => 45, 'C' => 90, 'D' => 135, 'E' => 180, 'F' => 225, 'G' => 270, 'H' => 315 );$/;"	v
direction	svg/edges/edge_type.inc	/^                $direction = $old_direction;$/;"	v
direction	svg/edges/edge_type.inc	/^                $direction = $underside ? -1 : 1;$/;"	v
direction	svg/edges/edge_type.inc	/^            $direction = $this->add_flory_segment($seg, $target, $feature_height, $direction, $data[$i]);$/;"	v
direction	svg/edges/edge_type.inc	/^            $direction = -1;$/;"	v
direction	svg/edges/edge_type.inc	/^        $direction = 1;$/;"	v
direction	svg/treatment.inc	/^      $direction = ' x1="0%" y1="0%" x2="0%" y2="100%"';$/;"	v
direction	svg/treatment.inc	/^      $direction = ' x1="0%" y1="0%" x2="100%" y2="100%"';$/;"	v
direction	svg/treatment.inc	/^      $direction = ' x1="100%" y1="0%" x2="0%" y2="100%"';$/;"	v
direction	svg/treatment.inc	/^  $direction = '';$/;"	v
dirname	drawshield.php	/^        $dirname = __dir__;$/;"	v
discard	parser/grammar.inc	/^  public function discard($state) {$/;"	f
discard	parser/utilities.inc	/^  public function discard($state) {$/;"	f
discard	parser/utilities.inc	/^  public function discard($state);$/;"	f
dispH	svg/linetypes.inc	/^  $dispH = $disp * 0.707;$/;"	v
dispT	svg/linetypes.inc	/^  $dispT = $disp * 0.866;$/;"	v
dispU	svg/linetypes.inc	/^  $dispU = $disp * 0.5;$/;"	v
displayHeight	svg/draw.inc	/^        $displayHeight = (int)(($layout->size->height + 40 + $extraSpace) * $displayScale);$/;"	v
displayMessages	shieldcommon.js	/^function displayMessages(svg) {$/;"	f
displayScale	svg/draw.inc	/^        $displayScale = $options['size'] \/ 1000;$/;"	v
displayWidth	svg/draw.inc	/^        $displayWidth = $options['size'];$/;"	v
dist	svg/bezier.inc	/^                $dist = $p0->distance($p1);$/;"	v
dist	svg/linetypes.inc	/^    $dist = floatval(substr($edgeSpec,1));$/;"	v
dist	svg/linetypes.inc	/^    $dist = floatval(substr($match,1));$/;"	v
dist	svg/linetypes.inc	/^    $dist = substr($match,1);$/;"	v
distance	svg/size.inc	/^    function distance($other)$/;"	f
div1	svg/division.inc	/^        $div1 = apply_tincture ( $tinctures[2], $layout->rect_area()->svg_rect(), $layout, $layout->size );$/;"	v
div1	svg/division.inc	/^        $div1 = apply_tincture ( $tinctures[3], $layout->rect_area()->svg_rect(), $layout, $layout->size );$/;"	v
div1	svg/division.inc	/^    $div1 = '';$/;"	v
div1	svg/division.inc	/^    $div1 = apply_tincture ( $tinctures[1], $layout->rect_area()->margin(-100)->svg_rect(), $layout, $layout->size);$/;"	v
div2	svg/division.inc	/^        $div2 = apply_tincture( $tinctures[1], $div2, $layout );$/;"	v
div2	svg/division.inc	/^        $div2 = apply_tincture( $tinctures[3], $div2, $layout );$/;"	v
div2	svg/division.inc	/^        $div2 = apply_tincture( $tinctures[4], $div2, $layout );$/;"	v
div2	svg/division.inc	/^    $div2 = apply_tincture( $tinctures[1], $div2, $layout );$/;"	v
div2	svg/division.inc	/^    $div2 = apply_tincture( $tinctures[2], $div2, $layout );$/;"	v
div2	svg/division.inc	/^  $div2 = $division['div2'];$/;"	v
div2	svg/divisions/per-pile.inc	/^$div2 = new MutableShape();$/;"	v
div2_data	svg/divisions/tierced-in-pale.inc	/^$div2_data = 'X333Y0a667c{%100*}e667G{%100*}';$/;"	v
div3	svg/division.inc	/^        $div3 = apply_tincture( $tinctures[1], $division['div3'], $layout );$/;"	v
div3	svg/division.inc	/^      $div3 = apply_tincture( $tinctures[3], $division['div3'], $layout );$/;"	v
div3	svg/division.inc	/^  $div3 = '';$/;"	v
div3	svg/divisions/per-pile.inc	/^$div3 = new MutableShape();$/;"	v
div3_data	svg/divisions/tierced-in-pale.inc	/^$div3_data = 'X666Y0a337c{%100*}e337G{%100*}';$/;"	v
div4	svg/division.inc	/^        $div4 = apply_tincture( $tinctures[2], $division['div4'], $layout );$/;"	v
div4	svg/division.inc	/^      $div4 = apply_tincture( $tinctures[4], $division['div4'], $layout );$/;"	v
div4	svg/division.inc	/^  $div4 = '';$/;"	v
div_data	svg/divisions/barry-bendy.inc	/^  $div_data =  array ( 250, 500, 'l67.5,125h125l-67.5,-125z m0,125v125h125l-62.5,-125z m187.5,0l62.5,125v-125z m0,250h62.5v-125h-125z m-125,0l-62.5,-125v125z l62.5,125h125l-62.5,-125z' );$/;"	v
div_data	svg/divisions/barry-bendy.inc	/^  $div_data = array ( 250, 500, 'm62.5,125h125l62.5,-125h-125z h-62.5v125z m125,0h62.5v125h-125z m-125,250h-62.5v-125h125z h125l-62.5,125h-125z m125,0h62.5v-125z' );$/;"	v
div_data	svg/divisions/barry-indented-oio.inc	/^$div_data = array ( 250, 433, 'm0,216.5h250l-125,-216.5z v216.5h125z m250,0v216.5h-125z', );$/;"	v
div_data	svg/divisions/chape.inc	/^$div_data = "V1X0Y{$layout->division_offset->y}a1000c500F708D707g500";$/;"	v
div_data	svg/divisions/fusily-bendy.inc	/^  $div_data =  array ( 800, 800, 'm-200,200 l300,100 100,300 -300,-100z m200,-200l300,100 100,300 -300,-100z m200,-200l300,100 100,300 -300,-100z m400,400l300,100 100,300 -300,-100z m-200,200l300,100 100,300 -300,-100z m-200,200l300,100 100,300 -300,-100z', );$/;"	v
div_data	svg/divisions/fusily-bendy.inc	/^  $div_data = array ( 800, 800, 'm200,200l100,-300 300,-100 -100,300z m200,200l100,-300 300,-100 -100,300z m200,200l100,-300 300,-100 -100,300z m-400,400l100,-300 300,-100 -100,300z m-200,-200l100,-300 300,-100 -100,300z m-200,-200l100,-300 300,-100 -100,300z',);$/;"	v
div_data	svg/divisions/fusily.inc	/^$div_data = array ( 166.67, 600, 'v600l83.3,-300z m166.67,0v600l-83.3,-300z', );$/;"	v
div_data	svg/divisions/per-bend.inc	/^$div_data = array ($/;"	v
div_data	svg/divisions/per-chevron.inc	/^    $div_data = path_builder($layout->center_point->x, $y)->chevron();$/;"	v
div_data	svg/divisions/per-pale.inc	/^$div_data = 'X500Y0a500c{%100*}e500G{%100*}';$/;"	v
div_data	svg/tinctures.inc	/^                $div_data = makeDivision( $counterDiv, $layout, true );$/;"	v
div_node	svg/arrangements.inc	/^    $div_node = $xpath->query("parent::objects\/parent::simple\/field\/tincture\/division", $item);$/;"	v
div_path	svg/divisions/flag/per-bend.inc	/^    $div_path = rotatePath($path_spec,rad2deg($theta));$/;"	v
div_path	svg/divisions/flag/per-bend.inc	/^    $div_path = rotatePath($path_spec,rad2deg($theta)*-1);$/;"	v
div_path	svg/divisions/flag/per-bend.inc	/^    $div_path = translatePath($div_path,0,$h + 100);$/;"	v
division	parser/english/grammar.inc	/^  protected function division( $onlyCounterchanged = false ) {$/;"	f
division	svg/division.inc	/^  $division = array ();$/;"	v
division	svg/division.inc	/^  $division = includeDivision($node, $layout);$/;"	v
division	svg/tinctures.inc	/^            $division = $xpath->query('preceding::field\/tincture\/division', $data->node);$/;"	v
divisionNode	svg/arrangements.inc	/^      $divisionNode = $div_node->item(0);$/;"	v
divisionType	svg/division.inc	/^  $divisionType = $node->getAttribute('keyterm');$/;"	v
division_offset	svg/size.inc	/^        $this->division_offset = new ShieldPos(0, 0);$/;"	v
division_to_modifier	svg/ordinary.inc	/^function division_to_modifier(DOMElement &$node, $type) {$/;"	f
doCompare	tests/runtests.php	/^function doCompare($basename) {$/;"	f
doMirror	svg/linetypes.inc	/^    $doMirror = false;$/;"	v
doMirror	svg/linetypes.inc	/^    $doMirror = mirrorAction ( $angle, $mirrorConds[$whenRotated] );$/;"	v
doOffset	svg/linetypes.inc	/^      $doOffset = false;$/;"	v
doOffset	svg/linetypes.inc	/^  $doOffset = true;$/;"	v
do_apply_line_segment	svg/edges/edge_type.inc	/^    protected function do_apply_line_segment(CompiledBezierSegment $shape, ShieldPos $p1, ShieldPos $p2, MutableShape $target, $height = null, $scale = 1)$/;"	f
do_turn	svg/placecharge.inc	/^        $do_turn = $chargeY > $chargeX;$/;"	v
dom	analyser/references.inc	/^      $this->dom = $xml;$/;"	v
dom	analyser/references.inc	/^  private $dom;$/;"	v
dom	drawshield.php	/^  $dom = $p->parse($options['blazon'],'dom');$/;"	v
dom	drawshield.php	/^  $dom = $references->setReferences();$/;"	v
dom	drawshield.php	/^  $dom = new DOMDocument('1.0');$/;"	v
dom	drawshield.php	/^$dom = null;$/;"	v
dom	quickimage.php	/^  $dom = $p->parse($options['blazon'],'dom');$/;"	v
dom	quickimage.php	/^  $dom = $references->setReferences();$/;"	v
dom	quickimage.php	/^$dom = null;$/;"	v
dom	svg/edges/edge_type.inc	/^        $dom = new DOMDocument();$/;"	v
dom	svg/messages.inc	/^    $this->dom = $dom;$/;"	v
dom	svg/messages.inc	/^  private $dom;$/;"	v
dom	svg/shield.inc	/^    $dom = $node->ownerDocument;$/;"	v
dot_product	svg/transform.inc	/^    static function dot_product($v1, $v2)$/;"	f
down	svg/divisions/chevronny.inc	/^$down = $upper - $width;$/;"	v
down	svg/divisions/per-fess.inc	/^$down = $layout->size->height - $layout->center_point->y + $margin;$/;"	v
down	svg/divisions/per-pall.inc	/^    $down = $layout->center_point->y + $margin;$/;"	v
down	svg/divisions/per-pall.inc	/^$down = $layout->size->height - $layout->center_point->y + $margin;$/;"	v
down	svg/divisions/quarterly.inc	/^$down = $layout->size->height - $layout->center_point->y + $margin;$/;"	v
down	svg/linetypes.inc	/^    function down($length)$/;"	f
down_left	svg/linetypes.inc	/^    function down_left($length)$/;"	f
down_left_plain	svg/linetypes.inc	/^    function down_left_plain($length)$/;"	f
down_plain	svg/linetypes.inc	/^    function down_plain($length)$/;"	f
down_right	svg/linetypes.inc	/^    function down_right($length)$/;"	f
down_right_plain	svg/linetypes.inc	/^    function down_right_plain($length)$/;"	f
draw	svg/draw.inc	/^function draw() {$/;"	f
drawCompartment	svg/achievement.inc	/^function drawCompartment($compartmentNode) {$/;"	f
drawFringe	svg/achievement.inc	/^function drawFringe($fringeNode, $layout) {$/;"	f
drawHelmet	svg/achievement.inc	/^function drawHelmet($helmetNode) {$/;"	f
drawMantling	svg/achievement.inc	/^function drawMantling($mantlingNode) {$/;"	f
drawMotto	svg/achievement.inc	/^function drawMotto($mottoNode, $layout) {$/;"	f
drawSupporters	svg/achievement.inc	/^function drawSupporters($supportNode, $layout) {$/;"	f
drawTorse	svg/achievement.inc	/^function drawTorse($torseNode) {$/;"	f
draw_all	svg/linetypes.inc	/^    function draw_all($flag=true)$/;"	f
drawn	parser/english/grammar.inc	/^    protected function drawn()$/;"	f
drawshield	shieldcommon.js	/^function drawshield(url, messageFunc) {$/;"	f
dx	svg/arrangements.inc	/^    $dx = $size->width \/ 2 + 50;$/;"	v
dx	svg/bezier.inc	/^                $dx = -$dx;$/;"	v
dx	svg/bezier.inc	/^            $dx = ($inter->x - $c->pos->x) \/ $d;$/;"	v
dx	svg/bezier.inc	/^        $dx = cos($normal_angle);$/;"	v
dx	svg/ordinaries/flag/pall.inc	/^$dx = $width \/ 2 \/ sin($angle);$/;"	v
dx	svg/ordinaries/flag/saltire.inc	/^$dx = $width * cos($angle);$/;"	v
dx	svg/ordinaries/mount.inc	/^        $dx = ($target_width-$width\/2) \/ max(1, $num_of-1);$/;"	v
dx	svg/ordinaries/mount.inc	/^    $dx = $target_width \/ max(1, $num_of-1);$/;"	v
dx	svg/ordinaries/plain-cross.inc	/^    $dx = ($layout->center_point->x + 100) \/ 2;$/;"	v
dx	svg/svgtools.inc	/^    $dx = $dest->x - $hold_point->x * $hints->scale_x;$/;"	v
dy	svg/arrangements.inc	/^    $dy = $size->height \/ 2 + 50;$/;"	v
dy	svg/bezier.inc	/^                $dy = -$dy;$/;"	v
dy	svg/bezier.inc	/^            $dy = $this->finish->y - $this->start->y;$/;"	v
dy	svg/bezier.inc	/^            $dy = ($inter->y - $c->pos->y) \/ $d;$/;"	v
dy	svg/bezier.inc	/^        $dy = sin($normal_angle);$/;"	v
dy	svg/ordinaries/chevronel.inc	/^    $dy = 500 - $layout->center_point->y;$/;"	v
dy	svg/ordinaries/chevronel.inc	/^$dy = 300 \/ M_SQRT2;$/;"	v
dy	svg/ordinaries/flag/pall.inc	/^$dy = cos($angle) * $width \/ 2;$/;"	v
dy	svg/ordinaries/flag/saltire.inc	/^$dy = $width * sin($angle);$/;"	v
dy	svg/ordinaries/mount.inc	/^$dy = $height \/ 3;$/;"	v
dy	svg/ordinaries/plain-cross.inc	/^    $dy = ($layout->center_point->y + 100) \/ 2;$/;"	v
dy	svg/ordinaries/shield_shape_utils.inc	/^        $dy = ($layout->center_point->y - $this->margin_top - $margin) \/ 2;$/;"	v
dy	svg/size.inc	/^            $dy = $dx;$/;"	v
dy	svg/svgtools.inc	/^    $dy = $dest->y - $hold_point->y * $hints->scale_y;$/;"	v
dy0	svg/ordinaries/chevronel.inc	/^    $dy0 = $dy;$/;"	v
dy0	svg/ordinaries/chevronel.inc	/^$dy0 = $dy \/ 2;$/;"	v
ecclesiastic	parser/english/grammar.inc	/^    protected function ecclesiastic() {$/;"	f
edge	svg/edges/edge_type.inc	/^                $edge = new EdgeTypeFlory($path->sub_paths()[0], $path_bottom->sub_paths()[0], $path_bottom_small->sub_paths()[0]);$/;"	v
edge	svg/edges/edge_type.inc	/^                $edge = new EdgeTypeFull($path->sub_paths()[0]);$/;"	v
edge	svg/edges/edge_type.inc	/^                $edge = new EdgeTypeRepeating($path->sub_paths()[0], $symmetrical, $reverse_behaviour, $scale_x, $scale_y);$/;"	v
edge	svg/ordinaries/double-tressure.inc	/^    $edge = EdgeType::load("flory-counter-flory");$/;"	v
edge	svg/ordinary.inc	/^            $edge = EdgeType::load($lineType);$/;"	v
edgeMeets	svg/linetypes.inc	/^  $edgeMeets = array ($/;"	v
edges	svg/linetypes.inc	/^  $edges = array();$/;"	v
effect	svg/draw.inc	/^    $effect = $options['effect'];$/;"	v
effect	svg/effects.inc	/^      $effect = 'none';$/;"	v
effect	svg/effects.inc	/^      $effect = 'plaster';$/;"	v
effect	svg/effects.inc	/^      $effect = 'ripples';$/;"	v
effect	svg/effects.inc	/^      $effect = 'shiny';$/;"	v
effect	svg/effects.inc	/^      $effect = 'stonework';$/;"	v
effect	svg/effects.inc	/^      $effect = 'vellum';$/;"	v
effect	svg/effects.inc	/^    $effect = 'none';$/;"	v
effectData	svg/effects.inc	/^  static $effectData = array ($/;"	v
element	svg/edges/edge_type.inc	/^        $element = $xpath->evaluate("\/\/*[local-name()='path'][$n]")[0];$/;"	v
elementName	parser/english/grammar.inc	/^                        $elementName = blazonML::E_ASPECT;$/;"	v
elementName	parser/english/grammar.inc	/^                        $elementName = blazonML::E_EFFECT;$/;"	v
elementName	parser/english/grammar.inc	/^                        $elementName = blazonML::E_PALETTE;$/;"	v
elementName	parser/english/grammar.inc	/^                        $elementName = blazonML::E_SHAPE;$/;"	v
elementName	parser/english/grammar.inc	/^                $elementName = null;$/;"	v
element_words	svg/svgtools.inc	/^    $element_words = explode(' ', $element);$/;"	v
empty	svg/bezier.inc	/^    function empty()$/;"	f
end	parser/tokeniser.inc	/^    $end = strlen($blazon);$/;"	v
end	svg/linetypes.inc	/^      $end = '-';$/;"	v
end	svg/linetypes.inc	/^    $end = $defaultEnd;$/;"	v
endDir	svg/linetypes.inc	/^  $endDir = strtoupper($endDir);$/;"	v
endX	svg/pathtools.inc	/^          $endX = $numbers[$j+4];$/;"	v
endY	svg/pathtools.inc	/^          $endY = $numbers[$j+5];$/;"	v
englishGrammar	parser/english/grammar.inc	/^class englishGrammar extends grammar$/;"	c
enlargement	svg/getcharge.inc	/^    $enlargement = 1.4;$/;"	v
entire	svg/arrangements.inc	/^    $entire = existModifierWithKeyterm($item,'entire');$/;"	v
entryParts	svg/placement-data.inc	/^      $entryParts = preg_split('\/(\\.|-)\/', $entry);$/;"	v
eq	tests/runtests.php	/^        $eq = strpos($arg,'=');$/;"	v
err_type	drawshield.php	/^                $err_type = "error";$/;"	v
err_type	drawshield.php	/^                $err_type = "notice";$/;"	v
err_type	drawshield.php	/^                $err_type = "warning";$/;"	v
errfile	drawshield.php	/^            $errfile = substr($errfile, strlen($dirname));$/;"	v
errorColours	svg/tinctures.inc	/^    static $errorColours = array ('#eeeeee','#dddddd','#cccccc', '#bbbbbb', '#aaaaaa',$/;"	v
errors	parser/matcher.inc	/^  protected $errors = array();$/;"	v
errors	randomblazon.php	/^$errors = [];$/;"	v
existModifierWithKeyterm	analyser/utilities.inc	/^function existModifierWithKeyterm(?DOMElement $node, $keyterm, $markUsed = true) {$/;"	f
existingAttributes	svg/svgtools.inc	/^  $existingAttributes = array();$/;"	v
existingIDs	analyser/references.inc	/^        $existingIDs = array();$/;"	v
expStr	svg/pathtools.inc	/^        $expStr = '';$/;"	v
expStr	svg/pathtools.inc	/^  $expStr = '';$/;"	v
expand	randomblazon.php	/^function expand($tokenString) {$/;"	f
expected	tests/tests.inc	/^$expected = "expected\/";$/;"	v
ext	svg/ordinaries/orle.inc	/^    $ext = min($layout->size->width, $layout->size->height) - 2 * $margin;$/;"	v
extent	svg/divisions/per-chevron.inc	/^$extent = max($layout->size->width, $layout->size->height);$/;"	v
extent	svg/ordinaries/chevron-helper.inc	/^    $extent = max($layout->size->width, $layout->size->height);$/;"	v
extra	svg/getcharge.inc	/^    $extra = '';$/;"	v
extra	svg/placement-data.inc	/^      $extra = '';$/;"	v
extraDefs	svg/draw.inc	/^        $extraDefs = mkHatches();$/;"	v
extraDefs	svg/draw.inc	/^    $extraDefs = '';$/;"	v
extraSpace	svg/draw.inc	/^            $extraSpace = 150;$/;"	v
extraSpace	svg/draw.inc	/^    $extraSpace = 0;$/;"	v
extras	svg/achievement.inc	/^    $extras = [];$/;"	v
extras	svg/achievement.inc	/^    $extras = array(); \/\/ not used at present (but required for getSVGFragment)$/;"	v
extras	svg/getcharge.inc	/^    $extras = [];$/;"	v
facing_in	svg/arrangements.inc	/^  $facing_in = existModifierWithKeyterm($node,'facing-in') || existModifierWithKeyterm($node,'combattant');$/;"	v
facing_out	svg/arrangements.inc	/^  $facing_out = existModifierWithKeyterm($node,'facing-out');$/;"	v
factor	svg/getwords.inc	/^                    $factor = tan(deg2rad(abs($this->fontInfo['slope'])));$/;"	v
factor	svg/tinctures.inc	/^  $factor = 0.33;$/;"	v
factor_y	svg/size.inc	/^            $factor_y = $factor_x;$/;"	v
feat_cols	svg/getcharge.inc	/^    $feat_cols = array();$/;"	v
feature	parser/english/grammar.inc	/^                $feature = $this->schema->makeMod(blazonML::V_FEATURE, null, $keyterm, self::tokens(), self::lineNo());$/;"	v
featureName	svg/getcharge.inc	/^            $featureName = $child->getAttribute('keyterm');$/;"	v
featureTinc	svg/getcharge.inc	/^            $featureTinc = $child->firstChild;$/;"	v
featureTinc	svg/getcharge.inc	/^            $featureTinc = resolveReference($featureTinc);$/;"	v
feature_height	svg/edges/edge_type.inc	/^                $feature_height = -$feature_height;$/;"	v
feature_height	svg/edges/edge_type.inc	/^            $feature_height = $feature_width;$/;"	v
feature_height	svg/edges/edge_type.inc	/^            $feature_height = -$feature_height;$/;"	v
feature_size	svg/divisions/flag/per-bend.inc	/^$feature_size = $h \/ 20;$/;"	v
feature_size	svg/ordinaries/flag/bend.inc	/^$feature_size = $h \/ 20;$/;"	v
feature_size	svg/ordinary.inc	/^	  $feature_size = 40;$/;"	v
feature_size	svg/ordinary.inc	/^    $feature_size = $ord_data['feature_size'];$/;"	v
feature_size	svg/ordinary.inc	/^    $feature_size = (int)($layout->size->height * 0.05);$/;"	v
feature_size	svg/ordinary.inc	/^    $feature_size = 18;$/;"	v
feature_width	svg/edges/edge_type.inc	/^            $feature_width = $direction == 1 ? $feature_height : $feature_height * $this->size_mult;$/;"	v
features	svg/achievement.inc	/^    $features = array ($/;"	v
features	svg/achievement.inc	/^    $features = array ('visor' => rgb('or'));$/;"	v
features	svg/getcharge.inc	/^  static $features = array ($/;"	v
features	svg/proper.inc	/^  static $features = array();$/;"	v
featuresThatAreAlsoMods	svg/getcharge.inc	/^function featuresThatAreAlsoMods($node) {$/;"	f
field	analyser/references.inc	/^      $field = $this->dom->createElement(blazonML::E_FIELD);$/;"	v
field	parser/english/grammar.inc	/^            $field = $this->schema->makeNode(blazonML::E_FIELD);$/;"	v
field	svg/shield.inc	/^                $field = $kid;$/;"	v
field	svg/shield.inc	/^    $field = null;$/;"	v
fieldTypes	randomblazon.php	/^            $fieldTypes = [$/;"	v
fieldTypes	randomblazon.php	/^        $fieldTypes = [];$/;"	v
fieldTypes	randomblazon.php	/^    $fieldTypes = ["{field-tincture}"]; \/\/ The default$/;"	v
file	svg/charges/celestial/star.inc	/^$file = getBestMatchFilename(__dir__, 'star', $suffix);$/;"	v
file	svg/charges/mullet/mullet.inc	/^    $file = getBestMatchFilename(__dir__, 'mullet', rtrim($suffix,'-'));$/;"	v
file	svg/division.inc	/^    $file = "divisions\/$divisionType.inc";$/;"	v
file	svg/division.inc	/^    $file ="divisions\/flag\/$divisionType.inc";$/;"	v
file	svg/division.inc	/^  $file = null;$/;"	v
file	svg/getcharge.inc	/^      $file = getBestMatchFilename($folder, $chargeKey, $modList);$/;"	v
file	svg/getcharge.inc	/^    $file = $folder . $chargeKey . '.inc';$/;"	v
file	svg/ordinary.inc	/^    $file = "ordinaries\/$ordinaryType.inc";$/;"	v
file	svg/ordinary.inc	/^    $file ="ordinaries\/flag\/$ordinaryType.inc";$/;"	v
file	svg/ordinary.inc	/^  $file = null;$/;"	v
fileName	drawshield.php	/^    $fileName = $_FILES['blazonfile']['name'];$/;"	v
fileName	reflectfile.php	/^	$fileName = $_FILES['blazonFile']['name'];$/;"	v
fileSize	drawshield.php	/^    $fileSize = $_FILES['blazonfile']['size'];$/;"	v
fileSize	reflectfile.php	/^	$fileSize = $_FILES['blazonFile']['size'];$/;"	v
fileTmpName	drawshield.php	/^    $fileTmpName  = $_FILES['blazonfile']['tmp_name'];$/;"	v
fileTmpName	reflectfile.php	/^	$fileTmpName  = $_FILES['blazonFile']['tmp_name'];$/;"	v
fileType	reflectfile.php	/^	$fileType = $_FILES['blazonFile']['type'];$/;"	v
filename	svg/edges/edge_type.inc	/^        $filename = __dir__ . "\/$name.svg";$/;"	v
filename	svg/ordinary.inc	/^    $filename = $layout->shape;$/;"	v
filename	svg/treatment.inc	/^            $filename = "$folder$name.svg";$/;"	v
filename	svg/treatments/bezanty.inc	/^$filename = "$folder\/roundelly.svg";$/;"	v
filename	svg/treatments/checky.inc	/^                $filename = 'checky45.svg';$/;"	v
filename	svg/treatments/guzy.inc	/^$filename = "$folder\/roundelly.svg";$/;"	v
filename	svg/treatments/hurty.inc	/^$filename = "$folder\/roundelly.svg";$/;"	v
filename	svg/treatments/platy.inc	/^$filename = "$folder\/roundelly.svg";$/;"	v
filename	svg/treatments/pommy.inc	/^$filename = "$folder\/roundelly.svg";$/;"	v
filename	svg/treatments/torty.inc	/^$filename = "$folder\/roundelly.svg";$/;"	v
filenameParts	svg/getcharge.inc	/^    $filenameParts = preg_split('\/(\\.|-)\/', $entry);$/;"	v
fill	svg/achievement.inc	/^                            $fill = $tincture->firstChild->getAttribute('keyterm');$/;"	v
fill	svg/achievement.inc	/^                    $fill = $child->firstChild->getAttribute(blazonML::A_KEYTERM);$/;"	v
fill	svg/achievement.inc	/^                $fill = 'gray';$/;"	v
fill	svg/achievement.inc	/^                $fill = 'vert';$/;"	v
fill	svg/achievement.inc	/^            $fill = $defaults[$style];$/;"	v
fill	svg/achievement.inc	/^            $fill = 'gray';$/;"	v
fill	svg/achievement.inc	/^    $fill = null;$/;"	v
fill	svg/ordinary.inc	/^                $fill = add_def( 'pattern patternContentUnits="userSpaceOnUse" patternUnits="userSpaceOnUse" x="0" ' .$/;"	v
fill	svg/svgtools.inc	/^                $fill = ' fill="' . $data . '" ';$/;"	v
fill	svg/svgtools.inc	/^                $fill = ' fill="' . $strokeCol . '" ';$/;"	v
fill	svg/svgtools.inc	/^          $fill = ' fill="' . $data . '" '; \/\/ leave alone$/;"	v
fill	svg/svgtools.inc	/^      $fill = ''; \/\/ remove fill attribute if already set in style$/;"	v
fill	svg/svgtools.inc	/^  $fill = '';$/;"	v
fill	svg/tinctures.inc	/^                    $fill = '<g fill="url(#' . $treatPatt_id . ')"  ><path d="M0,0 h1000 v1200 h-1000 z" \/><\/g>';$/;"	v
fill	svg/tinctures.inc	/^                    $this->fill = $this->type_node->getAttribute('spec');$/;"	v
fill	svg/tinctures.inc	/^                    $this->fill = rgb($this->type_node->getAttribute('keyterm'));$/;"	v
fill	svg/tinctures.inc	/^                    $this->fill = static::id_url($this->add_def($/;"	v
fill	svg/tinctures.inc	/^                    $this->fill = static::id_url(makeGrady($this->type_node));$/;"	v
fill	svg/tinctures.inc	/^                $this->fill = static::id_url($patt_id);$/;"	v
fill	svg/tinctures.inc	/^                $this->fill = static::id_url($this->add_def($/;"	v
fill	svg/tinctures.inc	/^        $this->fill = null;$/;"	v
fillSet	svg/svgtools.inc	/^        $fillSet = true;$/;"	v
fillSet	svg/svgtools.inc	/^      $fillSet = true;$/;"	v
fillet	svg/ordinaries/plain-cross.inc	/^$fillet = $node && $node->getAttribute('keyterm') == "fillet-cross";$/;"	v
fillet	svg/ordinaries/saltire.inc	/^$fillet = $node && $node->getAttribute('keyterm') == "fillet-saltire";$/;"	v
filter_id	svg/getcharge.inc	/^    static $filter_id = 0;$/;"	v
filters	svg/getcharge.inc	/^    $filters = [];$/;"	v
fim_rgb	svg/ordinary.inc	/^		$fim_rgb = get_rgb( getTinctureNode($fimbriated) );$/;"	v
fimbStrokeCol	svg/getcharge.inc	/^      $fimbStrokeCol = get_rgb($fimbTincNode);$/;"	v
fimbTincNode	svg/getcharge.inc	/^      $fimbTincNode = getTinctureNode($fimNode);$/;"	v
find	parser/grammar.inc	/^  protected function find ( $key ) { return $this->phraseMatcher->searchMatch($key); }$/;"	f
finish	svg/bezier.inc	/^        $this->finish = $finish;$/;"	v
finish	svg/bezier.inc	/^    function finish() : BezierPoint$/;"	f
finish	svg/bezier.inc	/^    function finish()$/;"	f
finish	svg/bezier.inc	/^    private function finish() : BezierPoint$/;"	f
finish	svg/bezier.inc	/^    public $finish;$/;"	v
finish	svg/ordinaries/shield_shape_utils.inc	/^                $finish = atan2(-$layout->center_point->y, -$layout->center_point->x) + M_PI * 2;$/;"	v
first	demopage.php	/^            $first = false;$/;"	v
first	demopage.php	/^        $first = true;$/;"	v
first	svg/bezier.inc	/^            $first = $points[0];$/;"	v
firstChild	analyser/references.inc	/^            $firstChild = $node->firstChild; \/\/ the shield element$/;"	v
firstChild	svg/ordinary.inc	/^        $firstChild = resolveReference($child)->firstChild;$/;"	v
firstMove	svg/pathtools.inc	/^          $firstMove = false;$/;"	v
firstMove	svg/pathtools.inc	/^  $firstMove = true;$/;"	v
firstTime	parser/english/grammar.inc	/^                $firstTime = false;$/;"	v
firstTime	parser/english/grammar.inc	/^            $firstTime = true;$/;"	v
first_token	parser/matcher.inc	/^    $first_token = $this->tokenList->cur_word;$/;"	v
fitWordsToRect	svg/getwords.inc	/^    public function fitWordsToRect($text, $height, $width, $fill = "#3F3F3F") {$/;"	f
fix_url	svg/tinctures.inc	/^    static function fix_url($fill)$/;"	f
flags	svg/bezier.inc	/^                    $flags = $this->segment_tags[$i];$/;"	v
flags	svg/bezier.inc	/^            $flags = $this->segment_tags[0] ?? BezierSegmentFlags::NORMAL;$/;"	v
flags	svg/bezier.inc	/^        $this->flags = $flags;$/;"	v
flags	svg/bezier.inc	/^    function flags()$/;"	f
flags	svg/bezier.inc	/^    private $flags;$/;"	v
flags	svg/linetypes.inc	/^  $flags = '';$/;"	v
flags	svg/ordinaries/shield_shape_utils.inc	/^        $flags = BezierSegmentFlags::NORMAL;$/;"	v
flags	svg/ordinaries/shield_shape_utils.inc	/^        $flags = BezierSegmentFlags::SYMMETRICAL;$/;"	v
flory	svg/ordinaries/double-tressure.inc	/^    $flory = new MutableShape();$/;"	v
flory	svg/ordinaries/double-tressure.inc	/^$flory = existModifierWithKeyterm($node,'flory-counter-flory');$/;"	v
flory_size	svg/ordinaries/double-tressure.inc	/^$flory_size = 20;$/;"	v
flush	parser/utilities.inc	/^  public function flush() {$/;"	f
folder	svg/getcharge.inc	/^    $folder = __dir__ . "\/charges\/$group\/";$/;"	v
folder	svg/ordinary.inc	/^    $folder = __dir__ . "\/ordinaries\/$type\/";$/;"	v
folder	svg/treatment.inc	/^  $folder = __dir__ . '\/treatments\/';$/;"	v
font	svg/charges/characters/letter.inc	/^  $font = 'gothic';$/;"	v
font	svg/charges/characters/letter.inc	/^  $font = strtolower($font);$/;"	v
font	svg/charges/characters/letter.inc	/^$font = getModifierValueByKeyterm ( $node, 'font' );$/;"	v
font	svg/getwords.inc	/^        $font = simplexml_load_file("svg\/fonts\/$fontName.svg");$/;"	v
fontFamily	svg/charges/characters/word.inc	/^  $fontFamily = $font;$/;"	v
fontFamily	svg/charges/characters/word.inc	/^$fontFamily = null;$/;"	v
fontHeight	svg/charges/characters/letter.inc	/^$fontHeight = $glyphs->defs->font->{'font-face'}['ascent'];$/;"	v
fontInfo	svg/getwords.inc	/^                                $this->fontInfo = $child;$/;"	v
fontMap	svg/getwords.inc	/^    private function fontMap($fontName) {$/;"	f
fontName	svg/getwords.inc	/^                $fontName = 'lisbon-cursive';$/;"	v
fontName	svg/getwords.inc	/^                $fontName = 'noto-serif';$/;"	v
fontName	svg/getwords.inc	/^              $fontName = 'lucida-sans';$/;"	v
fontName	svg/getwords.inc	/^            $fontName = $this->fontMap($fontName);$/;"	v
fontSize	svg/achievement.inc	/^                $fontSize = 15; \/\/ but have a lower limit$/;"	v
fontSize	svg/achievement.inc	/^        $fontSize = 45;$/;"	v
fontSize	svg/charges/characters/word.inc	/^    $fontSize = 2400 \/ strlen($item); \/\/ rough font scaling for the arc below$/;"	v
fontSize	svg/charges/characters/word.inc	/^    $fontSize = 3000 \/ strlen($item); \/\/ rough font scaling for the arc below$/;"	v
fontSize	svg/charges/characters/word.inc	/^  $fontSize = 1000 \/ strlen($item); \/\/ rough font scaling for the arc below$/;"	v
fontStyle	svg/charges/characters/word.inc	/^$fontStyle = 'normal';$/;"	v
fontWeight	svg/charges/characters/word.inc	/^$fontWeight = 'normal';$/;"	v
forceCentre	svg/arrangements.inc	/^                $forceCentre = false;$/;"	v
forceCentre	svg/arrangements.inc	/^    $forceCentre = (!($entire) && !count($pos) && ($layout->shape != 'pauldron') && ($group == "quadrate" || $group == 'geometric') && $number == 1);$/;"	v
format_blazon_ml	shieldcommon.js	/^function format_blazon_ml(element, target_id)$/;"	f
format_impl	shieldcommon.js	/^    function format_impl(parent, element, indent)$/;"	f
found	analyser/utilities.inc	/^      $found = true;$/;"	v
found	analyser/utilities.inc	/^  $found = false;$/;"	v
found	parser/english/grammar.inc	/^                    $found = $foundQuarter = true;$/;"	v
found	parser/english/grammar.inc	/^                    $found = true;$/;"	v
found	parser/english/grammar.inc	/^                $found = false; \/\/ looping control$/;"	v
found	parser/english/grammar.inc	/^                $found = false;$/;"	v
found	parser/english/grammar.inc	/^                $found = true; \/\/ loop again, with a clean slate$/;"	v
found	parser/english/grammar.inc	/^                $found = true;$/;"	v
found	parser/english/grammar.inc	/^            $found = false;$/;"	v
found	parser/english/grammar.inc	/^          $found = false;$/;"	v
found	parser/english/grammar.inc	/^        $found = false;$/;"	v
found	parser/english/grammar.inc	/^        $found = true;$/;"	v
found	parser/english/grammar.inc	/^      $found = false;$/;"	v
found	parser/english/grammar.inc	/^      $found = true;$/;"	v
found	parser/english/grammar.inc	/^    $found = true;$/;"	v
found	svg/getcharge.inc	/^          $found = true;$/;"	v
found	svg/getcharge.inc	/^      $found = false;$/;"	v
found	svg/placement-data.inc	/^            $found = true;$/;"	v
found	svg/placement-data.inc	/^        $found = false;$/;"	v
foundColours	parser/grammar.inc	/^  protected $foundColours = [];$/;"	v
foundCounterchange	parser/english/grammar.inc	/^            $foundCounterchange = true;$/;"	v
foundCounterchange	parser/english/grammar.inc	/^      $foundCounterchange = false;$/;"	v
foundMuch	parser/english/grammar.inc	/^                    $foundMuch = $keyterm;$/;"	v
foundMuch	parser/english/grammar.inc	/^                    $foundMuch = false;$/;"	v
foundMuch	parser/english/grammar.inc	/^        $foundMuch = false;$/;"	v
foundPos	parser/english/grammar.inc	/^                        $foundPos = true;$/;"	v
foundPos	parser/english/grammar.inc	/^                $foundPos = false;$/;"	v
foundQuarter	parser/english/grammar.inc	/^            $foundQuarter = false;$/;"	v
foundShown	parser/english/grammar.inc	/^                    $foundShown = true;$/;"	v
foundShown	parser/english/grammar.inc	/^        $foundShown = false;$/;"	v
foundTinc	parser/english/grammar.inc	/^                    $foundTinc = true;$/;"	v
foundTinc	parser/english/grammar.inc	/^                $foundTinc = true;$/;"	v
foundTinc	parser/english/grammar.inc	/^            $foundTinc = true; \/\/ don't look for a colour, let the shield take it$/;"	v
foundTinc	parser/english/grammar.inc	/^        $foundTinc = false;$/;"	v
foundTinctures	parser/grammar.inc	/^  protected $foundTinctures = [];$/;"	v
foundType	parser/english/grammar.inc	/^        $foundType = null;$/;"	v
fragment	svg/svgtools.inc	/^        $fragment = "<g transform=\\"translate($x0, $y0)\\">$fragment<\/g>\\n";$/;"	v
fragment	svg/svgtools.inc	/^    $fragment = '';$/;"	v
fragment	svg/treatment.inc	/^  $fragment = '';$/;"	v
fringe	parser/english/grammar.inc	/^    protected function fringe() {$/;"	f
fringe	svg/draw.inc	/^                            $fringe = drawFringe($subNode, $layout);$/;"	v
fringe	svg/draw.inc	/^    $fringe = '';$/;"	v
fringeNode	parser/english/grammar.inc	/^        $fringeNode = $this->schema->makeNode(blazonML::E_FRINGE, array ($/;"	v
fromBottom	drawshield.php	/^    $fromBottom = $pageHeight - $margin - $margin - $imageHeight;$/;"	v
fromSide	drawshield.php	/^    $fromSide = $margin + (($pageWidth - $margin - $margin - $imageWidth) \/ 2);$/;"	v
from_corners	svg/size.inc	/^    static function from_corners($x1, $y1, $x2, $y2)$/;"	f
from_layout	svg/ordinaries/shield_shape_utils.inc	/^    static function from_layout($layout)$/;"	f
from_name	svg/ordinaries/shield_shape_utils.inc	/^    static function from_name($name)$/;"	f
from_options	svg/size.inc	/^    static function from_options($options)$/;"	f
from_svg_transform	svg/transform.inc	/^    static function from_svg_transform($transform): TransformMatrix$/;"	f
full_box_arrangements	svg/arrangements.inc	/^    static $full_box_arrangements = ["inannulo", "inbend", "inbendsin", "inpalethrough", 'infessthrough', 'incross'];$/;"	v
func	svg/placement-data.inc	/^        $func = substr($func,1);$/;"	v
fur	parser/english/grammar.inc	/^    protected function fur()$/;"	f
fur_data	svg/furs.inc	/^  $fur_data = array ($/;"	v
fur_data	svg/tinctures.inc	/^                $fur_data = makeFur( $fur_name );$/;"	v
fur_name	svg/tinctures.inc	/^                $fur_name = $this->type_node->getAttribute('keyterm');$/;"	v
furthestWord	parser/matcher.inc	/^        $this->furthestWord = $t_word;$/;"	v
furthestWord	parser/matcher.inc	/^  public $furthestWord = 0;$/;"	v
fx	svg/ordinaries/flag/pall.inc	/^$fx = -($dy - $fy) \/ tan($angle);$/;"	v
fy	svg/ordinaries/flag/pall.inc	/^$fy = $width\/2;$/;"	v
gap	svg/ordinaries/double-tressure.inc	/^$gap = $margin;$/;"	v
get	svg/transform.inc	/^    function get($row, $col)$/;"	f
getAdjustments	parser/english/grammar.inc	/^    protected function getAdjustments()$/;"	f
getBestMatchFilename	svg/getcharge.inc	/^function getBestMatchFilename($folder, $base, $mods, $warn = true) {$/;"	f
getBestMatchPlacement	svg/placement-data.inc	/^function getBestMatchPlacement($target, $item) {$/;"	f
getCharge	svg/getcharge.inc	/^function getCharge( DOMElement $node, $layout ) {$/;"	f
getChildOfType	analyser/utilities.inc	/^function getChildOfType(DOMElement $node, $nodeName) {$/;"	f
getCrowns	parser/english/grammar.inc	/^    protected function getCrowns($foundTinc)$/;"	f
getEffect	svg/effects.inc	/^function getEffect($effect, $item, $width=1000, $height=1200) {$/;"	f
getFieldTincture	analyser/utilities.inc	/^function getFieldTincture(DOMElement $node) {$/;"	f
getLine	svg/draw.inc	/^function getLine($node) {$/;"	f
getLineNo	parser/matcher.inc	/^  public function getLineNo() {$/;"	f
getLineNos	parser/matcher.inc	/^  public function getLineNos() {$/;"	f
getLineNos	parser/tokeniser.inc	/^  public function getLineNos() {$/;"	f
getMatchedTokens	parser/matcher.inc	/^  public function getMatchedTokens($reset = false) {$/;"	f
getMatcherErrors	parser/matcher.inc	/^  public function getMatcherErrors() {$/;"	f
getMessageArray	svg/messages.inc	/^  public function getMessageArray() {$/;"	f
getMeta	svg/metadata.inc	/^  public function getMeta ( $chargeGroup, $chargeName )$/;"	f
getMetadata	svg/getcharge.inc	/^function getMetadata ( $group, $charge ) {$/;"	f
getModifierByType	analyser/utilities.inc	/^function getModifierByType(DOMElement $node, $type, $markUsed = true) { \/\/ Also means don't get if already used$/;"	f
getModifierNodeByType	analyser/utilities.inc	/^function getModifierNodeByType(DOMElement $node, $type) { $/;"	f
getModifierNodeWithKeyterm	analyser/utilities.inc	/^function getModifierNodeWithKeyterm(DOMElement $node, $keyterm, $markUsed = true) {$/;"	f
getModifierValueByKeyterm	analyser/utilities.inc	/^function getModifierValueByKeyterm(DOMElement $node, $name, $markUsed = false) {$/;"	f
getModifiersByTypeAsArray	analyser/utilities.inc	/^function getModifiersByTypeAsArray(DOMElement $node, $type, $returnNodes = false) {$/;"	f
getNumberOfCharges	analyser/utilities.inc	/^function getNumberOfCharges(DOMElement $node) { \/\/ Find total number of charges, including if it is "between" some others$/;"	f
getNumbers	svg/pathtools.inc	/^function getNumbers ( $argString ) {$/;"	f
getOptions	shieldcommon.js	/^function getOptions() {$/;"	f
getPatterns	parser/lexicon.inc	/^   public function getPatterns($key) {$/;"	f
getPositions	parser/english/grammar.inc	/^    protected function getPositions()$/;"	f
getProper	svg/getcharge.inc	/^function getProper ( $group, $charge, $feature = null, $errorIfNone = true ) {$/;"	f
getProper	svg/proper.inc	/^  public function getProper ( $chargeGroup, $chargeName, $feature = null, $errorIfNotFound = true )$/;"	f
getRef	parser/utilities.inc	/^  public function getRef($prefix = '') {$/;"	f
getRenderInfo	analyser/utilities.inc	/^function getRenderInfo(DOMElement $node, $match ) {$/;"	f
getResponse	tests/runtests.php	/^function getResponse($args) {$/;"	f
getSVG	svg/getwords.inc	/^    public function getSVG($text) {$/;"	f
getShape	svg/shapes.inc	/^function getShape($layout) {$/;"	f
getShield	parser/english/grammar.inc	/^    public function getShield()$/;"	f
getSpecial	svg/ordinary.inc	/^function getSpecial($type,$node, $layout) {$/;"	f
getStroke	svg/tinctures.inc	/^function getStroke($tincture, $fixedStroke = false) {$/;"	f
getSvgFragment	svg/svgtools.inc	/^function getSvgFragment ($svgCode, $featureTinctures, $chargeGroup, $chargeName, $extras, $strokeCol = null, $strokeWidth = null)$/;"	f
getSvgTreatment	svg/treatment.inc	/^function getSvgTreatment ($filename) {$/;"	f
getTest	tests/runtests.php	/^function getTest($filename) {$/;"	f
getTinctureNode	analyser/utilities.inc	/^function getTinctureNode(DOMElement $node,$index=null) {$/;"	f
getTokenOffset	parser/matcher.inc	/^  public function getTokenOffset() {$/;"	f
getTokens	parser/matcher.inc	/^  public function getTokens() {$/;"	f
getTokens	parser/tokeniser.inc	/^  public function getTokens() {$/;"	f
getValue	parser/matcher.inc	/^  public function getValue() {$/;"	f
get_args	svg/bezier.inc	/^    private function get_args($args, $n)$/;"	f
get_chg_data	svg/getcharge.inc	/^ function get_chg_data() {$/;"	f
get_div_height	svg/division.inc	/^function get_div_height ( DOMElement $node ) {$/;"	f
get_meta_flag	svg/edges/edge_type.inc	/^    private static function get_meta_flag($element, $attribute, $default = 0)$/;"	f
get_placement	svg/arrangements.inc	/^function get_placement(DOMElement $item, $layout) {$/;"	f
get_rgb	analyser/utilities.inc	/^function get_rgb($tinc_node) {$/;"	f
given	parser/tokeniser.inc	/^    $given = false;$/;"	v
glyph	svg/getwords.inc	/^                    $glyph = $notdef;$/;"	v
glyph	svg/getwords.inc	/^                    $glyph = $possible;$/;"	v
glyph	svg/getwords.inc	/^            $glyph = null;$/;"	v
glyphLine	svg/getwords.inc	/^            $glyphLine = $this->stringToGlyphs($line);$/;"	v
glyphs	svg/charges/characters/letter.inc	/^$glyphs = simplexml_load_file($folder . "fonts\/" . $font . '.svg' );$/;"	v
glyphs	svg/getwords.inc	/^        $this->glyphs = [];$/;"	v
gold	svg/proper.inc	/^  static $gold;$/;"	v
gradient	svg/treatment.inc	/^  $gradient = add_def("${gradientType}Gradient$direction", $stop, "gradient");$/;"	v
gradientType	svg/treatment.inc	/^  $gradientType = $type == "grady-in-annulo" ? "radial" : "linear";$/;"	v
grady	parser/english/grammar.inc	/^          $grady = (substr($keyterm,0,5) == 'grady');$/;"	v
grady	parser/english/grammar.inc	/^      $grady = (substr($keyterm, 0, 5) == 'grady');$/;"	v
grammar	parser/grammar.inc	/^abstract class grammar  {$/;"	c
grammar	parser/parser.inc	/^        $this->grammar = new englishGrammar($language, $this->xmlMaker);$/;"	v
grammar	parser/parser.inc	/^  protected $grammar;$/;"	v
gray	svg/proper.inc	/^  static $gray;$/;"	v
green	svg/proper.inc	/^  static $green;$/;"	v
green	svg/tinctures.inc	/^  $green = intval('0x' . substr($hex,2,2),16);$/;"	v
green1	svg/tinctures.inc	/^    $green1 = intval('0x' . substr($hex1,2,2),16);$/;"	v
green2	svg/tinctures.inc	/^    $green2 = intval('0x' . substr($hex2,2,2),16);$/;"	v
green3	svg/tinctures.inc	/^    $green3 = intval(($green1 + $green2) \/ 2);$/;"	v
grey	svg/proper.inc	/^  static $grey;$/;"	v
greyShield	analyser/references.inc	/^  protected function greyShield() {$/;"	f
grid	svg/quartering.inc	/^        $grid = "<g fill='none' stroke-width=\\"3\\" stroke=\\"" . rgb('marshalling-stroke') . "\\">\\n";$/;"	v
grid	svg/quartering.inc	/^    $grid = "<g fill='none' stroke-width=\\"3\\" stroke=\\"" . rgb('marshalling-stroke') . "\\">\\n";$/;"	v
grid	svg/quartering.inc	/^    function grid()$/;"	f
groups	svg/metadata.inc	/^  static $groups = array();$/;"	v
groups	svg/proper.inc	/^  static $groups = array();$/;"	v
h	svg/arrangements.inc	/^                $h = $w \/ $correct_h;$/;"	v
h	svg/divisions/flag/per-bend.inc	/^$h = $layout->size->height;$/;"	v
h	svg/ordinaries/flag/bend.inc	/^$h = $layout->size->height;$/;"	v
h	svg/ordinaries/shield_shape_utils.inc	/^        $h = $layout->size->height - 2 * $margin;$/;"	v
h	svg/ordinaries/square-flaunch.inc	/^$h = $layout->center_point->y * 2;$/;"	v
h	svg/quartering.inc	/^    $h = $layout->center_point_ratio()->y;$/;"	v
h	svg/quartering.inc	/^    $h = 1 \/ $down;$/;"	v
h100	svg/ordinaries/flag/pile.inc	/^$h100 = sprintf("%.2f",$height\/100);$/;"	v
hSpacing	svg/ordinaries/bar.inc	/^  $hSpacing = 1000\/($num+1);$/;"	v
half	parser/english/grammar.inc	/^            $half = $this->schema->makeNode(blazonML::E_COMPLEX, array('keyterm' => $keyterm), self::tokens(), self::lineNo());$/;"	v
half	svg/edges/edge_type.inc	/^        $half = $this->can_be_halved && ($source->flags() & BezierSegmentFlags::SYMMETRICAL);$/;"	v
half	svg/getcharge.inc	/^        $half = $height \/ 2;$/;"	v
half	svg/getcharge.inc	/^        $half = $width \/ 2;$/;"	v
half	svg/getcharge.inc	/^      $half = $height \/ 2;$/;"	v
half	svg/getcharge.inc	/^      $half = $width \/ 2;$/;"	v
half	svg/placecharge.inc	/^      $half = ($between->getAttribute('number')) \/ 2;$/;"	v
halved	parser/english/grammar.inc	/^    protected function halved()$/;"	f
handle	svg/ordinaries/mount.inc	/^    $handle = $width\/3;$/;"	v
handle_extra	svg/svgtools.inc	/^function handle_extra($element, $extra, $featureColours, &$bounding_box)$/;"	f
handle_x	svg/ordinaries/shield_shape_utils.inc	/^        $handle_x = $rx * 0.55;$/;"	v
handle_y	svg/ordinaries/shield_shape_utils.inc	/^        $handle_y = $ry * 0.55;$/;"	v
hasBeenUsed	randomblazon.php	/^function hasBeenUsed($tincture) {$/;"	f
has_feature	analyser/utilities.inc	/^function has_feature(DOMElement $node, $name) {$/;"	f
has_finish	svg/bezier.inc	/^    private function has_finish()$/;"	f
hat	svg/achievement.inc	/^                    $hat = $colours[0];$/;"	v
hat	svg/achievement.inc	/^                $hat = rgb('sable');$/;"	v
hat	svg/achievement.inc	/^    $hat = null;$/;"	v
hatching	svg/proper.inc	/^      $hatching = $options['palette'] == 'hatching';$/;"	v
header	svg/draw.inc	/^        $header = '<?xml version="1.0" encoding="utf-8" ?>$/;"	v
height	svg/arrangements.inc	/^        $height = 1 \/ $n;$/;"	v
height	svg/arrangements.inc	/^        $height = 1 \/ $per_side;$/;"	v
height	svg/charges/characters/word.inc	/^    $height = 320;$/;"	v
height	svg/charges/characters/word.inc	/^    $height = 400;$/;"	v
height	svg/charges/characters/word.inc	/^    $height = 44 * count($lines);$/;"	v
height	svg/charges/characters/word.inc	/^    $height = 44 * count($words);$/;"	v
height	svg/charges/characters/word.inc	/^    $height = 44;$/;"	v
height	svg/charges/characters/word.inc	/^  $height = 200;$/;"	v
height	svg/division.inc	/^  $height = $layout->size->height;$/;"	v
height	svg/divisions/paly.inc	/^$height = $layout->size->height + 200;$/;"	v
height	svg/divisions/tierced-in-fess.inc	/^$height = ($layout->size->height - $layout->division_offset->y) \/ 3;$/;"	v
height	svg/edges/edge_type.inc	/^            $height = $p1->distance($p2);$/;"	v
height	svg/getcharge.inc	/^                $height = $width * $aspect;$/;"	v
height	svg/getcharge.inc	/^                $height = ShieldLayout::best_height($shape);$/;"	v
height	svg/getcharge.inc	/^        $height = $half;$/;"	v
height	svg/getcharge.inc	/^      $height = $half;$/;"	v
height	svg/getwords.inc	/^        $height = intval(ceil($aspectRatio\/$width));$/;"	v
height	svg/ordinaries/bar.inc	/^  $height = $layout->size->height;$/;"	v
height	svg/ordinaries/bar.inc	/^$height = 1000;$/;"	v
height	svg/ordinaries/cross-nordic.inc	/^$height = $layout->size->height;$/;"	v
height	svg/ordinaries/flag/pile.inc	/^$height = $layout->size->height;$/;"	v
height	svg/ordinaries/grid.inc	/^$height = $layout->size->height;$/;"	v
height	svg/ordinaries/mount.inc	/^$height = $layout->size->height * 0.35;$/;"	v
height	svg/ordinaries/pall.inc	/^    $height = $layout->center_point->y - $width \/ M_SQRT2;$/;"	v
height	svg/ordinary.inc	/^                $height = ($type == 'per-bend' || $type == 'per-bend-sinister' || $type == 'quarterly') ? 1000 : 1200;$/;"	v
height	svg/pathtools.inc	/^        $height = $layout->size->height \/ 1.2;$/;"	v
height	svg/pathtools.inc	/^        $height = $layout->size->height;$/;"	v
height	svg/quartering.inc	/^            $height = $quarter->size->height;$/;"	v
height	svg/size.inc	/^            $height = $options["flagHeight"];$/;"	v
height	svg/size.inc	/^            $height = static::$custom_size[$shape];$/;"	v
height	svg/size.inc	/^        $height = $this->size->height * 0.3;$/;"	v
height	svg/size.inc	/^        $height = 1000;$/;"	v
height	svg/size.inc	/^        $height = 1200;$/;"	v
height	svg/size.inc	/^        $this->height = $height;$/;"	v
height	svg/svgtools.inc	/^        $height = ($y1 - $y0) * intval($heightVal) \/ 100;$/;"	v
height	svg/svgtools.inc	/^        $height = floatval($heightVal);$/;"	v
height	svg/tinctures.inc	/^                    $height = get_div_height($data->type_node);$/;"	v
heightVal	svg/svgtools.inc	/^    $heightVal = $svg['height'] ?? $x1;$/;"	v
height_mult	svg/quartering.inc	/^            $height_mult = 1 - $this->y;$/;"	v
held_move_scale	svg/svgtools.inc	/^    $held_move_scale = $held["height"] \/ 1000;$/;"	v
helmet	parser/english/grammar.inc	/^  protected function helmet() {$/;"	f
helmetNode	parser/english/grammar.inc	/^    $helmetNode = $this->schema->makeNode(blazonML::E_HELMET, array ($/;"	v
helmets	svg/draw.inc	/^    $helmets = [];$/;"	v
heraldicOnly	parser/english/grammar.inc	/^        $heraldicOnly = false;$/;"	v
here	parser/matcher.inc	/^    $here = $this->tokenList->cur_word;$/;"	v
hex	svg/tinctures.inc	/^        $hex = rgb($tincture);$/;"	v
hex	svg/tinctures.inc	/^    $hex = substr($hex,1);$/;"	v
hex	svg/treatments/tartan.inc	/^        $hex = rgb($child->getAttribute('keyterm'));$/;"	v
hex1	svg/tinctures.inc	/^        $hex1 = substr($hex1,1);$/;"	v
hex2	svg/tinctures.inc	/^        $hex2 = substr($hex2,1);$/;"	v
highest	parser/english/grammar.inc	/^                        $highest = $keyterm;$/;"	v
highest	parser/english/grammar.inc	/^                    $highest = $numberStated;$/;"	v
highest	parser/english/grammar.inc	/^        $highest = 0;$/;"	v
hints	svg/placecharge.inc	/^        $hints = new PlacementHints();$/;"	v
hints	svg/placecharge.inc	/^    $hints = new PlacementHints();$/;"	v
hints	svg/svgtools.inc	/^    $hints = new PlacementHints;$/;"	v
hmargin	svg/quartering.inc	/^    $hmargin = $layout->size->height \/ 1000;$/;"	v
hold_charge	svg/svgtools.inc	/^function hold_charge($element, $held, ShieldRect &$bounding_box)$/;"	f
hold_point	svg/getcharge.inc	/^                $hold_point = $child_layout->center_point;$/;"	v
hold_point	svg/getcharge.inc	/^                $hold_point = new ShieldPos(0, 0);$/;"	v
hold_point	svg/getcharge.inc	/^    $hold_point = null;$/;"	v
hold_point	svg/svgtools.inc	/^    $hold_point = $held["hold_point"];$/;"	v
hold_point	svg/svgtools.inc	/^    $hold_point = $svg->xpath("\/\/*[@id='hold-point']");$/;"	v
hold_radius	svg/getcharge.inc	/^            $hold_radius = $width \/ 15;$/;"	v
hold_radius	svg/getcharge.inc	/^    $hold_radius = 1;$/;"	v
holding	parser/english/grammar.inc	/^                        $holding = true;$/;"	v
holding	parser/english/grammar.inc	/^                $holding = false;$/;"	v
horiz_gap	svg/arrangements.inc	/^    $horiz_gap = ($bb_w * $space_pct) \/ max(1,($max_row - 1));$/;"	v
horizontal	svg/bezier.inc	/^    function horizontal($x, $relative = false)$/;"	f
horizontal	svg/svgtools.inc	/^    $horizontal = $held["horizontal"] ?? false;;$/;"	v
hsp	svg/tinctures.inc	/^  $hsp = sqrt(0.299 * ($red * $red) + 0.587 * ($green * $green) + 0.114 * ($blue * $blue));$/;"	v
hx	svg/charges/mullet/mullet.inc	/^        $hx = $cx + $pr;$/;"	v
i	parser/tokeniser.inc	/^            $i = $end;$/;"	v
i	parser/tokeniser.inc	/^    $i = 0;$/;"	v
i1	svg/ordinaries/grid.inc	/^    $i1 = $i - 1;$/;"	v
i1	svg/ordinaries/grid.inc	/^    $i1 = $i-1;$/;"	v
i2	svg/hatching.inc	/^            $i2 = $i + 20;$/;"	v
i2	svg/hatching.inc	/^        $i2 = $i + 20;$/;"	v
i2	svg/ordinaries/grid.inc	/^    $i2 = $i - 2 + 50;$/;"	v
id	svg/svgtools.inc	/^      $id = substr($id, 0, $len - 2);$/;"	v
id	svg/svgtools.inc	/^    $id = isset($element['id']) ? (string)$element['id'] : null;$/;"	v
id_url	svg/tinctures.inc	/^    static function id_url($id)$/;"	f
idealLength	svg/charges/characters/word.inc	/^    $idealLength = intval($totalLength \/ sqrt($totalLength\/2)); \/\/ roughly n lines of 2n characters$/;"	v
ignore	parser/grammar.inc	/^  protected function ignore ( $key ) { $this->phraseMatcher->searchMatch($key); }$/;"	f
ignoreMods	svg/getcharge.inc	/^      $ignoreMods = array("palewise", 'fesswise', 'bendwise', 'bendsinwise', 'haurient', 'conjoined', 'ensoleil');$/;"	v
ignoreWord	parser/tokeniser.inc	/^  public function ignoreWord($offset) {$/;"	f
im	drawshield.php	/^      $im = new Imagick();$/;"	v
im	drawshield.php	/^     $im = new Imagick();$/;"	v
im	drawshield.php	/^    $im = new Imagick();$/;"	v
im	quickimage.php	/^      $im = new Imagick();$/;"	v
imageHeight	drawshield.php	/^    $imageHeight = $imageWidth * $proportion;$/;"	v
imageWidth	drawshield.php	/^    $imageWidth = $options['printSize'];$/;"	v
image_url	demopage.php	/^    $image_url = "https:\/\/drawshield.net\/create\/img";$/;"	v
imp1	svg/shield.inc	/^      $imp1 = makeshield( $kid, $child_layout_1 );$/;"	v
imp1	svg/shield.inc	/^  $imp1 = $imp2 = null; \/\/ remove warnings$/;"	v
imp2	svg/shield.inc	/^      $imp2 = makeshield( $kid, $child_layout_2 );$/;"	v
inAnnulo	svg/arrangements.inc	/^function inAnnulo($number, $box, $layout)$/;"	f
inArrangement	svg/placecharge.inc	/^        $inArrangement = true;$/;"	v
inArrangement	svg/placecharge.inc	/^  $inArrangement = false;$/;"	v
inOrle	svg/arrangements.inc	/^function inOrle($layout, $number) {$/;"	f
in_annulo	svg/getcharge.inc	/^    $in_annulo = getModifierNodeWithKeyterm($node, "inannulo", false);$/;"	v
in_string	parser/tokeniser.inc	/^            $in_string = false;$/;"	v
in_string	parser/tokeniser.inc	/^            $in_string = true;$/;"	v
in_string	parser/tokeniser.inc	/^    $in_string = false;$/;"	v
inbend	analyser/references.inc	/^        $inbend = createModifierNode('chargemod', 'bendwise' );$/;"	v
inc	parser/matcher.inc	/^    $inc = abs($inc);$/;"	v
incAll	parser/tokeniser.inc	/^            $incAll = false;$/;"	v
incAll	parser/tokeniser.inc	/^            $incAll = true;$/;"	v
incAll	parser/tokeniser.inc	/^          $incAll = false;$/;"	v
incAll	parser/tokeniser.inc	/^          $incAll = true;$/;"	v
incAll	parser/tokeniser.inc	/^    $incAll = false;$/;"	v
includeCharge	svg/getcharge.inc	/^function includeCharge( DOMElement $node, $includeFile, $charge, $folder, $chargeKey ) {$/;"	f
includeDivision	svg/division.inc	/^function includeDivision( DOMElement &$node, $layout ) {$/;"	f
includeOrdinary	svg/ordinary.inc	/^function includeOrdinary( DOMElement &$node, $layout ) {$/;"	f
indent	randomblazon.php	/^    $indent = '';$/;"	v
index	svg/bezier.inc	/^        $this->index = $index;$/;"	v
index	svg/linetypes.inc	/^    $index = 'X' . $angle . $endPos . $startPos ; \/\/ From end of one line to start of next$/;"	v
index	svg/linetypes.inc	/^    $index = 'X' . $startDir . $endPos . $startPos;$/;"	v
index	svg/quartering.inc	/^            $index = $kid->getAttribute('index');$/;"	v
indices	parser/english/grammar.inc	/^                $indices = array();$/;"	v
initCurl	tests/runtests.php	/^function initCurl() {$/;"	f
inlineText	svg/getwords.inc	/^    public function inlineText($text) {$/;"	f
inner	svg/ordinary.inc	/^                $inner = $path->offset_copy($off);$/;"	v
innerSize	svg/ordinary.inc	/^  $innerSize = $cotiseSize*(($num*2)-1);$/;"	v
innerSpec	svg/ordinary.inc	/^  $innerSpec = parallelSpec ( $spec, 'i', $offsetSize );$/;"	v
innerSpec	svg/ordinary.inc	/^  $innerSpec = parallelSpec ( $spec, 'o', $innerSize );$/;"	v
innerSpec	svg/ordinary.inc	/^  $innerSpec = reverseSpec ( $innerSpec );$/;"	v
inputNode	parser/parser.inc	/^    $inputNode = $this->xmlMaker->createElement(blazonML::E_INPUT);$/;"	v
insersect	svg/bezier.inc	/^    private function insersect($lp1, $lp2, $rp1, $rp2)$/;"	f
insertMessages	svg/messages.inc	/^  public function insertMessages () {$/;"	f
insideMod	parser/english/grammar.inc	/^            $insideMod = null;$/;"	v
insideMod	parser/english/grammar.inc	/^        $insideMod = null;$/;"	v
instance	parser/utilities.inc	/^  protected static $instance = 0;$/;"	v
inter	svg/bezier.inc	/^            $inter = $c->pos->translated($dx * $amount, $dy * $amount);$/;"	v
inter	svg/bezier.inc	/^            $inter = $seg->line_single_intersection_t($p0, $p1);$/;"	v
inter	svg/bezier.inc	/^        $inter = $this->insersect($l[0], $l[1], $r[0], $r[1], $miter_limit);$/;"	v
inv	svg/placecharge.inc	/^  $inv = 0;$/;"	v
inv	svg/tinctures.inc	/^        $this->inv = $inv;$/;"	v
invert	svg/getwords.inc	/^        $this->invert = false;$/;"	v
inverted	svg/ordinary.inc	/^	$inverted = existModifierWithKeyterm($node, 'inverted');$/;"	v
inverted	svg/placecharge.inc	/^                            $inverted = '0',$/;"	v
inverted	svg/placecharge.inc	/^            $inverted = true;$/;"	v
inverted	svg/size.inc	/^    function inverted()$/;"	f
inverted	svg/treatment.inc	/^  $inverted = existModifierWithKeyterm($node, languageDB::INVERSE);$/;"	v
is_tight_corner	svg/edges/edge_type.inc	/^    private function is_tight_corner(ShieldPos $p0, ShieldPos $p1, ShieldPos $pm)$/;"	f
item	parser/english/grammar.inc	/^                $item = $this->schema->makeNode(blazonML::E_MISSING);$/;"	v
item	parser/english/grammar.inc	/^                $item = self::charge(false, true, false);$/;"	v
item	parser/english/grammar.inc	/^                $item = self::ordinary();$/;"	v
item	svg/charges/alchemical/symbol.inc	/^$item = strtolower(getModifierValueByKeyterm($node,'value'));$/;"	v
item	svg/charges/characters/roman.inc	/^  $item = '?';$/;"	v
item	svg/charges/characters/roman.inc	/^  $item = strtoupper($item{0});$/;"	v
item	svg/charges/characters/roman.inc	/^$item = getModifierValueByKeyterm( $node, 'value' );$/;"	v
item	svg/charges/characters/word.inc	/^$item = getModifierValueByKeyterm( $node, 'value' );$/;"	v
item	svg/charges/symbol/any.inc	/^$item = strtolower(getModifierValueByKeyterm($node,'value'));$/;"	v
item	svg/charges/zodiac/symbol.inc	/^$item = strtolower(getModifierValueByKeyterm($node,'value'));$/;"	v
item	svg/divisions/per-bend.inc	/^$item = 'per-bend';$/;"	v
item	svg/ordinary.inc	/^    		  $item = $child;$/;"	v
item	svg/ordinary.inc	/^  $item = null;$/;"	v
item	svg/placecharge.inc	/^      $item = $between;$/;"	v
item	svg/placecharge.inc	/^    $item = $node;$/;"	v
item	svg/svgtools.inc	/^    $item = "<g transform='$transform_attr'>";$/;"	v
item	svg/svgtools.inc	/^    $item = '';$/;"	v
item	svg/svgtools.inc	/^  $item = "<$name ";$/;"	v
items	svg/placecharge.inc	/^    $items = explode(',', $place_list[$count]);$/;"	v
j	svg/hatching.inc	/^        $j = $i + 20;$/;"	v
json	drawshield.php	/^      $json = [];$/;"	v
k	svg/hatching.inc	/^			$k = $i + 20;$/;"	v
keep	parser/english/grammar.inc	/^                    $keep = self::semicolon(true);$/;"	v
keep	parser/english/grammar.inc	/^                $keep = false;$/;"	v
keyterm	analyser/references.inc	/^        $keyterm = $node->getAttribute("keyterm");$/;"	v
keyterm	parser/english/grammar.inc	/^                            $keyterm = 'above'; \/\/ collapse to a single case$/;"	v
keyterm	parser/english/grammar.inc	/^                    $keyterm = $quarterMark[0];$/;"	v
keyterm	parser/english/grammar.inc	/^                    $keyterm = 'above';$/;"	v
keyterm	parser/english/grammar.inc	/^                $keyterm = self::find(languageDB::TARTANCOLS);$/;"	v
keyterm	parser/english/grammar.inc	/^                $keyterm = self::find(languageDB::WEBCOLS);$/;"	v
keyterm	parser/english/grammar.inc	/^                $keyterm = self::find(languageDB::WHCOLS);$/;"	v
keyterm	parser/english/grammar.inc	/^            $keyterm = "special\/escutcheon";$/;"	v
keyterm	parser/english/grammar.inc	/^            $keyterm = $type;$/;"	v
keyterm	parser/english/grammar.inc	/^            $keyterm = self::find(languageDB::COLOUR);$/;"	v
keyterm	parser/english/grammar.inc	/^            $keyterm = self::find(languageDB::LETTERS);$/;"	v
keyterm	parser/english/grammar.inc	/^            $keyterm = self::find(languageDB::NUMBER);$/;"	v
keyterm	parser/english/grammar.inc	/^            $keyterm = self::find(languageDB::QUARTERS_ORDINAL);$/;"	v
keyterm	parser/english/grammar.inc	/^            $keyterm = self::find(languageDB::QUARTERS_ROMAN);$/;"	v
keyterm	parser/english/grammar.inc	/^            $keyterm = self::find(languageDB::QUARTERS_WORDS);$/;"	v
keyterm	parser/english/grammar.inc	/^            $keyterm = self::find(languageDB::TARTANCOLS);$/;"	v
keyterm	parser/english/grammar.inc	/^            $keyterm = self::find(languageDB::WEBCOLS);$/;"	v
keyterm	parser/english/grammar.inc	/^            $keyterm = self::find(languageDB::WHCOLS);$/;"	v
keyterm	parser/english/grammar.inc	/^          $keyterm = $treat->getAttribute('keyterm');$/;"	v
keyterm	parser/english/grammar.inc	/^        $keyterm = 'checky9';$/;"	v
keyterm	parser/english/grammar.inc	/^        $keyterm = null;$/;"	v
keyterm	parser/english/grammar.inc	/^        $keyterm = self::find(languageDB::FUR);$/;"	v
keyterm	parser/english/grammar.inc	/^        $keyterm = self::find(languageDB::ORDINARY_NOT_CHARGE);$/;"	v
keyterm	parser/english/grammar.inc	/^      $keyterm = $treat->getAttribute('keyterm');$/;"	v
keyterm	parser/english/grammar.inc	/^    $keyterm = self::find(languageDB::TREATMENT);$/;"	v
keyterm	parser/lexicon.inc	/^          $keyterm = $pattern;$/;"	v
keyterm	parser/lexicon.inc	/^          $keyterm = $pattern[1];$/;"	v
keyterm	svg/arrangements.inc	/^    $keyterm = $item->getAttribute('keyterm');$/;"	v
keyterm	svg/getcharge.inc	/^    $keyterm = $node->getAttribute('keyterm');$/;"	v
keyterm	svg/placecharge.inc	/^      $keyterm = $child->getAttribute('keyterm');$/;"	v
keyterm	svg/svgtools.inc	/^        $keyterm = $mod->getAttribute('keyterm');$/;"	v
keyterm	svg/tinctures.inc	/^        $keyterm = 'heraldic\/' . $keyterm;$/;"	v
keyterms	parser/lexicon.inc	/^    $keyterms = array();$/;"	v
l	svg/bezier.inc	/^        $l = $this->offset_side($seg_left, $c->pos, $amount);$/;"	v
l	svg/hatching.inc	/^			$l = $j + 20;$/;"	v
l	svg/size.inc	/^        $l = $this->left() + $x1;$/;"	v
language	parser/english/lexicon.inc	/^        $this->language = 'english';$/;"	v
language	parser/lexicon.inc	/^   protected $language;$/;"	v
languageDB	parser/english/lexicon.inc	/^class languageDB extends lexicon$/;"	c
last	parser/english/grammar.inc	/^        $last = count($patternArray) - 1;$/;"	v
last	svg/bezier.inc	/^            $last = $points[$n_points - 1];$/;"	v
lastEntry	parser/english/grammar.inc	/^            $lastEntry = $this->tokenList->num_tokens - 1;$/;"	v
last_path	svg/bezier.inc	/^    function last_path() : PolyBezier$/;"	f
last_pos	svg/bezier.inc	/^        $last_pos = $this->relpoint();$/;"	v
layout	svg/draw.inc	/^    $layout = ShieldLayout::from_options($options);$/;"	v
layout	svg/quartering.inc	/^            $layout = $quarter->to_layout();$/;"	v
layout	svg/quartering.inc	/^        $this->layout = $layout;$/;"	v
layout_chief	svg/shield.inc	/^        $layout_chief = new ShieldLayout($layout->chief->size, "chief", null, null, false);$/;"	v
layout_chief	svg/shield.inc	/^    $layout_chief = null;$/;"	v
layout_field	svg/shield.inc	/^        $layout_field = clone $layout;$/;"	v
layout_field	svg/shield.inc	/^    $layout_field = $layout;$/;"	v
layout_objects	svg/shield.inc	/^        $layout_objects = new ShieldLayout($new_size, $layout->shape, $cross_c, null, false, $layout->section);$/;"	v
layout_objects	svg/shield.inc	/^    $layout_objects = $layout;$/;"	v
left	svg/divisions/quarterly.inc	/^$left = $cx + $margin;$/;"	v
left	svg/linetypes.inc	/^      $left = $dist - $len;$/;"	v
left	svg/linetypes.inc	/^      $left = $dist - ($reps * $len);$/;"	v
left	svg/linetypes.inc	/^    function left($length)$/;"	f
left	svg/ordinaries/shield_shape_utils.inc	/^        $left = $inset;$/;"	v
left	svg/size.inc	/^    function left()$/;"	f
left_plain	svg/linetypes.inc	/^    function left_plain($length)$/;"	f
len	parser/english/grammar.inc	/^        $len = strlen($value);$/;"	v
len	svg/linetypes.inc	/^    $len = preg_replace_callback('\/{D.*?}\/', 'subFunc', $length);$/;"	v
len	svg/pathtools.inc	/^    $len = strlen($percent);$/;"	v
len	svg/svgtools.inc	/^    $len = strlen($id);$/;"	v
len	tests/runtests.php	/^    $len = strlen($start);$/;"	v
length	parser/matcher.inc	/^    $length = $this->tokenList->cur_word - $this->prevIndex;$/;"	v
length	svg/bezier.inc	/^            $this->length = $start->distance($finish);$/;"	v
length	svg/bezier.inc	/^            $this->length = 0;$/;"	v
length	svg/bezier.inc	/^    function length()$/;"	f
length	svg/bezier.inc	/^    private $length = 0;$/;"	v
length	svg/bezier.inc	/^    public $length;$/;"	v
length	svg/divisions/tierced-in-bend.inc	/^$length = $base * M_SQRT2 * 2;$/;"	v
length	svg/divisions/tierced-in-chevron.inc	/^$length = 2000;$/;"	v
length	svg/getwords.inc	/^                $length = 0;$/;"	v
length	svg/getwords.inc	/^        $length = 0;$/;"	v
length	svg/ordinaries/baton.inc	/^$length = $base * M_SQRT2 * 2;$/;"	v
length	svg/ordinaries/bend-helper.inc	/^    $length = $base * M_SQRT2 * 2;$/;"	v
length	svg/ordinaries/flag/pall.inc	/^$length = hypot($layout->center_point->y, $layout->center_point->x);$/;"	v
length	svg/ordinaries/shield_shape_utils.inc	/^        $length = 2000;$/;"	v
length	svg/pathtools.inc	/^  $length = strlen($argString);$/;"	v
length_steps	svg/bezier.inc	/^    public $length_steps = [];$/;"	v
lengths	svg/getwords.inc	/^            $lengths = [];$/;"	v
lerp	svg/size.inc	/^    function lerp(ShieldPos $other, $factor_x, $factor_y = null)$/;"	f
lerp	svg/size.inc	/^function lerp($a, $b, $factor)$/;"	f
letter	svg/bezier.inc	/^                $letter = "C";$/;"	v
letter	svg/bezier.inc	/^                $letter = "L";$/;"	v
letter	svg/bezier.inc	/^                $this->letter = "L";$/;"	v
letter	svg/bezier.inc	/^            $this->letter = "M";$/;"	v
letter	svg/bezier.inc	/^        $letter = "";$/;"	v
letter	svg/bezier.inc	/^        $this->letter = "M";$/;"	v
letter	svg/bezier.inc	/^        $this->letter = strtoupper($tok);$/;"	v
lexer	parser/parser.inc	/^  protected $lexer;$/;"	v
lexicon	parser/lexicon.inc	/^class lexicon {$/;"	c
lexicon	randomblazon.php	/^$lexicon = [$/;"	v
lh	svg/ordinaries/bend-helper.inc	/^    $lh = min($layout->size->height, $layout->size->width);$/;"	v
licence	svg/svgtools.inc	/^                $licence = $meta;$/;"	v
licence	svg/svgtools.inc	/^        $licence = 'unknown';$/;"	v
lightnessValue	svg/tinctures.inc	/^function lightnessValue($hex) {$/;"	f
limit	randomblazon.php	/^    $limit = 20; \/\/ avoid infinite loops (just in case)$/;"	v
limit	svg/placecharge.inc	/^      $limit = $MaxAR;$/;"	v
limit	svg/placecharge.inc	/^      $limit = $MinAR;$/;"	v
limit	svg/placecharge.inc	/^    $limit = 0;  \/\/ We can flex as required to fill whole BB$/;"	v
line	svg/charges/characters/word.inc	/^        $line = $word . ' ';$/;"	v
line	svg/charges/characters/word.inc	/^        $line = trim($line);$/;"	v
line	svg/charges/characters/word.inc	/^    $line = '';$/;"	v
line	svg/charges/characters/word.inc	/^    $line = trim($line);$/;"	v
line	svg/getwords.inc	/^                $line = '';$/;"	v
line	svg/getwords.inc	/^            $line = $this->stringToGlyphs($text);$/;"	v
line	svg/getwords.inc	/^        $line = $this->stringToGlyphs($text);$/;"	v
line	svg/getwords.inc	/^        $line = '';$/;"	v
line	svg/tinctures.inc	/^            $line = substr($line, 0, $comment);$/;"	v
line	svg/tinctures.inc	/^        $line = str_replace("\\t", '', $line);$/;"	v
line	svg/tinctures.inc	/^        $line = str_replace(' ', '', $line);$/;"	v
line	svg/tinctures.inc	/^        $line = trim($line);$/;"	v
line	tests/runtests.php	/^        $line = trim($line);$/;"	v
lineBreak	svg/getwords.inc	/^        $lineBreak = 10 + (strlen($text) \/ 6);$/;"	v
lineComment	parser/tokeniser.inc	/^            $lineComment = true;$/;"	v
lineComment	parser/tokeniser.inc	/^          $lineComment = false;    $/;"	v
lineComment	parser/tokeniser.inc	/^          $lineComment = true;$/;"	v
lineComment	parser/tokeniser.inc	/^    $lineComment = false;$/;"	v
lineCount	svg/getwords.inc	/^        $lineCount = count($lines);$/;"	v
lineLength	svg/charges/characters/word.inc	/^        $lineLength = strlen($word);$/;"	v
lineLength	svg/charges/characters/word.inc	/^    $lineLength = 0;$/;"	v
lineNo	parser/english/grammar.inc	/^        $lineNo = self::lineNo();$/;"	v
lineNo	parser/grammar.inc	/^          $lineNo = " near line " . $lineNos[$offset];$/;"	v
lineNo	parser/grammar.inc	/^    $lineNo = '';$/;"	v
lineNo	parser/grammar.inc	/^  protected function lineNo () { return $this->phraseMatcher->getLineNo(); }$/;"	f
lineNo	parser/tokeniser.inc	/^    $lineNo = 1;$/;"	v
lineNo	svg/draw.inc	/^    $lineNo = $node->getAttribute(BlazonML::A_LINENUMBER);$/;"	v
lineNos	parser/grammar.inc	/^      $lineNos = $this->tokenList->getLineNos();$/;"	v
lineNos	parser/tokeniser.inc	/^    $this->lineNos = array();$/;"	v
lineNos	parser/tokeniser.inc	/^  public $lineNos = array();$/;"	v
lineSize	svg/divisions/barry.inc	/^$lineSize = (int)($calcHeight \/ 30);$/;"	v
lineSpec	svg/linetypes.inc	/^  $lineSpec = preg_replace_callback('\/{S.*?}\/', 'subFunc', $lineSpec);$/;"	v
lineSpec	svg/linetypes.inc	/^  $lineSpec= $lineSpecs[$lineType];$/;"	v
lineSpecs	svg/linetypes.inc	/^  $lineSpecs = array ($/;"	v
lineStraight	svg/pathtools.inc	/^function lineStraight( $angle, $dist ) {$/;"	f
lineType	svg/divisions/chausse.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/flag/per-pall.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/gyronny.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/per-chevron.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/per-chief.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/per-fess.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/per-pall.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/per-pile.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/pily-bendy.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/pily.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/tierced-in-bend.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/tierced-in-chevron.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/tierced-in-fess.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
lineType	svg/divisions/tierced-in-pale.inc	/^$lineType = getModifierByType($node, 'linetype', false);$/;"	v
line_p0	svg/edges/edge_type.inc	/^                $line_p0 = $seg_outer->point();$/;"	v
line_p1	svg/edges/edge_type.inc	/^                $line_p1 = $seg_outer->polar_relative(-300, M_PI\/2);$/;"	v
line_single_intersection	svg/bezier.inc	/^    function line_single_intersection(ShieldPos $p0, ShieldPos $p1) : ?SegmentAtData$/;"	f
line_single_intersection	svg/bezier.inc	/^    function line_single_intersection(ShieldPos $p0, ShieldPos $p1)$/;"	f
line_single_intersection_t	svg/bezier.inc	/^    function line_single_intersection_t(ShieldPos $p0, ShieldPos $p1)$/;"	f
line_to	svg/bezier.inc	/^    function line_to()$/;"	f
line_to	svg/bezier.inc	/^    function line_to(ShieldPos $p)$/;"	f
line_type	svg/divisions/per-saltire.inc	/^$line_type = getModifierByType($node, 'linetype', false);$/;"	v
linear	svg/bezier.inc	/^        $this->linear = $tan1->x == $start->x && $tan1->y == $start->y && $tan2->x == $finish->x && $tan2->y == $finish->y;$/;"	v
linear	svg/bezier.inc	/^    public $linear;$/;"	v
lines	svg/charges/characters/word.inc	/^    $lines = array();$/;"	v
lines	svg/getwords.inc	/^        $lines = [];$/;"	v
linetype	parser/english/grammar.inc	/^    protected function linetype()$/;"	f
linetype	svg/ordinaries/bar.inc	/^          $linetype = getModifierByType($child,'linetype', false);$/;"	v
linetype	svg/ordinary.inc	/^          $linetype = getModifierByType($node,'linetype', false);$/;"	v
linetype	svg/ordinary.inc	/^        $linetype = null;$/;"	v
linetype	svg/ordinary.inc	/^    $linetype = getModifierByType($node, 'linetype', false);$/;"	v
linetype_size	svg/ordinaries/bar.inc	/^      $linetype_size = 15;$/;"	v
linetype_size	svg/ordinaries/bar.inc	/^      $linetype_size = 20;$/;"	v
linetype_size	svg/ordinaries/bar.inc	/^  $linetype_size = 30;$/;"	v
list	analyser/references.inc	/^        $list = $this->xpath->query('\/\/modifier[@type="holding" and @keyterm="in-hand-both"][1]');$/;"	v
listKeys	parser/lexicon.inc	/^  public function listKeys() {$/;"	f
listKeyterms	parser/lexicon.inc	/^  public function listKeyterms() {$/;"	f
load	svg/edges/edge_type.inc	/^    static function load($name) : EdgeType$/;"	f
load_path	svg/edges/edge_type.inc	/^    private static function load_path($xpath, $n, $filename)$/;"	f
loaded	svg/tinctures.inc	/^		$loaded = true;$/;"	v
loaded	svg/tinctures.inc	/^    static $loaded = false;$/;"	v
locNode	parser/english/grammar.inc	/^                    $locNode = $this->schema->makeNode(blazonML::E_LOCATION, array ($/;"	v
locNode	parser/english/grammar.inc	/^                $locNode = $this->schema->makeNode(blazonML::E_LOCATION, array ($/;"	v
locNode	parser/english/grammar.inc	/^            $locNode = $this->schema->makeNode(blazonML::E_LOCATION, array ($/;"	v
locNode	parser/english/grammar.inc	/^            $locNode = null;$/;"	v
locNode	parser/english/grammar.inc	/^          $locNode = $this->schema->makeNode(blazonML::E_LOCATION, array ($/;"	v
locNode	parser/english/grammar.inc	/^        $locNode = $this->schema->makeNode(blazonML::E_LOCATION, array ($/;"	v
locNode	parser/english/grammar.inc	/^        $locNode = null;$/;"	v
locNode	parser/english/grammar.inc	/^      $locNode = $this->schema->makeNode(blazonML::E_LOCATION, array ($/;"	v
locNode	parser/english/grammar.inc	/^    $locNode = null;$/;"	v
locNode	svg/achievement.inc	/^                    $locNode = $child;$/;"	v
location	svg/achievement.inc	/^            $location = $mantlingNode->childNodes->item($i);$/;"	v
location	svg/achievement.inc	/^            $location = $torseNode->childNodes->item($i);$/;"	v
location	svg/achievement.inc	/^        $location = $supportNode->childNodes->item($i);$/;"	v
locations	parser/english/grammar.inc	/^            $locations = array();$/;"	v
locs	svg/ordinaries/bar.inc	/^          $locs = $bar_locs[$mod][$num];$/;"	v
longest	svg/getwords.inc	/^                $this->longest = $i;$/;"	v
longest	svg/getwords.inc	/^            $longest = 0;$/;"	v
longest	svg/getwords.inc	/^        $this->longest = null;$/;"	v
longestLength	svg/getwords.inc	/^                $longestLength = $wordLen;$/;"	v
longestLength	svg/getwords.inc	/^        $longestLength = 0;$/;"	v
longestLine	svg/charges/characters/word.inc	/^    $longestLine = 0;$/;"	v
longestWord	svg/getwords.inc	/^    private function longestWord() {$/;"	f
lookAhead	parser/grammar.inc	/^  protected function lookAhead ( $offset ) { $this->phraseMatcher->lookahead( $offset ); }$/;"	f
lookAhead	parser/tokeniser.inc	/^        $lookAhead = $blazon[$i+1];$/;"	v
lookAhead	parser/tokeniser.inc	/^      $lookAhead = '';$/;"	v
lookBehind	parser/tokeniser.inc	/^    $lookBehind = '';$/;"	v
lookFor	parser/english/grammar.inc	/^            $lookFor = languageDB::METAOVERALL;$/;"	v
lookFor	parser/english/grammar.inc	/^            $lookFor = languageDB::OVERALL;$/;"	v
lookahead	parser/matcher.inc	/^  public function lookahead($inc = 1) {$/;"	f
loopDetect	analyser/utilities.inc	/^    $loopDetect = 0;$/;"	v
lowestPenalty	svg/getcharge.inc	/^      $lowestPenalty = $penalty;$/;"	v
lowestPenalty	svg/getcharge.inc	/^  $lowestPenalty = 9999;$/;"	v
lowestPenalty	svg/placement-data.inc	/^        $lowestPenalty = $penalty;$/;"	v
lowestPenalty	svg/placement-data.inc	/^    $lowestPenalty = 9999;$/;"	v
lw	svg/ordinaries/bend-helper.inc	/^    $lw = $layout->size->width;$/;"	v
m	svg/transform.inc	/^                $m = new TransformMatrix();$/;"	v
m	svg/transform.inc	/^        $m = $this->multiplied($other);$/;"	v
m	svg/transform.inc	/^        $m = new TransformMatrix();$/;"	v
m	svg/transform.inc	/^        $m = new TransformMatrix;$/;"	v
main_linetype	svg/ordinaries/bar.inc	/^  $main_linetype = getModifierByType($node, 'linetype', false);$/;"	v
makeCharge	svg/getcharge.inc	/^function makeCharge($charge, $layout, $placements = null) {$/;"	f
makeChief	svg/shield.inc	/^function makeChief($node, $layout)$/;"	f
makeDivision	svg/division.inc	/^function makeDivision( DOMElement $node, ShieldLayout $layout, $counter = false ) {$/;"	f
makeFur	svg/furs.inc	/^function makeFur ( $name ) {$/;"	f
makeGrady	svg/treatment.inc	/^function makeGrady( $node ) {$/;"	f
makeList	svg/getcharge.inc	/^function makeList($chgList, $layout) {$/;"	f
makeMod	parser/utilities.inc	/^  public function makeMod ( $type, $value = null, $keyterm = null, $tokens = null, $lineNo = null ) {$/;"	f
makeNode	parser/utilities.inc	/^  public function makeNode ( $element, $params = null, $tokens = null, $lineNo = null ) {$/;"	f
makeOffset	svg/linetypes.inc	/^function makeOffset ( $dir, $disp, $io, $size ) {$/;"	f
makeOrdChgs	svg/draw.inc	/^function makeOrdChgs( $node, $layout ) {$/;"	f
makeOrdinary	svg/ordinary.inc	/^function makeOrdinary( DOMElement &$node, $layout ) {$/;"	f
makePath	svg/linetypes.inc	/^function makePath ( $shapeSpec, $lineType, $size = 60 ) {$/;"	f
makePath2	svg/linetypes.inc	/^function makePath2 ( $shapeSpec, $lineType, $size = 60 ) {$/;"	f
makePlain	svg/shield.inc	/^function makePlain( &$children, $layout ) {$/;"	f
makeQuartered	svg/quartering.inc	/^function makeQuartered($across, $down, $children, ShieldLayout $layout)$/;"	f
makeRelative	svg/pathtools.inc	/^function makeRelative ( $path, $Xoff = 0, $Yoff = 0 ) {$/;"	f
makeSemy	svg/treatment.inc	/^function makeSemy( $node, $layout ) {$/;"	f
makeSquareCharge	svg/getcharge.inc	/^function makeSquareCharge(DOMElement $node ) {$/;"	f
makeTreatment	svg/treatment.inc	/^function makeTreatment ( $node, $layout, $counter = false ) {$/;"	f
makeVoid	svg/ordinary.inc	/^function makeVoid ( $spec, $layout, $lineType = 'none', $featureSize = 50, $offsetSize = 30 ) {$/;"	f
make_def	svg/svgtools.inc	/^function make_def($element, $content, $name = '', $title = '', $desc = '')$/;"	f
make_plain	svg/bezier.inc	/^    function make_plain()$/;"	f
make_quartered_saltire	svg/quartering.inc	/^function make_quartered_saltire( DOMNodeList $children, ShieldLayout $layout )$/;"	f
makedimidiated	svg/shield.inc	/^function makedimidiated( $children, $layout ) {$/;"	f
makeimpaled	svg/shield.inc	/^function makeimpaled( DOMNodeList $children, $layout ) {$/;"	f
makequartered4	svg/quartering.inc	/^function makequartered4( DOMNodeList $children, ShieldLayout $layout )$/;"	f
makequartered5	svg/quartering.inc	/^function makequartered5( $children, ShieldLayout $layout )$/;"	f
makequartered6	svg/quartering.inc	/^function makequartered6( $children, ShieldLayout $layout )$/;"	f
makequartered8	svg/quartering.inc	/^function makequartered8( $children, ShieldLayout $layout )$/;"	f
makeshield	svg/shield.inc	/^function makeshield( DOMElement &$node, $layout ) {$/;"	f
mantling	parser/english/grammar.inc	/^  protected function mantling() {$/;"	f
mantling	svg/draw.inc	/^                            $mantling = drawMantling($subNode);$/;"	v
mantling	svg/draw.inc	/^                    $mantling = drawMantling(null);$/;"	v
mantling	svg/draw.inc	/^    $mantling = '';$/;"	v
mantlingNode	parser/english/grammar.inc	/^        $mantlingNode = $this->schema->makeNode(blazonML::E_MANTLING, array ($/;"	v
mantlingNode	parser/english/grammar.inc	/^    $mantlingNode = $this->schema->makeNode(blazonML::E_MANTLING, array ($/;"	v
margin	drawshield.php	/^    $margin = 40; \/\/ bit less than 1\/2"$/;"	v
margin	svg/arrangements.inc	/^            $margin = 50;$/;"	v
margin	svg/arrangements.inc	/^        $margin = min($layout->size->width, $layout->size->height) \/ 10;$/;"	v
margin	svg/arrangements.inc	/^    $margin = 0;$/;"	v
margin	svg/divisions/flag/per-pall.inc	/^$margin = 100;$/;"	v
margin	svg/divisions/gyronny.inc	/^    $margin = 100;$/;"	v
margin	svg/divisions/per-chief.inc	/^$margin = 100;$/;"	v
margin	svg/divisions/per-fess.inc	/^$margin = 100;$/;"	v
margin	svg/divisions/per-pall.inc	/^$margin = 100;$/;"	v
margin	svg/divisions/per-saltire.inc	/^$margin = 100;$/;"	v
margin	svg/divisions/quarterly.inc	/^$margin = 100;$/;"	v
margin	svg/divisions/tierced-in-fess.inc	/^$margin = 100;$/;"	v
margin	svg/ordinaries/bordure.inc	/^$margin = -100;$/;"	v
margin	svg/ordinaries/cross-formy.inc	/^$margin = 18;$/;"	v
margin	svg/ordinaries/double-tressure.inc	/^$margin = 24.2;$/;"	v
margin	svg/ordinaries/fess.inc	/^    $margin = 100;$/;"	v
margin	svg/ordinaries/inescutcheon.inc	/^    $margin  = 300;$/;"	v
margin	svg/ordinaries/inescutcheon.inc	/^$margin = 200;$/;"	v
margin	svg/ordinaries/orle.inc	/^$margin = 68;$/;"	v
margin	svg/ordinaries/plain-cross.inc	/^$margin = 100;$/;"	v
margin	svg/ordinaries/quarter.inc	/^$margin = 100;$/;"	v
margin	svg/ordinaries/saltire.inc	/^$margin = 100;$/;"	v
margin	svg/ordinaries/square-flaunch.inc	/^$margin = 8;$/;"	v
margin	svg/ordinaries/tressure.inc	/^    $margin = 24.2;$/;"	v
margin	svg/size.inc	/^    function margin($x1, $y1 = null, $x2 = null, $y2 = null)$/;"	f
margin_bottom	svg/ordinaries/shield_shape_utils.inc	/^        $this->margin_bottom = $margin_bottom;$/;"	v
margin_cross	svg/arrangements.inc	/^        $margin_cross = 125;$/;"	v
margin_out	svg/arrangements.inc	/^        $margin_out = $margin_cross = 50;$/;"	v
margin_out	svg/arrangements.inc	/^        $margin_out = 25;$/;"	v
margin_top	svg/ordinaries/shield_shape_utils.inc	/^        $this->margin_top = $margin_top;$/;"	v
markAsUsed	randomblazon.php	/^function markAsUsed($tincture) {$/;"	f
mask	svg/tinctures.inc	/^                        $this->mask = substr($this->fill, 4, -1);$/;"	v
mask	svg/tinctures.inc	/^        $this->mask = null;$/;"	v
mask_id	svg/tinctures.inc	/^                        $mask_id = add_def ( 'mask width="1200" height="1400" maskUnits="userSpaceOnUse"',$/;"	v
mask_id	svg/tinctures.inc	/^                    $mask_id = add_def ( 'mask width="1200" height="1400" maskUnits="userSpaceOnUse"',$/;"	v
mat	svg/transform.inc	/^        $this->mat = $m->mat;$/;"	v
mat	svg/transform.inc	/^        $this->mat = [$/;"	v
mat	svg/transform.inc	/^    private $mat = [];$/;"	v
matMul	svg/pathtools.inc	/^function matMul ( $a, $b, $c, $d, $e, $f, $x, $y ) {$/;"	f
match	parser/matcher.inc	/^           $match = $keyTerm;$/;"	v
match	parser/matcher.inc	/^    $match = null;$/;"	v
matchedValue	parser/matcher.inc	/^           $this->matchedValue = $this->value;$/;"	v
matchedValue	parser/matcher.inc	/^    $this->matchedValue = null;$/;"	v
matchedValue	parser/matcher.inc	/^  protected $matchedValue = null;$/;"	v
matchedvalue	parser/matcher.inc	/^    $this->matchedvalue = null;$/;"	v
matcher	parser/matcher.inc	/^class matcher {$/;"	c
matches	svg/getcharge.inc	/^            $matches = [];$/;"	v
matches	svg/linetypes.inc	/^  $matches = array(); \/\/ Chop the shape specification into "direction+distance" components$/;"	v
matches	svg/linetypes.inc	/^  $matches = preg_split('\/   *\/', $shapeSpec);$/;"	v
matches	svg/svgtools.inc	/^    $matches = [];$/;"	v
matches	svg/transform.inc	/^        $matches = [];$/;"	v
matches	tests/runtests.php	/^            $matches = array_slice($argv, 2);$/;"	v
matches	tests/runtests.php	/^        $matches = array_slice($argv,1);$/;"	v
matches	tests/runtests.php	/^$matches = [ null ];$/;"	v
matrixPath	svg/pathtools.inc	/^function matrixPath( $path, $a, $b, $c, $d, $e, $f ) {$/;"	f
max	parser/matcher.inc	/^    $max = $this->tokenList->num_tokens;$/;"	v
max	svg/transform.inc	/^        $max = clone $min;$/;"	v
maxIndex	randomblazon.php	/^    $maxIndex = count($choices)  - 1;$/;"	v
maxTinc	parser/english/grammar.inc	/^        $maxTinc = 3;$/;"	v
maxTinc	parser/english/grammar.inc	/^        $maxTinc = 4;$/;"	v
maxTinc	parser/english/grammar.inc	/^      $maxTinc = 2;$/;"	v
maxWidth	drawshield.php	/^    $maxWidth = $pageWidth - $margin - $margin;$/;"	v
max_match	parser/matcher.inc	/^           $max_match = $count;$/;"	v
max_match	parser/matcher.inc	/^    $max_match = 0;$/;"	v
max_per_row	svg/ordinaries/mount.inc	/^$max_per_row = 5;$/;"	v
max_row	svg/arrangements.inc	/^  $max_row = max($row_list);$/;"	v
max_word	parser/matcher.inc	/^    $max_word = null;$/;"	v
meetEdges	svg/linetypes.inc	/^function meetEdges($endDir, $endPos, $startDir, $startPos, $size ) {$/;"	f
message	parser/english/grammar.inc	/^        $message = '';$/;"	v
message	parser/grammar.inc	/^      $message = $this->messagesNode->childNodes->item($i);$/;"	v
messageArray	drawshield.php	/^      $messageArray = [];$/;"	v
messageNode	parser/grammar.inc	/^    $messageNode = $this->schema->makeNode(blazonML::E_MESSAGE, array ( $/;"	v
messageNode	svg/messages.inc	/^        $messageNode = $this->dom->createElement(blazonML::E_MESSAGE);$/;"	v
messageParent	svg/messages.inc	/^    $messageParent = ($xpath->query('\/\/messages'))->item(0);$/;"	v
messageStore	svg/messages.inc	/^class messageStore {$/;"	c
messageText	parser/grammar.inc	/^    $messageText = $this->schema->createTextNode($message);$/;"	v
messageText	svg/messages.inc	/^        $messageText = $this->dom->createTextNode($message);$/;"	v
messages	analyser/references.inc	/^      $messages = $messages->item(0);$/;"	v
messages	analyser/references.inc	/^      $messages = $this->dom->createElement('messages');$/;"	v
messages	analyser/references.inc	/^    $messages = $this->xpath->query('\/\/messages');$/;"	v
messages	drawshield.php	/^$messages = null;$/;"	v
messages	parser/grammar.inc	/^  protected $messages = array();$/;"	v
messages	quickimage.php	/^$messages = null;$/;"	v
messages	svg/draw.inc	/^    $messages = new messageStore($dom);$/;"	v
messages	svg/messages.inc	/^    $this->messages = array();$/;"	v
messages	svg/messages.inc	/^  private $messages;$/;"	v
messagesNode	parser/grammar.inc	/^      $this->messagesNode = $this->schema->makeNode(blazonML::E_MESSAGES);$/;"	v
messagesNode	parser/grammar.inc	/^  protected $messagesNode = null;$/;"	v
meta	svg/draw.inc	/^                $meta = "\\n<metadata>\\n"  . $blazonMLText . "\\n<\/metadata>\\n";$/;"	v
meta	svg/draw.inc	/^        $meta = '';$/;"	v
metadata	svg/getcharge.inc	/^    $metadata = new metadataMap();$/;"	v
metadata	svg/getcharge.inc	/^  static $metadata = null;$/;"	v
metadataMap	svg/metadata.inc	/^class metadataMap {$/;"	c
metas	svg/metadata.inc	/^      $metas = array_merge($metas, self::$charges[$chargeName]);$/;"	v
metas	svg/metadata.inc	/^      $metas = self::$groups[$chargeGroup]; \/\/ Don't need to merge as this is the first$/;"	v
metas	svg/metadata.inc	/^    $metas = [];$/;"	v
metas	svg/metadata.inc	/^    $metas = array_merge($metas, self::$charges[$search]);$/;"	v
mid	svg/bezier.inc	/^            $mid = $this->point($t);$/;"	v
mid	svg/ordinaries/shield_shape_utils.inc	/^        $mid = $margin + $width \/ 2;$/;"	v
mid_x	svg/ordinaries/shield_shape_utils.inc	/^        $mid_x = ($right + $left) \/ 2;$/;"	v
mid_y	svg/ordinaries/shield_shape_utils.inc	/^        $mid_y = ($top + $bottom) \/ 2;$/;"	v
midway	svg/ordinaries/cross-nordic.inc	/^$midway = $unit3 + ($unit \/ 2);$/;"	v
min	parser/matcher.inc	/^    $min = 0;$/;"	v
min	svg/transform.inc	/^        $min = array_shift($points);$/;"	v
minTinc	parser/english/grammar.inc	/^        $minTinc = 3;$/;"	v
minTinc	parser/english/grammar.inc	/^      $minTinc = 2;$/;"	v
minTree	drawshield.php	/^      $minTree = $dom->saveXML();$/;"	v
minTree	drawshield.php	/^      $minTree = preg_replace('\/<\\?xml.*\\?>\\n\/','', $minTree);$/;"	v
minTree	drawshield.php	/^      $minTree = preg_replace('\/<\\\/?blazon.*>\\n\/','', $minTree);$/;"	v
minTree	drawshield.php	/^      $minTree = preg_replace('\/[<>"]\/','', $minTree);$/;"	v
minTree	drawshield.php	/^      $minTree = preg_replace('\/blazonML:\/', '', $minTree);$/;"	v
min_ext	svg/arrangements.inc	/^    $min_ext = min($layout->center_point->x, $layout->size->height - $layout->center_point->y);$/;"	v
min_extent	svg/ordinaries/bend-helper.inc	/^    $min_extent = min($boundingBox->size->width, $boundingBox->size->height);$/;"	v
min_flories	svg/ordinaries/double-tressure.inc	/^            $min_flories = 0;$/;"	v
min_flories	svg/ordinaries/double-tressure.inc	/^    $min_flories = 1;$/;"	v
mirrorAction	svg/linetypes.inc	/^function mirrorAction ( $angle, $condition ) {$/;"	f
mirrorConds	svg/linetypes.inc	/^  $mirrorConds = array ($/;"	v
mirrorPath	svg/pathtools.inc	/^function mirrorPath ( $path, $axis = 'x' ) {$/;"	f
mirror_trans	svg/ordinaries/mount.inc	/^        $mirror_trans = new ShieldPos($layout->size->width - 2 * $tip_pos->x, 0);$/;"	v
mirrored	svg/ordinary.inc	/^	$mirrored = existModifierWithKeyterm($node, 'sinister') || $subtype == 'scarpe';$/;"	v
missing	parser/english/grammar.inc	/^        $missing = $this->schema->makeNode(blazonML::E_MISSING);$/;"	v
missing	svg/getcharge.inc	/^    $missing = '';$/;"	v
missing	svg/placement-data.inc	/^      $missing = '';$/;"	v
mixRGB	svg/tinctures.inc	/^function mixRGB($hex1, $hex2) {$/;"	f
mkAzure	svg/hatching.inc	/^function mkAzure() {$/;"	f
mkBisque	svg/hatching.inc	/^function mkBisque() {$/;"	f
mkCelestialAzure	svg/hatching.inc	/^function mkCelestialAzure() {$/;"	f
mkCendree	svg/hatching.inc	/^function mkCendree() {$/;"	f
mkGules	svg/hatching.inc	/^function mkGules() {$/;"	f
mkHatches	svg/hatching.inc	/^function mkHatches() {$/;"	f
mkMurrey	svg/hatching.inc	/^function mkMurrey() {$/;"	f
mkOr	svg/hatching.inc	/^function mkOr() {$/;"	f
mkOrange	svg/hatching.inc	/^function mkOrange() {$/;"	f
mkPurpure	svg/hatching.inc	/^function mkPurpure() {$/;"	f
mkRose	svg/hatching.inc	/^function mkRose() {$/;"	f
mkSable	svg/hatching.inc	/^function mkSable() {$/;"	f
mkTenne	svg/hatching.inc	/^function mkTenne() {$/;"	f
mkVert	svg/hatching.inc	/^function mkVert() {$/;"	f
mkbrunatre	svg/hatching.inc	/^function mkbrunatre() {$/;"	f
mod	analyser/references.inc	/^        $mod = getModifierNodeWithKeyterm($item,"insaltire");$/;"	v
mod	analyser/utilities.inc	/^  $mod = $dom->createElement('modifier');$/;"	v
mod	parser/english/grammar.inc	/^                        $mod = $this->schema->makeMod(languageDB::NUMBER, $number,$/;"	v
mod	parser/english/grammar.inc	/^                $mod = $this->schema->makeMod(languageDB::NUMBER,$/;"	v
mod	parser/english/grammar.inc	/^                $mod = $this->schema->makeMod(languageDB::VOIDED, null, $keyterm, self::tokens(), self::lineNo());$/;"	v
mod	parser/english/grammar.inc	/^            $mod = $this->schema->makeMod(blazonML::A_LINETYPE, null, $keyterm, self::tokens(), self::lineNo());$/;"	v
mod	parser/english/grammar.inc	/^            $mod = $this->schema->makeMod(languageDB::LINETYPE_PREFIX, null, $keyterm, self::tokens(), self::lineNo());$/;"	v
mod	parser/english/grammar.inc	/^            $mod = $this->schema->makeMod(languageDB::NUMBER, $number,$/;"	v
mod	parser/english/grammar.inc	/^        $mod = $this->schema->makeMod(languageDB::COTTICE_MODS, $num, 'cotticing', self::tokens(), self::lineNo());$/;"	v
mod	parser/english/grammar.inc	/^        $mod = $this->schema->makeMod(languageDB::WORD_ON, null, "on", null, null);$/;"	v
mod	parser/english/grammar.inc	/^        $mod = null;$/;"	v
mod	parser/utilities.inc	/^    $mod = self::makeNode(self::E_MODIFIER, array ( self::A_TYPE => $type, self::A_PARAM => $value, self::A_KEYTERM => $keyterm ), $tokens, $lineNo );$/;"	v
mod	svg/ordinary.inc	/^	$mod = createModifierNode('div2ord',$type);$/;"	v
mod	svg/treatments/tartan.inc	/^        $mod = $child->firstChild;$/;"	v
mod2	parser/english/grammar.inc	/^                $mod2 = $this->schema->makeMod(languageDB::LINETYPE_PREFIX, null, $keyterm, self::tokens(), self::lineNo());$/;"	v
modList	svg/getcharge.inc	/^      $modList = featuresThatAreAlsoMods($node);$/;"	v
modded	svg/charges/annulet/annulet.inc	/^    $modded = "-$aMod"; \/\/ only use first mod$/;"	v
modded	svg/charges/annulet/annulet.inc	/^    $modded = "-concentric";$/;"	v
modded	svg/charges/annulet/annulet.inc	/^$modded = '';$/;"	v
modified	svg/ordinary.inc	/^            $modified = $compiled;$/;"	v
modified	svg/ordinary.inc	/^            $modified = new MutableShape();$/;"	v
modifier	parser/english/grammar.inc	/^        $modifier = $this->schema->makeMod(languageDB::CROWN_MODS, $crownType, $modifierType, self::tokens(), self::lineNo());$/;"	v
modifier	svg/divisions/quarterly.inc	/^$modifier = getModifierByType($node, 'linetype', false);$/;"	v
modifier	svg/getcharge.inc	/^                    $modifier = $child->getAttribute('keyterm');$/;"	v
modifierType	parser/english/grammar.inc	/^                    $modifierType = $crown;$/;"	v
modifierType	parser/english/grammar.inc	/^        $modifierType = '';$/;"	v
mods	parser/english/grammar.inc	/^                $mods = array_merge($mods, $adjustments);$/;"	v
mods	parser/english/grammar.inc	/^                $mods = array_merge($mods, $positions);$/;"	v
mods	parser/english/grammar.inc	/^        $mods = array();$/;"	v
mods	svg/ordinaries/bar.inc	/^  $mods = array_pad(array(), $num, $main_linetype );$/;"	v
moreInput	parser/grammar.inc	/^  protected function moreInput() { return $this->tokenList->moreInput(); }$/;"	f
moreInput	parser/tokeniser.inc	/^  public function moreInput() {$/;"	f
motherNode	parser/english/grammar.inc	/^            $motherNode = $this->schema->makeNode(blazonML::E_SHIELD, array(blazonML::A_INDEX => '0'));$/;"	v
motto	parser/english/grammar.inc	/^  protected function motto() {$/;"	f
motto	svg/draw.inc	/^                            $motto = drawMotto($subNode, $layout);$/;"	v
motto	svg/draw.inc	/^    $motto = '';$/;"	v
mottoNode	parser/english/grammar.inc	/^    $mottoNode = $this->schema->makeNode(blazonML::E_MOTTO, array ($/;"	v
move	svg/linetypes.inc	/^    function move($x, $y)$/;"	f
move_to	svg/bezier.inc	/^    function move_to()$/;"	f
mult	svg/ordinaries/bend-helper.inc	/^    $mult = $sinister ? 1 : -1;$/;"	v
multi_split	svg/bezier.inc	/^    function multi_split($positions)$/;"	f
multiplied	svg/transform.inc	/^    function multiplied(TransformMatrix $other): TransformMatrix$/;"	f
multiplier	randomblazon.php	/^    $multiplier = $upper - $lower + 1;$/;"	v
multiplier	svg/svgtools.inc	/^          $multiplier = ($strokeWidth != null) ? $strokeWidth : rgb('stroke-width');$/;"	v
multipliers	analyser/utilities.inc	/^  $multipliers = array ( 'hundred' => 100, 'thousand' => 1000 );$/;"	v
multiply	svg/transform.inc	/^    function multiply(TransformMatrix $other)$/;"	f
myInstance	parser/utilities.inc	/^    $this->myInstance = ++self::$instance;$/;"	v
myInstance	parser/utilities.inc	/^  protected $myInstance;$/;"	v
myKey	parser/utilities.inc	/^    $myKey = $this->storageKey++;$/;"	v
myVoided	svg/ordinary.inc	/^      $myVoided = createModifierNode('ordmods', 'voided');$/;"	v
myid	svg/svgtools.inc	/^    $myid = unique($name);$/;"	v
n	svg/edges/edge_type.inc	/^                $n = max($min_flories+1, round($seg->length() \/ $feature_gap));$/;"	v
n	svg/ordinaries/mount.inc	/^    $n = ceil($peaks\/($n_rows - count($rows)));$/;"	v
n_bez	svg/ordinaries/shield_shape_utils.inc	/^        $n_bez = 2;$/;"	v
n_points	svg/bezier.inc	/^        $n_points = count($points);$/;"	v
n_rows	svg/ordinaries/mount.inc	/^$n_rows = ceil($peaks \/ $max_per_row);$/;"	v
na	svg/bezier.inc	/^        $na = ($b->y * $c->x - $b->x * $c->y) \/ $denominator;$/;"	v
name	drawshield.php	/^    $name = $options['filename'];$/;"	v
name	svg/furs.inc	/^    $name = 'pean';$/;"	v
name	svg/svgtools.inc	/^        $name = $type;$/;"	v
name	svg/svgtools.inc	/^    $name = $element->getName();$/;"	v
name	svg/treatment.inc	/^      $name = 'tartan';$/;"	v
name	svg/treatment.inc	/^  $name = $node->getAttribute('keyterm');$/;"	v
narrow_rows	svg/arrangements.inc	/^  $narrow_rows = array ($/;"	v
nearMod	parser/english/grammar.inc	/^                        $nearMod = $this->schema->makeMod(languageDB::CHARGE_NEAR, null,$/;"	v
nearMod	parser/english/grammar.inc	/^                $nearMod = $this->schema->makeMod(languageDB::CHARGE_NEAR, null,$/;"	v
nearMod	parser/english/grammar.inc	/^                $nearMod = null;$/;"	v
nearMod	parser/english/grammar.inc	/^            $nearMod = null;$/;"	v
need3Tinc	parser/english/grammar.inc	/^    $need3Tinc = array ( 'per-pall', 'per-pall-arrondi', 'tierced-in-pale',$/;"	v
negative	parser/matcher.inc	/^        $negative = true;$/;"	v
negative	parser/matcher.inc	/^      $negative = false;$/;"	v
newBlue	svg/tinctures.inc	/^    $newBlue = (int)($blue * (1 - $factor));$/;"	v
newBlue	svg/tinctures.inc	/^    $newBlue = (int)($blue + (255 - $blue) * $factor);$/;"	v
newCPEnd	svg/pathtools.inc	/^          $newCPEnd = sprintf( '%.4g,%.4g ', ($cpStartX - $endX),($cpStartY - $endY));$/;"	v
newCPStart	svg/pathtools.inc	/^          $newCPStart = sprintf( '%.4g,%.4g ', ($cpEndX - $endX),($cpEndY - $endY));$/;"	v
newCenter	svg/arrangements.inc	/^                $newCenter = new ShieldPos( $layout->size->width * $adjCenterX, $layout->size->height * $adjCenterY);$/;"	v
newDom	drawshield.php	/^        $newDom = new DOMDocument();$/;"	v
newEnd	svg/pathtools.inc	/^          $newEnd = sprintf( '%.4g,%.4g ', ($endX * -1),($endY * -1));$/;"	v
newGreen	svg/tinctures.inc	/^    $newGreen = (int)($green * (1 - $factor));$/;"	v
newGreen	svg/tinctures.inc	/^    $newGreen = (int)($green + (255 - $green) * $factor);$/;"	v
newOrder	analyser/references.inc	/^            $newOrder = $newOrders[$newOrder];$/;"	v
newOrder	analyser/references.inc	/^        $newOrder = (int)$node->getAttribute('order');$/;"	v
newOrders	analyser/references.inc	/^            $newOrders = array ( 4,4,4,4,4,5,6,8,8,9,16,16,16,16,16,16,16,20,20,20,20,$/;"	v
newPath	svg/pathtools.inc	/^        $newPath =   sprintf('a%.4g,%.4g %.4g,%d,%d %.4g,%.4g',$rx,$ry, $rot,$arc,$swap,($x * -1),($y * -1)) . $newPath;$/;"	v
newPath	svg/pathtools.inc	/^        $newPath =  sprintf('a%.4g,%.4g %.4g,%d,%d %.4g,%.4g', $rx,$ry, $rot,$arc,$swap, $x,$y);$/;"	v
newPath	svg/pathtools.inc	/^        $newPath =  sprintf('a%.4g,%.4g %.4g,%d,%d %.4g,%.4g', $rx,$ry,$rot,$arc,$swap, ($x - $curX),($y - $curY));$/;"	v
newPath	svg/pathtools.inc	/^        $newPath = $tempPath . $newPath;$/;"	v
newPath	svg/pathtools.inc	/^        $newPath = sprintf('h%.4g',($x * -1)) . $newPath;$/;"	v
newPath	svg/pathtools.inc	/^        $newPath = sprintf('v%.4g',($y * -1)) . $newPath;$/;"	v
newPath	svg/pathtools.inc	/^  $newPath = '';$/;"	v
newPlacement	svg/arrangements.inc	/^       $newPlacement = rtrim($newPlacement,':') . '\/';$/;"	v
newPlacement	svg/arrangements.inc	/^     $newPlacement = '';$/;"	v
newPlacement	svg/arrangements.inc	/^     $newPlacement = rtrim($newPlacement,'\/');$/;"	v
newPosition	parser/english/grammar.inc	/^                            $newPosition = 'inQ1';$/;"	v
newPosition	parser/english/grammar.inc	/^                            $newPosition = 'inQ2';$/;"	v
newPosition	parser/english/grammar.inc	/^                            $newPosition = 'inQ3';$/;"	v
newPosition	parser/english/grammar.inc	/^                            $newPosition = 'inQ4';$/;"	v
newPosition	parser/english/grammar.inc	/^                            $newPosition = 'ineachQ13';$/;"	v
newPosition	parser/english/grammar.inc	/^                            $newPosition = 'ineachQ24';$/;"	v
newPosition	parser/english/grammar.inc	/^                    $newPosition = null;$/;"	v
newRed	svg/tinctures.inc	/^    $newRed = (int)($red * (1 - $factor));$/;"	v
newRed	svg/tinctures.inc	/^    $newRed = (int)($red + (255 - $red) * $factor);$/;"	v
newSize	svg/getcharge.inc	/^    $newSize = (max($width,$height)) * $enlargement;$/;"	v
newString	randomblazon.php	/^    $newString = '';$/;"	v
newValue	analyser/utilities.inc	/^  $newValue = $curValue . $param . '=' . (($value) ? urlencode($value) : '1');$/;"	v
newValue	svg/charges/characters/digit.inc	/^    $newValue = words2digits($value);$/;"	v
newValue	svg/charges/sports/number.inc	/^$newValue = words2digits($value);$/;"	v
newX	svg/pathtools.inc	/^            $newX = $numbers[$j] * -1;$/;"	v
newX	svg/pathtools.inc	/^            $newX = $numbers[$j];$/;"	v
newX	svg/pathtools.inc	/^          $newX = $numbers[$j] * -1;$/;"	v
newX	svg/pathtools.inc	/^          $newX = $numbers[$j];$/;"	v
newY	svg/pathtools.inc	/^            $newY = $numbers[$j+1] * -1;$/;"	v
newY	svg/pathtools.inc	/^            $newY = $numbers[$j+1];$/;"	v
newY	svg/pathtools.inc	/^          $newY = $numbers[$j+1] * -1;$/;"	v
newY	svg/pathtools.inc	/^          $newY = $numbers[$j+1];$/;"	v
new_args	svg/bezier.inc	/^            $new_args = $args;$/;"	v
new_args	svg/bezier.inc	/^            $new_args = [];$/;"	v
new_bez	svg/bezier.inc	/^            $new_bez = new PolyBezier();$/;"	v
new_div	svg/tinctures.inc	/^                        $new_div = makeDivision( $data->type_node, $layout );$/;"	v
new_div	svg/tinctures.inc	/^                    $new_div = makeDivision( $data->type_node, $layout );$/;"	v
new_layout	svg/getcharge.inc	/^  $new_layout = new ShieldLayout(new ShieldSize(1000, 1000), "square", null, null, false);$/;"	v
new_mod	analyser/references.inc	/^      $new_mod = createModifierNode('chargemod','reversed');$/;"	v
new_ord	svg/getcharge.inc	/^      $new_ord = makeOrdinary( $chargeToAdd, $new_layout );$/;"	v
new_ord	svg/ordinary.inc	/^            $new_ord = makeOrdinary($onObject, $layout);$/;"	v
new_p_left	svg/bezier.inc	/^            $new_p_left = $new_p_right = new BezierPoint($inter);$/;"	v
new_p_left	svg/bezier.inc	/^            $new_p_left = new BezierPoint($l[1]);$/;"	v
new_p_right	svg/bezier.inc	/^            $new_p_right = new BezierPoint($r[0]);$/;"	v
new_path_if_needed	svg/bezier.inc	/^    private function new_path_if_needed()$/;"	f
new_shape	svg/ordinary.inc	/^        $new_shape = new MutableShape();$/;"	v
new_size	svg/shield.inc	/^        $new_size = new ShieldSize($layout->size->width, $layout->size->height - $layout->chief->size->height);$/;"	v
next	svg/linetypes.inc	/^    $next = ($i+1)%$numEdges;$/;"	v
next	svg/linetypes.inc	/^    $next = ($i+1)%$numSegments;$/;"	v
next	svg/linetypes.inc	/^    function next()$/;"	f
nextDir	svg/linetypes.inc	/^    $nextDir = $shape[$next]['dir'];$/;"	v
node	analyser/references.inc	/^        $node = $list[0];$/;"	v
node	analyser/utilities.inc	/^    $node = $xpath->query('\/\/*[@ID="' . $idRef . '"]')->item(0);$/;"	v
node	parser/english/grammar.inc	/^                    $node = $missing;$/;"	v
node	parser/english/grammar.inc	/^                    $node = $this->foundColours[$numColours - 1 ];$/;"	v
node	parser/english/grammar.inc	/^                    $node = $this->foundColours[$refDist];$/;"	v
node	parser/english/grammar.inc	/^                    $node = $this->foundTinctures[$numTinctures - 1];$/;"	v
node	parser/english/grammar.inc	/^                    $node = $this->schema->makeNode($elementName, array($/;"	v
node	parser/english/grammar.inc	/^                $node = null; \/\/ discard existing (destroy objects)$/;"	v
node	parser/english/grammar.inc	/^            $node = $this->schema->makeNode(blazonML::E_SHIELD, array(blazonML::A_INDEX => '0'));$/;"	v
node	parser/english/grammar.inc	/^            $node = $this->schema->makeNode(blazonML::E_SHIELD,$/;"	v
node	parser/english/grammar.inc	/^            $node = null;$/;"	v
node	parser/english/grammar.inc	/^            $node = self::shield();$/;"	v
node	parser/english/grammar.inc	/^        $node = $this->schema->makeNode(blazonML::E_OBJECTS);$/;"	v
node	parser/english/grammar.inc	/^        $node = $this->schema->makeNode(blazonML::E_TINCTURE, array(blazonML::A_INDEX => '1',$/;"	v
node	parser/english/grammar.inc	/^        $node = $this->schema->makeNode(blazonML::E_TREATMENT,$/;"	v
node	parser/english/grammar.inc	/^        $node = null;$/;"	v
node	parser/english/grammar.inc	/^      $node = $this->schema->makeNode(blazonML::E_DIVISION,array(blazonML::A_KEYTERM => $keyterm), self::tokens(), self::lineNo());$/;"	v
node	parser/english/grammar.inc	/^    $node = $this->schema->makeNode(blazonML::E_TINCTURE, array(blazonML::A_INDEX => '1',$/;"	v
node	parser/english/grammar.inc	/^    $node = $this->schema->makeNode(blazonML::E_TREATMENT, array(blazonML::A_KEYTERM => $keyterm), self::tokens(), self::lineNo());$/;"	v
node	parser/english/grammar.inc	/^    $node = null;$/;"	v
node	parser/utilities.inc	/^    $node = parent::createElement($element);$/;"	v
node	svg/arrangements.inc	/^    $node = null;$/;"	v
node	svg/shield.inc	/^    $node = $dom->getElementById($node->getAttribute('IDREF'))->cloneNode(true);$/;"	v
node	svg/tinctures.inc	/^        $this->node = resolveReference($tinctureNode);$/;"	v
node1	parser/english/grammar.inc	/^            $node1 = $this->schema->makeNode(blazonML::E_SHIELD);$/;"	v
node1	parser/english/grammar.inc	/^        $node1 = null;$/;"	v
node2	parser/english/grammar.inc	/^                $node2 = $this->schema->makeNode(blazonML::E_SHIELD);$/;"	v
node2	parser/english/grammar.inc	/^            $node2 = null;$/;"	v
nodeList	analyser/references.inc	/^      $nodeList = $this->xpath->query($ref[0]);$/;"	v
nodeList	analyser/references.inc	/^    $nodeList = $this->xpath->query("\/\/charge[@number='1' and modifier\/@keyterm='insaltire']");$/;"	v
nodeList	analyser/references.inc	/^    $nodeList = $this->xpath->query("\/\/complex");$/;"	v
nodeList	analyser/references.inc	/^    $nodeList = $this->xpath->query("\/\/shield");$/;"	v
nodeList	analyser/references.inc	/^    $nodeList = $this->xpath->query("\/\/treatment[@keyterm='grady']");$/;"	v
nodeList	analyser/references.inc	/^    $nodeList = $this->xpath->query('\/\/charge[@keyterm="special\/same"]');$/;"	v
nodeList	analyser/references.inc	/^    $nodeList = $this->xpath->query('\/\/charge[@number="asmany"]');$/;"	v
nodeList	analyser/references.inc	/^    $nodeList = $this->xpath->query('\/\/charge\/modifier[@keyterm="counterpassant"]');$/;"	v
nodeList	analyser/references.inc	/^    $nodeList = $this->xpath->query('\/\/charge\/modifier[@keyterm="likewise"]');$/;"	v
nodeList	analyser/references.inc	/^    $nodeList = $this->xpath->query('\/\/missing[parent::shield]');$/;"	v
nodeList	analyser/references.inc	/^    $nodeList = $this->xpath->query('\/\/modifier[@keyterm="within" and parent::ordinary and child::missing]');$/;"	v
nodeList	analyser/references.inc	/^    $nodeList = $this->xpath->query('\/\/tincture[@origin="pending"]');$/;"	v
nodes	parser/parser.inc	/^    $nodes = $this->grammar->readGrammar($this->tokenList);$/;"	v
nodes	svg/draw.inc	/^                $nodes = array_reverse(iterator_to_array($xpath->evaluate('\/\/*') ) );$/;"	v
norm_factor	svg/quartering.inc	/^        $norm_factor = $qsize->normalize_factor();$/;"	v
norm_factor	svg/quartering.inc	/^    $norm_factor = $side_size->normalize_factor();$/;"	v
normal	svg/bezier.inc	/^    function normal()$/;"	f
normal	svg/edges/edge_type.inc	/^        $normal = new ShieldPos(cos($normal_angle), sin($normal_angle));$/;"	v
normal_angle	svg/bezier.inc	/^        $normal_angle = $angle - M_PI\/2;$/;"	v
normal_angle	svg/edges/edge_type.inc	/^        $normal_angle = $angle + M_PI\/2;$/;"	v
normalize_factor	svg/size.inc	/^    function normalize_factor()$/;"	f
normalized	svg/edges/edge_type.inc	/^    protected function normalized(PolyBezier $shape)$/;"	f
not_quarters	parser/english/grammar.inc	/^            $not_quarters = substr($marshall, 0, 4) == "per-";$/;"	v
notdef	svg/getwords.inc	/^                    $notdef = $possible;$/;"	v
notdef	svg/getwords.inc	/^        $notdef = null;$/;"	v
note	drawshield.php	/^      $note = $dom->createComment("Debug information - parser stage.\\n(Did you do SHIFT + 'Save as File' by accident?)");$/;"	v
note	drawshield.php	/^      $note = $dom->createComment("Debug information - references stage.\\n(Did you do SHIFT + 'Save as File' by accident?)");$/;"	v
notesNode	parser/grammar.inc	/^          $this->notesNode = $this->schema->makeNode(blazonML::E_INSTRUCTIONS);$/;"	v
notesNode	parser/grammar.inc	/^  protected $notesNode = null;$/;"	v
num	parser/english/grammar.inc	/^            $num = self::find(languageDB::NUMBER);$/;"	v
num	parser/english/grammar.inc	/^          $num = $this->phraseMatcher->getValue();$/;"	v
num	parser/english/grammar.inc	/^        $num = null;$/;"	v
num	svg/charges/annulet/annulet.inc	/^$num = $node->getAttribute('number');$/;"	v
num	svg/charges/furnishings/banner.inc	/^  $num = $node->getAttribute('number');$/;"	v
num	svg/charges/tools/flail.inc	/^  $num = $node->getAttribute('number');$/;"	v
num	svg/charges/tree-fruit/palm.inc	/^  $num = $node->getAttribute('number');$/;"	v
num	svg/divisions/chevronny.inc	/^$num = $num_of \/ 2;$/;"	v
num	svg/ordinaries/bar.inc	/^  $num = intval($node->getAttribute('number'));$/;"	v
num	svg/ordinaries/chevronel.inc	/^$num = $node->getAttribute('number');$/;"	v
num	svg/ordinaries/pile.inc	/^$num = $node->getAttribute('number');$/;"	v
numChars	svg/charges/characters/digit.inc	/^    $numChars = strlen($value);$/;"	v
numChars	svg/charges/characters/letter.inc	/^$numChars = strlen($value);$/;"	v
numChars	svg/charges/sports/number.inc	/^$numChars = strlen($value);$/;"	v
numColours	parser/english/grammar.inc	/^        $numColours = count($this->foundColours);$/;"	v
numColours	svg/treatment.inc	/^  $numColours= count($colours);$/;"	v
numCols	svg/achievement.inc	/^            $numCols = count($colours);$/;"	v
numEdges	svg/linetypes.inc	/^  $numEdges = count($edges);$/;"	v
numEntryParts	svg/placement-data.inc	/^      $numEntryParts = count($entryParts);$/;"	v
numFilenameParts	svg/getcharge.inc	/^    $numFilenameParts = count($filenameParts) - 1; \/\/ last entry is 'svg', so ignore it$/;"	v
numRequiredParts	svg/getcharge.inc	/^  $numRequiredParts = count($requiredParts);$/;"	v
numRequiredParts	svg/placement-data.inc	/^    $numRequiredParts = count($requiredParts);$/;"	v
numSegments	svg/linetypes.inc	/^  $numSegments = count($shape);$/;"	v
numStr	svg/pathtools.inc	/^        $numStr = '';$/;"	v
numStr	svg/pathtools.inc	/^  $numStr = '';$/;"	v
numThreads	svg/treatments/tartan.inc	/^    $numThreads = 2;$/;"	v
numThreads	svg/treatments/tartan.inc	/^$numThreads = count($tartanPattern);$/;"	v
numTinctures	parser/english/grammar.inc	/^        $numTinctures = count($this->foundTinctures);$/;"	v
num_of	svg/charges/celestial/star.inc	/^    $num_of = 10;$/;"	v
num_of	svg/charges/celestial/star.inc	/^    $num_of = 6;$/;"	v
num_of	svg/charges/celestial/star.inc	/^$num_of = getModifierValueByKeyterm($node, 'of-num', true);$/;"	v
num_of	svg/charges/label/label.inc	/^  $num_of = 3;$/;"	v
num_of	svg/charges/label/label.inc	/^  $num_of = 7;$/;"	v
num_of	svg/charges/label/label.inc	/^$num_of = getModifierValueByKeyterm($node, 'of-num', true);$/;"	v
num_of	svg/charges/mullet/mullet.inc	/^        $num_of = 5;$/;"	v
num_of	svg/charges/mullet/mullet.inc	/^$num_of = getModifierValueByKeyterm($node, 'of-num', true);$/;"	v
num_of	svg/divisions/bendy.inc	/^    $num_of = 24;$/;"	v
num_of	svg/divisions/bendy.inc	/^    $num_of = 4;$/;"	v
num_of	svg/divisions/chevronny.inc	/^$num_of = getModifierValueByKeyterm($node, 'ofnum', false);$/;"	v
num_of	svg/divisions/gyronny.inc	/^    $num_of = 6;$/;"	v
num_of	svg/divisions/gyronny.inc	/^    $num_of = 8;$/;"	v
num_of	svg/divisions/gyronny.inc	/^$num_of = (int)getModifierValueByKeyterm($node, 'ofnum', false);$/;"	v
num_of	svg/ordinaries/mount.inc	/^    $num_of = $rows[$rown];$/;"	v
num_of	svg/placecharge.inc	/^  $num_of = $node->getAttribute('number');$/;"	v
num_of_list	svg/placecharge.inc	/^  $num_of_list = explode('\/', $placement);$/;"	v
num_rows	svg/arrangements.inc	/^  $num_rows = count($row_list);$/;"	v
num_tokens	parser/tokeniser.inc	/^    $this->num_tokens = count($this->words);$/;"	v
num_tokens	parser/tokeniser.inc	/^  public $num_tokens;$/;"	v
number	analyser/utilities.inc	/^  $number = $node->getAttribute('number');$/;"	v
number	parser/english/grammar.inc	/^                        $number = '';$/;"	v
number	parser/english/grammar.inc	/^        $number = '';$/;"	v
number	parser/english/grammar.inc	/^  protected function number() {$/;"	f
number	randomblazon.php	/^function number($lower, $upper) {$/;"	f
number	svg/arrangements.inc	/^    $number = $item->getAttribute('number');$/;"	v
number	svg/arrangements.inc	/^  $number = getNumberOfCharges($node);$/;"	v
number	svg/ordinaries/chevron.inc	/^    $number = (int)$node->getAttribute('number');$/;"	v
number	svg/pathtools.inc	/^          $number = 0.0;$/;"	v
number	svg/pathtools.inc	/^        $number = (float) $numStr;$/;"	v
number	svg/pathtools.inc	/^      $number = 0.0;$/;"	v
number	svg/pathtools.inc	/^    $number = (float) $numStr;$/;"	v
numberCottices	svg/ordinaries/bar.inc	/^      $numberCottices = $cot_node->getAttribute('value');$/;"	v
numberCottices	svg/ordinary.inc	/^        $numberCottices = $cot_node->getAttribute('value');$/;"	v
numberGroups	svg/arrangements.inc	/^     $numberGroups = explode('\/',$placement);$/;"	v
numberStated	parser/english/grammar.inc	/^                $numberStated = self::find(languageDB::NUMBER); \/\/ But ignore it and count the quarters we are given$/;"	v
numberStated	parser/english/grammar.inc	/^        $numberStated = 0;$/;"	v
numbers	svg/arrangements.inc	/^       $numbers = explode(':',$numberGroup);$/;"	v
numbers	svg/charges/characters/digit.inc	/^    $numbers = array ( 'one' => '1', 'two' => '2', 'three' => '3', 'four' => '4', 'five' => '5',$/;"	v
numbers	svg/pathtools.inc	/^      $numbers = getNumbers( $chunks[$i+1] );$/;"	v
numbers	svg/pathtools.inc	/^      $numbers = getNumbers($chunks[$i+1]);$/;"	v
numbers	svg/pathtools.inc	/^  $numbers = array();$/;"	v
numerator	parser/utilities.inc	/^    $numerator = intval($arParts[0]);$/;"	v
numwords	randomblazon.php	/^    $numwords = count($words);$/;"	v
object	analyser/references.inc	/^      $object = $item->parentNode->parentNode;$/;"	v
objects	parser/english/grammar.inc	/^    protected function objects()$/;"	f
objects	svg/shield.inc	/^                $objects = $kid;$/;"	v
objects	svg/shield.inc	/^    $objects = null;$/;"	v
odd	svg/pathtools.inc	/^          $odd = !$odd;$/;"	v
odd	svg/pathtools.inc	/^        $odd = true;$/;"	v
ofNum	parser/english/grammar.inc	/^        $ofNum = 10;$/;"	v
ofNum	parser/english/grammar.inc	/^        $ofNum = 5;$/;"	v
of_num	svg/charges/annulet/annulet.inc	/^  $of_num = "-of$num";$/;"	v
of_num	svg/charges/annulet/annulet.inc	/^  $of_num = '-of' . getModifierValueByKeyterm($node, 'of-num');$/;"	v
of_num	svg/charges/annulet/annulet.inc	/^$of_num = '';$/;"	v
off	svg/arrangements.inc	/^        $off = $height \/ 2;$/;"	v
off	svg/arrangements.inc	/^    $off = $chev_width \/ M_SQRT2 * 1.1;$/;"	v
off	svg/bezier.inc	/^            $off = $this->offset_side($first->pos, $points[1]->pos, $amount);$/;"	v
off	svg/bezier.inc	/^            $off = $this->offset_side($points[$n_points - 2]->pos, $last->pos, $amount);$/;"	v
off	svg/ordinary.inc	/^            $off = $cotiseSize;$/;"	v
off	svg/ordinary.inc	/^            $off = $path->offset_copy(-$offsetSize);$/;"	v
off	svg/shield.inc	/^        $off = $layout_chief->size->height;$/;"	v
off	svg/shield.inc	/^    $off = 0;$/;"	v
off_l	svg/arrangements.inc	/^    $off_l = $width \/ 2;$/;"	v
off_r	svg/arrangements.inc	/^    $off_r = 1 - $off_l;$/;"	v
off_y	svg/arrangements.inc	/^        $off_y = $height \/ 2;$/;"	v
offs	svg/linetypes.inc	/^    $offs = makeOffset ( $edges[0]['dir'], $adjust[1], $edges[0]['start'], $size );$/;"	v
offs	svg/linetypes.inc	/^  $offs = makeOffset ( $shape[0]['dir'], $adjust[1], $io, $size*2 );$/;"	v
offset	parser/grammar.inc	/^      $offset = $this->phraseMatcher->getTokenOffset();$/;"	v
offset	parser/tokeniser.inc	/^      $offset = $this->num_tokens - 1;$/;"	v
offset	parser/tokeniser.inc	/^      $offset = 0;$/;"	v
offset	svg/arrangements.inc	/^      $offset = ($bb_w - ($cbb_width * $row_list[$i]) - ($horiz_gap * ($row_list[$i]-1)))\/2;$/;"	v
offset	svg/charges/characters/digit.inc	/^    $offset = 0;$/;"	v
offset	svg/charges/characters/letter.inc	/^$offset = 0;$/;"	v
offset	svg/charges/sports/number.inc	/^$offset = 0;$/;"	v
offset	svg/divisions/per-bend.inc	/^  $offset = $layout->division_offset->y;$/;"	v
offset	svg/divisions/tierced-in-bend.inc	/^  $offset = $layout->center_point->y - 500;$/;"	v
offset	svg/getwords.inc	/^                    $offset = $factor * abs($this->fontInfo['underline-position']);$/;"	v
offset	svg/getwords.inc	/^                $offset = 0; $skew = 0; \/\/ these are displacements if the font slopes$/;"	v
offset	svg/linetypes.inc	/^    function offset($flag=true)$/;"	f
offset	svg/ordinaries/bend.inc	/^  $offset = 0;$/;"	v
offset	svg/tinctures.inc	/^                        $offset = $treat_data['offset'];$/;"	v
offset	svg/tinctures.inc	/^                    $offset = 0;$/;"	v
offset	svg/treatment.inc	/^    $offset = sprintf("%.3f", $offset);$/;"	v
offset	svg/treatment.inc	/^  $offset = intval((1000 % $size_x) \/ 2);$/;"	v
offsetSize	svg/ordinary.inc	/^        $offsetSize = 30;$/;"	v
offset_args	svg/bezier.inc	/^        $offset_args = [];$/;"	v
offset_comp	svg/ordinaries/bend-helper.inc	/^    $offset_comp = $offset \/ M_SQRT2;$/;"	v
offset_copy	svg/bezier.inc	/^    function offset_copy($amount, $miter_limit = 2)$/;"	f
offset_helper	svg/bezier.inc	/^    private function offset_helper(BezierPoint $p_left, BezierPoint $c, BezierPoint $p_right, $amount, $miter_limit)$/;"	f
offset_side	svg/bezier.inc	/^    private function offset_side($segment_start, $segment_finish, $amount)$/;"	f
offset_x	svg/placecharge.inc	/^    public $offset_x = 0;$/;"	v
offset_y	svg/placecharge.inc	/^    public $offset_y = 0;$/;"	v
ofnum	svg/arrangements.inc	/^        $ofnum = getModifierValueByKeyterm($divisionNode,'ofnum');$/;"	v
old_direction	svg/edges/edge_type.inc	/^                $old_direction = $direction;$/;"	v
old_ordinary	svg/ordinaries/cross-2fretty.inc	/^$old_ordinary = $ordinary;$/;"	v
old_ordinary	svg/ordinaries/cross-3fretty.inc	/^$old_ordinary = $ordinary;$/;"	v
old_ordinary	svg/ordinaries/cross-formy.inc	/^$old_ordinary = $ordinary;$/;"	v
old_ordinary	svg/ordinaries/saltire-2fretty.inc	/^$old_ordinary = $ordinary;$/;"	v
on	parser/english/grammar.inc	/^                            $on = $this->chief_on($oc);$/;"	v
on	parser/english/grammar.inc	/^                $on = null;$/;"	v
on	svg/ordinaries/orle.inc	/^    $on = createModifierNode('wordon','on');$/;"	v
onMod	parser/english/grammar.inc	/^                        $onMod = $this->schema->makeMod(languageDB::CHARGE_WITH, null,$/;"	v
onMod	parser/english/grammar.inc	/^                        $onMod = $this->schema->makeMod(languageDB::CHARGE_WITH,$/;"	v
onMod	parser/english/grammar.inc	/^                        $onMod = $this->schema->makeMod(languageDB::HOLDING,$/;"	v
onMod	parser/english/grammar.inc	/^                $onMod = $this->schema->makeMod(languageDB::CHARGE_WITH, null,$/;"	v
onMod	parser/english/grammar.inc	/^                $onMod = null; \/\/ don't need to say "on an escutcheon..." (but allow it anyway)$/;"	v
onMod	parser/english/grammar.inc	/^                $onMod = null;$/;"	v
onMod	parser/english/grammar.inc	/^            $onMod = null;$/;"	v
onObject	svg/ordinary.inc	/^    $onObject = $on_ord->firstChild;$/;"	v
onObjectSVG	svg/ordinary.inc	/^	$onObjectSVG = '';$/;"	v
onPlacement	svg/ordinary.inc	/^                    $onPlacement = calcPlace($onObject, 'h', $layout->rect_area());$/;"	v
onPlacement	svg/ordinary.inc	/^                    $onPlacement = calcPlace($onObject,$onPlacement[0],subPercent($onPlacement[1], $layout));$/;"	v
onPlacement	svg/ordinary.inc	/^                    $onPlacement = subPercent($onPlacement, $layout);$/;"	v
onPlacement	svg/ordinary.inc	/^                $onPlacement = $ord_data['chargesOn'];$/;"	v
onPlacement	svg/ordinary.inc	/^                $onPlacement = 'n'; \/\/ error if no placement for ordinary with charges on it, but let placeCharges handle it$/;"	v
on_center	svg/ordinaries/plain-cross.inc	/^    $on_center = new ShieldRect(clone $layout->center_point, $on_size);$/;"	v
on_center	svg/ordinaries/saltire.inc	/^    $on_center = new ShieldRect(clone $layout->center_point, $on_size);$/;"	v
on_charge_placement	svg/ordinaries/shield_shape_utils.inc	/^    protected function on_charge_placement(ShieldLayout $layout, $margin, $width)$/;"	f
on_compony	svg/ordinaries/shield_shape_utils.inc	/^    protected function on_compony(ShieldLayout $layout, $inset, $width, MutableShape $builder)$/;"	f
on_list	parser/english/grammar.inc	/^        $on_list = $xpath->query("modifier[@type='wordon']", $chief_ordinary);$/;"	v
on_margin	svg/ordinaries/quarter.inc	/^$on_margin = 50;$/;"	v
on_ord	svg/ordinary.inc	/^      $on_ord = null;$/;"	v
on_parse_d	svg/bezier.inc	/^    private function on_parse_d($d, ?MutableShape $bezier = null) : MutableShape$/;"	f
on_size	svg/ordinaries/plain-cross.inc	/^    $on_size = new ShieldSize($width, $width);$/;"	v
on_size	svg/ordinaries/saltire.inc	/^    $on_size = new ShieldSize($width, $width);$/;"	v
on_svg_path	svg/ordinaries/shield_shape_utils.inc	/^    protected function on_svg_path(ShieldLayout $layout, $inset, $reversed, MutableShape $builder)$/;"	f
on_svg_path_dexter	svg/ordinaries/shield_shape_utils.inc	/^    protected function on_svg_path_dexter(ShieldLayout $layout, $inset, $reversed, MutableShape $builder)$/;"	f
on_svg_path_dexter	svg/ordinaries/shield_shape_utils.inc	/^    protected function on_svg_path_dexter(ShieldLayout $layout, $inset, $reversed, MutableShape $builder, $margin_top)$/;"	f
on_svg_path_full	svg/ordinaries/shield_shape_utils.inc	/^    protected function on_svg_path_full(ShieldLayout $layout, $inset, $reversed, MutableShape $builder)$/;"	f
on_svg_path_quarter	svg/ordinaries/shield_shape_utils.inc	/^    protected function on_svg_path_quarter(ShieldLayout $layout, $inset, $reversed, MutableShape $builder, $quarter)$/;"	f
on_svg_path_sinister	svg/ordinaries/shield_shape_utils.inc	/^    protected function on_svg_path_sinister(ShieldLayout $layout, $inset, $reversed, MutableShape $builder)$/;"	f
on_svg_path_sinister	svg/ordinaries/shield_shape_utils.inc	/^    protected function on_svg_path_sinister(ShieldLayout $layout, $inset, $reversed, MutableShape $builder, $margin_top)$/;"	f
onreadystatechange	demopage.php	/^            xmlhttp.onreadystatechange = function()$/;"	j
onreadystatechange	shieldcommon.js	/^    xmlhttp.onreadystatechange = function() {$/;"	j
opt3Tinc	parser/english/grammar.inc	/^    $opt3Tinc = array ( 'per-pile', );$/;"	v
opt4Tinc	parser/english/grammar.inc	/^    $opt4Tinc = array ( 'quarterly', 'quarterly-per-fess', 'quarterly-per-pale', 'per-saltire' );$/;"	v
option	svg/getwords.inc	/^    public function option($name, $value = true) {$/;"	f
optional	parser/matcher.inc	/^        $optional = true;$/;"	v
optional	parser/matcher.inc	/^      $optional = false;$/;"	v
options	drawshield.php	/^$options = array();$/;"	v
options	quickimage.php	/^$options = array();$/;"	v
options	randomblazon.php	/^$options = $defaults;$/;"	v
options	randomblazon.php	/^$options = array_merge($options, $args);$/;"	v
options	version.inc	/^$options = array($/;"	v
orange	svg/proper.inc	/^  static $orange;$/;"	v
ord	parser/english/grammar.inc	/^        $ord = $this->schema->makeNode(blazonML::E_ORDINARY);$/;"	v
ordChgs	parser/english/grammar.inc	/^            $ordChgs = self::objects();$/;"	v
ordNum	parser/english/grammar.inc	/^        $ordNum = self::find(languageDB::QUANTITY);$/;"	v
ord_data	svg/ordinary.inc	/^        $ord_data = getSpecial('bordures', $node, $layout);$/;"	v
ord_data	svg/ordinary.inc	/^        $ord_data = includeOrdinary( $node, $layout );$/;"	v
ord_type	svg/treatments/checky.inc	/^        $ord_type = $parent->getAttribute('keyterm');$/;"	v
order	parser/english/grammar.inc	/^                $order = $numberStated;$/;"	v
order	parser/english/grammar.inc	/^                $order = 4;$/;"	v
order	parser/english/grammar.inc	/^            $order = $highest;$/;"	v
ordinary	analyser/references.inc	/^        $ordinary = $object->getAttribute("keyterm");$/;"	v
ordinary	parser/english/grammar.inc	/^    protected function ordinary()$/;"	f
ordinary	svg/arrangements.inc	/^    $ordinary = [];$/;"	v
ordinary	svg/ordinaries/chevron-couched.inc	/^$ordinary = array ($/;"	v
ordinary	svg/ordinaries/cross-2fretty.inc	/^$ordinary = $old_ordinary;$/;"	v
ordinary	svg/ordinaries/cross-3fretty.inc	/^$ordinary = $old_ordinary;$/;"	v
ordinary	svg/ordinaries/cross-formy.inc	/^$ordinary = $old_ordinary;$/;"	v
ordinary	svg/ordinaries/saltire-2fretty.inc	/^$ordinary = $old_ordinary;$/;"	v
ordinary	svg/ordinary.inc	/^  $ordinary = array ();$/;"	v
ordinaryNode	analyser/references.inc	/^      $ordinaryNode = $modifierNode->parentNode;$/;"	v
ordinaryText	randomblazon.php	/^                    $ordinaryText = expand("on > # $ordinaryText < # 4 {charge-xn}");$/;"	v
ordinaryText	randomblazon.php	/^                    $ordinaryText = expand("on > # $ordinaryText < # {2-4} {charge-xn}");$/;"	v
ordinaryText	randomblazon.php	/^                    $ordinaryText = expand("on > # $ordinaryText < # {charge-x1} ");$/;"	v
ordinaryText	randomblazon.php	/^        $ordinaryText = expand(randomly($ordinaryTypes));$/;"	v
ordinaryType	svg/ordinary.inc	/^  $ordinaryType = $node->getAttribute('keyterm');$/;"	v
ordinaryTypes	randomblazon.php	/^        $ordinaryTypes = [];$/;"	v
ordinary_width	svg/divisions/tierced-in-chevron.inc	/^    $ordinary_width = chevron_width($layout, 1);;$/;"	v
orientation	svg/placecharge.inc	/^            $orientation = $keyterm;$/;"	v
orientation	svg/placecharge.inc	/^  $orientation = null;$/;"	v
origWords	parser/tokeniser.inc	/^    $this->origWords = $this->words;$/;"	v
origin	svg/bezier.inc	/^            $origin = new ShieldPos(0, 0);$/;"	v
origin	svg/size.inc	/^            $origin = new ShieldPos(0, 0);$/;"	v
orle_col	svg/ordinaries/orle.inc	/^      $orle_col = createColourNode('argent');$/;"	v
orle_col	svg/ordinaries/orle.inc	/^      $orle_col = createColourNode('or');$/;"	v
orle_col	svg/ordinaries/orle.inc	/^      $orle_col = createColourNode('sable');$/;"	v
orle_col	svg/ordinaries/orle.inc	/^  $orle_col = null;$/;"	v
orles	svg/arrangements.inc	/^       static $orles = array ($/;"	v
otherArray	svg/getcharge.inc	/^      $otherArray = array_diff(array_keys(getModifiersByTypeAsArray($node,'chargemod')), $ignoreMods);$/;"	v
otherCharge	parser/english/grammar.inc	/^                        $otherCharge = $currentCharge;$/;"	v
otherCharge	parser/english/grammar.inc	/^                    $otherCharge = $this->schema->makeNode(blazonML::E_MISSING);$/;"	v
otherMods	svg/getcharge.inc	/^      $otherMods = implode('-',$otherArray);$/;"	v
outer	svg/ordinary.inc	/^                $outer = $path->offset_copy($cotiseSize + $off);$/;"	v
outerEdge	svg/ordinaries/flag/canton.inc	/^$outerEdge = $qSize - 40;$/;"	v
outerEdge	svg/ordinaries/flag/quarter.inc	/^$outerEdge = $qSize - 40;$/;"	v
outerEdge	svg/ordinaries/flag/square-canton.inc	/^$outerEdge = $qSize - 40;$/;"	v
outerSize	svg/ordinary.inc	/^  $outerSize = $cotiseSize*($num*2);$/;"	v
outerSpec	svg/ordinary.inc	/^  $outerSpec = parallelSpec ( $spec, 'o', $outerSize );$/;"	v
outline	svg/draw.inc	/^        $outline = getShape($layout);$/;"	v
outline	svg/shapes.inc	/^    	$outline = "M 329.76 3.5898 C 188.94 3.5898 167.05 126.63 7.3203 182.27 C 11.188 182.27 14.995 182.17 18.75 181.99 C 13.54 182.87 8.2393 183.62 2.8203 184.18 C 2.8203 578.48 248.8 644.19 248.8 837.95 C 248.8 877.58 238.68 885.56 238.68 929.95 C 238.68 1044.9 327.9 1196.4 499.71 1196.4 C 671.34 1196.4 760.65 1044.9 760.65 929.95 C 760.65 885.56 750.98 877.58 750.98 837.95 C 750.98 644.19 996.41 578.48 996.41 184.18 C 991 183.62 985.71 182.87 980.51 181.99 C 984.24 182.17 988.02 182.27 991.87 182.27 C 832.54 126.63 810.81 3.5898 669.75 3.5898 C 658.48 3.5898 648.1 4.5604 638.62 6.3086 L 639.57 3.6719 C 547.6 16.2 443.06 16.763 344.81 3.6719 L 345.12 4.2285 C 340.2 3.8184 335.08 3.5898 329.76 3.5898 z ";$/;"	v
outline	svg/shapes.inc	/^    	$outline = "M0.0 0.0C48.621 0.0 87.599 66.482 87.599 115.78C87.599 115.78 87.599 1029.506 87.599 1029.506C87.599 1078.906 126.65 1118.506 175.2 1118.506C175.2 1118.506 411.99 1118.506 411.99 1118.506C460.6 1118.506 499.93 1158.006 499.93 1207.406C499.93 1158.006 539.4 1118.506 588.01 1118.506C588.01 1118.506 824.73 1118.506 824.73 1118.506C873.35 1118.506 912.4 1078.906 912.4 1029.506C912.4 1029.506 912.4 115.78 912.4 115.78C912.4 66.482 951.38 0.0 1000.0 0.0C1000.0 0.0 499.93 0.0 499.93 0.0C499.93 0.0 0.0 0.0 0.0 0.0";$/;"	v
outline	svg/shapes.inc	/^    	$outline = "m 0,0 h 1000 v 1000 h -1000 z";$/;"	v
outline	svg/shapes.inc	/^    	$outline = "m 434.89,6.4293 c -85.58,0 -138.92,66.5477 -271.88,85.3307 0,72.23 -32.76,143.24 -76.704,189.99 0,0 85.504,36.75 85.504,118.03 0,122.63 -141.535,122.9 -141.535,122.9 0,0 -23.9507,45.13 -23.9507,136.55 0,209.26 155.2657,367.47 273.1557,416.17 117.88,48.8 185.7,69.5 220.77,113.8 35,-44.3 102.44,-65 220.33,-113.8 117.83,-48.7 273.1,-206.91 273.1,-416.17 0,-91.42 -23.81,-136.55 -23.81,-136.55 0,0 -141.61,0 -141.61,-122.9 0,-81.28 85.43,-118.03 85.43,-118.03 -43.94,-46.75 -76.77,-117.76 -76.7,-189.99 -132.97,-18.783 -186.32,-85.3307 -271.83,-85.3307 -48.79,0 -64.91,22.7687 -64.91,22.7687 0,0 -16.56,-22.7687 -65.36,-22.7687 z";$/;"	v
outline	svg/shapes.inc	/^    	$outline = "m 500,0 c 0,0 -500,500 -500,500 0,0 500,500 500,500 0,0 500,-500 500,-500 0,0 -500,-500 -500,-500";$/;"	v
outline	svg/shapes.inc	/^    	$outline = "m 6.7871,6.7871 v 741.3429 h 0.7951 c 0,245.7 220.7778,445.07 492.7678,445.07 272.06,0 492.86,-199.37 492.86,-445.07 h -0.87 v -741.3429 z";$/;"	v
outline	svg/shapes.inc	/^    	$outline = "m 718.31,6.5834 c -141.76,3.2295 -267.39,43.2896 -372.06,139.2766 -112.07,-62.115 -280.431,-3.85 -302.86,112.62 15.246,-9.41 33.495,-14.63 53.138,-14.63 52.852,0 95.872,39.92 95.872,89.53 0,49.54 -43.02,89.88 -95.872,89.88 -15.979,0 -31.222,-3.5 -44.416,-10.03 l 0.807,7.28 c 0,130.97 -46.5438,188.07 -46.5438,305.17 0,241.4 248.7648,467.92 499.5948,467.92 250.83,0 487.65,-212.03 487.65,-459.81 0,-189.8 -159.64,-280.71 -159.64,-462.94 0,-182.226 87.23,-247.638 87.23,-247.638 -70.81,-11.956 -138.46,-18.0715 -202.9,-16.6286 z";$/;"	v
outline	svg/shapes.inc	/^          $outline = "M 38.460938 0 L 0 40 L 40 80 L 0 120 L 40 160 L 0 200 L 40 240 L 0 280 L 40 320 L 0 360 L 40 400 L 0 440 L 40 480 L 0 520 L 40 560 L 0 600 L 40 640 L 0 680 L 40 720 L 0 760 L 40 800 L 0 840 L 40 880 L 0 920 L 40 960 L 0 1000 L 40 1040 L 0 1080 L 40 1120 L 0.21679688 1159.7832 L 0 1159.7832 L 0.10546875 1159.8945 L 0 1160 L 5.4179688 1165.418 L 38.460938 1199.7832 L 39.109375 1199.1094 L 40 1200 L 40 1198.1816 L 76.714844 1160 L 77.132812 1160 L 115.38477 1199.7832 L 153.63672 1160 L 154.05469 1160 L 192.30859 1199.7832 L 230.56055 1160 L 230.97852 1160 L 269.23047 1199.7832 L 307.48242 1160 L 307.90039 1160 L 346.1543 1199.7832 L 384.40625 1160 L 384.82422 1160 L 423.07617 1199.7832 L 461.33008 1160 L 461.74805 1160 L 500 1199.7832 L 538.25195 1160 L 538.66992 1160 L 576.92383 1199.7832 L 615.17578 1160 L 615.59375 1160 L 653.8457 1199.7832 L 692.09961 1160 L 692.51758 1160 L 730.76953 1199.7832 L 769.02148 1160 L 769.43945 1160 L 807.69141 1199.7832 L 845.94531 1160 L 846.36328 1160 L 884.61523 1199.7832 L 922.86719 1160 L 923.28516 1160 L 959.79297 1197.9668 L 959.79297 1200 L 960.78906 1199.0039 L 961.53906 1199.7832 L 1000 1159.7832 L 999.57617 1159.7832 L 960 1120.207 L 960 1119.793 L 999.79297 1080 L 960 1040.207 L 960 1039.793 L 999.79297 1000 L 960 960.20703 L 960 959.79297 L 999.79297 920 L 960 880.20703 L 960 879.79297 L 999.79297 840 L 960 800.20703 L 960 799.79297 L 999.79297 760 L 960 720.20703 L 960 719.79297 L 999.79297 680 L 960 640.20703 L 960 639.79297 L 999.79297 600 L 960 560.20703 L 960 559.79297 L 999.79297 520 L 960 480.20703 L 960 479.79297 L 999.79297 440 L 960 400.20703 L 960 399.79297 L 999.79297 360 L 960 320.20703 L 960 319.79297 L 999.79297 280 L 960 240.20703 L 960 239.79297 L 999.79297 200 L 960 160.20703 L 960 159.79297 L 999.79297 120 L 960 80.207031 L 960 79.792969 L 999.79297 40 L 1000 40 L 961.53906 0 L 960.68359 0.890625 L 959.79297 0 L 959.79297 1.8164062 L 923.07617 40 L 884.61523 0 L 846.1543 40 L 807.69141 0 L 769.23047 40 L 730.76953 0 L 692.30859 40 L 653.8457 0 L 615.38477 40 L 576.92383 0 L 538.46094 40 L 500 0 L 461.53906 40 L 423.07617 0 L 384.61523 40 L 346.1543 0 L 307.69141 40 L 269.23047 0 L 230.76953 40 L 192.30859 0 L 153.8457 40 L 115.38477 0 L 76.923828 40 L 40 1.5996094 L 40 0 L 39.214844 0.78515625 L 38.460938 0 z";$/;"	v
outline	svg/shapes.inc	/^          $outline = "M 6.129583,3.3890763 C 5.2581084,4.2524247 4.4120931,5.1429166 3.6029,6.0663699 V 46.770742 c 12.020919,7.659734 29.648399,12.964158 29.648399,25.603725 0,12.610063 -17.627684,17.919297 -29.648399,25.550217 v 30.070506 c 12.020715,7.63092 29.648399,12.94015 29.648399,25.55022 0,12.61006 -17.627684,17.91929 -29.648399,25.55021 v 30.07051 c 12.020715,7.63092 29.648399,12.94015 29.648399,25.55022 0,12.61006 -17.627684,17.91929 -29.648399,25.55021 v 30.07051 c 12.020715,7.63092 29.648399,12.94015 29.648399,25.55022 0,12.61007 -17.627684,17.91929 -29.648399,25.55021 v 30.07051 c 12.020715,7.63092 29.648399,12.94015 29.648399,25.55022 0,12.61007 -17.627684,17.91929 -29.648399,25.55021 v 30.07051 c 12.020715,7.63092 29.648399,12.94015 29.648399,25.55022 0,12.61007 -17.627684,17.91929 -29.648399,25.55022 v 30.0705 c 12.020715,7.63092 29.648399,12.94015 29.648399,25.55022 0,12.61007 -17.627684,17.91929 -29.648399,25.55022 v 30.0705 c 12.020715,7.63092 29.648399,12.94015 29.648399,25.55022 0,12.61007 -17.627684,17.91929 -29.648399,25.55022 v 30.0705 c 12.020715,7.63092 29.648399,12.94015 29.648399,25.55022 0,12.61007 -17.627684,17.91929 -29.648399,25.55022 v 30.0705 c 12.020715,7.63092 29.648399,12.94015 29.648399,25.55022 0,12.61007 -17.627684,17.9193 -29.648399,25.55022 v 30.0705 c 12.020715,7.63092 29.648399,12.94015 29.648399,25.55022 0,12.61007 -17.627684,17.9193 -29.648399,25.55022 v 30.0705 c 12.020715,7.63092 29.648399,12.94015 29.648399,25.55022 0,12.61007 -17.627684,17.9193 -29.648399,25.55022 v 30.07057 c 12.020715,7.6309 29.648399,12.94 29.648399,25.5501 0,12.6102 -17.627684,17.9193 -29.648399,25.5502 v 30.0706 c 12.020715,7.6309 29.648399,12.9401 29.648399,25.5502 0,15.3016 -14.735331,27.3784 -29.648399,35.3121 v 17.6016 c 4.0106197,5.8587 7.615487,12.6354 11.787225,18.0712 h 21.925666 c 7.520724,-13.1932 19.518593,-24.5801 33.187738,-30.3994 0.130066,-0.056 0.294022,-0.056 0.424086,0 11.044861,4.7024 16.218478,20.0427 23.46744,30.3994 h 30.688795 c 7.24896,-10.3567 12.42258,-25.697 23.46744,-30.3994 0.13007,-0.056 0.29402,-0.056 0.42409,0 11.04518,4.7023 16.21999,20.0426 23.46942,30.3994 h 30.68879 c 7.24897,-10.3567 12.42258,-25.697 23.46745,-30.3994 0.13006,-0.056 0.29402,-0.056 0.42408,0 11.04485,4.7024 16.21848,20.0427 23.46744,30.3994 h 30.6888 c 7.24895,-10.3567 12.42257,-25.697 23.46743,-30.3994 0.13007,-0.056 0.29402,-0.056 0.42409,0 11.04519,4.7023 16.21999,20.0426 23.46942,30.3994 h 30.6888 c 7.24896,-10.3567 12.42258,-25.697 23.46744,-30.3994 0.13006,-0.056 0.29402,-0.056 0.42409,0 11.04485,4.7024 16.21848,20.0427 23.46743,30.3994 h 30.6888 c 7.24942,-10.3568 12.42423,-25.6971 23.46942,-30.3994 0.13007,-0.056 0.29402,-0.056 0.42409,0 11.04485,4.7024 16.21847,20.0427 23.46743,30.3994 h 30.68881 c 7.24896,-10.3567 12.42258,-25.697 23.46743,-30.3994 0.13007,-0.056 0.29402,-0.056 0.42409,0 11.04519,4.7023 16.22,20.0426 23.46942,30.3994 h 30.6888 c 7.24895,-10.3567 12.42258,-25.697 23.46743,-30.3994 0.13007,-0.056 0.29403,-0.056 0.42409,0 11.04486,4.7024 16.21848,20.0427 23.46744,30.3994 h 30.6888 c 7.24943,-10.3568 12.42423,-25.6971 23.46942,-30.3994 0.13007,-0.056 0.29402,-0.056 0.42409,0 11.04486,4.7024 16.21848,20.0427 23.46743,30.3994 h 30.6888 c 7.24896,-10.3567 12.42259,-25.697 23.46744,-30.3994 0.13006,-0.056 0.29402,-0.056 0.42408,0 11.04487,4.7024 16.21849,20.0427 23.46745,30.3994 h 30.68879 c 7.24943,-10.3568 12.42424,-25.6971 23.46942,-30.3994 0.13007,-0.056 0.29402,-0.056 0.42409,0 11.04486,4.7024 16.21848,20.0427 23.46744,30.3994 h 30.6888 c 7.24896,-10.3567 12.42257,-25.697 23.46744,-30.3994 0.13006,-0.056 0.29402,-0.056 0.42409,0 13.6511,5.8117 25.62481,17.2079 33.09657,30.3994 h 30.52828 c 1.942,-1.4966 3.77851,-3.1129 5.46557,-4.8195 v -29.9674 c -13.9535,-8.1574 -25.76994,-21.3378 -31.8382,-35.988 -0.0536,-0.1293 -0.0536,-0.2907 0,-0.42 4.90647,-11.8453 21.51382,-17.4209 31.8382,-25.6137 v -29.5235 c -10.32438,-8.1928 -26.93173,-13.7684 -31.8382,-25.6137 -0.0536,-0.1294 -0.0536,-0.2907 0,-0.4201 4.90647,-11.8453 21.51382,-17.4209 31.8382,-25.6137 v -29.5235 c -10.32438,-8.19275 -26.93173,-13.76837 -31.8382,-25.61363 -0.0536,-0.12938 -0.0536,-0.29075 0,-0.42012 4.90647,-11.84527 21.51382,-17.42088 31.8382,-25.61363 v -29.52356 c -10.32438,-8.19275 -26.93173,-13.76837 -31.8382,-25.61363 -0.0536,-0.12938 -0.0536,-0.29075 0,-0.42012 4.90647,-11.84527 21.51382,-17.42088 31.8382,-25.61363 v -29.52356 c -10.32438,-8.19275 -26.93173,-13.76837 -31.8382,-25.61363 -0.0536,-0.12938 -0.0536,-0.29075 0,-0.42012 4.90647,-11.84527 21.51382,-17.42088 31.8382,-25.61363 v -29.52356 c -10.32438,-8.19275 -26.93173,-13.76837 -31.8382,-25.61363 -0.0536,-0.12938 -0.0536,-0.29075 0,-0.42012 4.90647,-11.84527 21.51382,-17.42088 31.8382,-25.61363 v -29.52356 c -10.32438,-8.19275 -26.93173,-13.76837 -31.8382,-25.61363 -0.0536,-0.12938 -0.0536,-0.29075 0,-0.42012 4.90647,-11.84527 21.51382,-17.42088 31.8382,-25.61363 V 585.2238 c -10.32438,-8.19276 -26.93173,-13.76837 -31.8382,-25.61363 -0.0536,-0.12938 -0.0536,-0.29075 0,-0.42012 4.90647,-11.84527 21.51382,-17.42088 31.8382,-25.61363 v -29.52356 c -10.32438,-8.19276 -26.93173,-13.76837 -31.8382,-25.61363 -0.0536,-0.12938 -0.0536,-0.29075 0,-0.42012 4.90647,-11.84527 21.51382,-17.42088 31.8382,-25.61363 v -29.52356 c -10.32438,-8.19276 -26.93173,-13.76837 -31.8382,-25.61363 -0.0536,-0.12938 -0.0536,-0.29075 0,-0.42012 4.90647,-11.84527 21.51382,-17.42088 31.8382,-25.61364 v -29.52355 c -10.32438,-8.19276 -26.93173,-13.76837 -31.8382,-25.61363 -0.0536,-0.12938 -0.0536,-0.29075 0,-0.42012 4.90647,-11.84527 21.51382,-17.42088 31.8382,-25.61364 v -29.52355 c -10.32438,-8.19276 -26.93173,-13.76837 -31.8382,-25.61363 -0.0536,-0.12938 -0.0536,-0.29075 0,-0.42012 4.90647,-11.84527 21.51382,-17.42088 31.8382,-25.61364 V 179.3691 c -10.32438,-8.19276 -26.93173,-13.76837 -31.8382,-25.61363 -0.0536,-0.12938 -0.0536,-0.29075 0,-0.42012 4.90647,-11.84527 21.51382,-17.42088 31.8382,-25.61364 V 98.198159 c -10.32438,-8.192753 -26.93173,-13.76837 -31.8382,-25.613631 -0.0536,-0.129381 -0.0536,-0.290742 0,-0.420123 6.07621,-14.669271 17.8843,-27.873136 31.8382,-36.083019 V 5.989083 c -0.88102,-0.8913168 -1.7975,-1.7615829 -2.75459,-2.6000067 H 961.80643 C 954.56927,17.583944 943.60828,31.789229 929.25284,31.788996 917.30351,31.788804 912.35573,15.343611 905.49607,3.3890763 H 874.96185 C 868.10219,15.343624 863.15441,31.788844 851.20508,31.788996 839.25528,31.789149 834.30662,15.343777 827.44633,3.3890763 H 796.9121 c -6.85965,11.9545897 -11.80744,28.3999197 -23.75676,28.3999197 -11.94933,0 -16.89712,-16.445321 -23.75677,-28.3999197 H 718.86434 C 712.00468,15.343624 707.05691,31.788845 695.10757,31.788996 683.15778,31.789148 678.20911,15.343777 671.34882,3.3890763 H 640.8146 C 633.95494,15.343666 629.00716,31.788995 617.05783,31.788996 605.1085,31.788997 600.16072,15.343666 593.30106,3.3890763 H 562.76683 C 555.90655,15.343777 550.95788,31.789148 539.00809,31.788996 527.05876,31.788845 522.11098,15.343624 515.25132,3.3890763 H 484.71709 C 477.85743,15.343624 472.90965,31.788845 460.96032,31.788996 449.01053,31.789148 444.06186,15.343777 437.20158,3.3890763 H 406.66735 C 399.80769,15.343666 394.85991,31.788997 382.91058,31.788996 370.96125,31.788995 366.01347,15.343666 359.15381,3.3890763 H 328.61959 C 321.7593,15.343777 316.81064,31.789148 304.86084,31.788996 292.91151,31.788845 287.96373,15.343624 281.10407,3.3890763 H 250.56984 C 243.71019,15.343675 238.7624,31.788996 226.81308,31.788996 c -11.94933,0 -16.89712,-16.44533 -23.75677,-28.3999197 H 172.52209 C 165.66179,15.343777 160.71313,31.789149 148.76333,31.788996 136.814,31.788844 131.86622,15.343624 125.00656,3.3890763 H 94.47234 C 87.612682,15.343649 82.664899,31.788919 70.715572,31.788996 56.333235,31.789089 45.341531,17.610573 38.062897,3.3890763 Z";$/;"	v
outline	svg/shapes.inc	/^      $outline = "M 163.98366,847.96689 C 44.928328,668.61454 25.924791,556.08442 18.182746,506.53533 1.1502469,452.34101 4.0406102,1.031383 4.0406102,1.031383 H 501.07544 998.11027 c 0,0 2.89033,451.309627 -14.14213,505.503947 -7.74205,49.54909 -26.74558,162.07921 -145.80091,341.43156 C 739.9148,996.66231 615.29598,1112.9122 501.07544,1199.5 386.85491,1112.9122 262.23609,996.66231 163.98366,847.96689 Z";$/;"	v
outline	svg/shapes.inc	/^      $outline = "M 2.0857 270.816C2.0857 605.256 239.14 1049.406 502.1 1202.106C778.47 1055.506 1002.1 611.136 1002.1 270.816C1002.1 270.816 1002.1 -0.794 1002.1 -0.794C920.4 47.882 838.67 68.036 756.92 66.474C671.98 64.906 587.04 39.987 502.1 -0.794C417.15 39.987 332.28 64.906 247.33 66.474C165.58 68.036 83.84 47.882 2.0857 -0.794 z";$/;"	v
outline	svg/shapes.inc	/^      $outline = "m 0,0 v 800 c -2.5063876,43.11115 1.2341419,84.33503 21.489586,125.13639 20.255443,40.80137 53.477613,79.98631 98.039434,115.63581 44.56181,35.6494 100.44867,67.7517 164.92346,94.7345 64.47479,26.9828 137.51639,48.8374 215.54752,64.4933 78.03113,-15.6559 151.07273,-37.5105 215.54752,-64.4933 64.47479,-26.9828 120.36165,-59.0851 164.92346,-94.7345 44.56182,-35.6495 77.78399,-74.83444 98.03943,-115.63581 C 998.76586,884.33503 1000.1453,841.93063 1000,800 V 0 Z";$/;"	v
outline	svg/shapes.inc	/^      $outline = "m 1.2817646,953.9012 c 0,0 -3.0191322,-756.24112 499.0203454,-754.95935 502.03949,1.28177 496.91075,760.08641 496.91075,760.08641 z";$/;"	v
outline	svg/shapes.inc	/^      $outline = "m 499.99,-74.556 500,3.408 c 0,0 0,1087.148 -1.71,1124.548 -13.63,56.2 -379.96,80.1 -454.92,90.3 -37.49,5.1 -43.37,32.4 -43.37,32.4 0,0 -5.88,-27.3 -43.37,-32.4 C 381.66,1133.5 15.325,1109.6 1.6939,1053.4 -0.01004119,1016 -0.01,-71.148 -0.01,-71.148 l 500,-3.408";$/;"	v
outline	svg/shapes.inc	/^      $outline = "m 967.47,579.49 a 467.47,574.7 0 0 1 -467.47,574.71 467.47,574.7 0 0 1 -467.47,-574.71 467.47,574.7 0 0 1 467.47,-574.7 467.47,574.7 0 0 1 467.47,574.7 z";$/;"	v
outline	svg/shapes.inc	/^      $outline = 'M 500.71484,0.71484375 C 368.29589,0.71447361 241.30034,53.317399 147.66582,146.95155 54.031303,240.58571 1.4278813,367.58105 1.4277344,500 1.4278803,632.41895 54.031301,759.41429 147.66582,853.04845 241.30034,946.6826 368.29589,999.28553 500.71484,999.28516 776.46229,999.28486 999.9997,775.74745 1000,500 999.99969,224.25255 776.46229,0.71514751 500.71484,0.71484375';$/;"	v
outline	svg/shapes.inc	/^      $outline = 'm 0,0 h 1000 v ' . $layout->size->height . 'h -1000 Z';$/;"	v
output	drawshield.php	/^$output = draw();$/;"	v
output	quickimage.php	/^  $output = draw();$/;"	v
output	randomblazon.php	/^    $output = '';$/;"	v
overall	parser/english/grammar.inc	/^    protected function overall($meta = false)$/;"	f
overall	svg/arrangements.inc	/^    $overall = ($item->parentNode->parentNode->nodeName == 'overall');$/;"	v
overrideRotation	svg/placecharge.inc	/^      $overrideRotation = "rotate($shownRotation,$rotateX,$rotateY)";$/;"	v
overrideRotation	svg/placecharge.inc	/^  $overrideRotation = '';$/;"	v
p	drawshield.php	/^  $p = new parser('english');$/;"	v
p	drawshield.php	/^  $p = null; \/\/ destroy parser$/;"	v
p	quickimage.php	/^  $p = new parser('english');$/;"	v
p	quickimage.php	/^  $p = null; \/\/ destroy parser$/;"	v
p	svg/bezier.inc	/^        $p = $this->point();$/;"	v
p0	svg/bezier.inc	/^                $p0 = $p1;$/;"	v
p0	svg/bezier.inc	/^            $p0 = $p1;$/;"	v
p0	svg/bezier.inc	/^            $p0 = $this->points[0];$/;"	v
p0	svg/bezier.inc	/^            $p0 = $this->start;$/;"	v
p0	svg/bezier.inc	/^        $p0 = $this->points[0];$/;"	v
p0	svg/bezier.inc	/^        $p0 = $this->start();$/;"	v
p0	svg/bezier.inc	/^        $p0 = $this->start;$/;"	v
p0	svg/edges/edge_type.inc	/^                $p0 = $seg->polar_relative($feature_width \/ 2, 0);$/;"	v
p0	svg/edges/edge_type.inc	/^                $p0 = $seg->polar_relative($feature_width \/ 2, M_PI);$/;"	v
p0	svg/edges/edge_type.inc	/^            $p0 = $p1;$/;"	v
p0	svg/edges/edge_type.inc	/^            $p0 = $prev_segment->point_at_length($prev_segment->length() - $feature_width\/M_SQRT2);$/;"	v
p0	svg/edges/edge_type.inc	/^            $p0 = $source->start();$/;"	v
p0	svg/edges/edge_type.inc	/^        $p0 = $source->start();$/;"	v
p01	svg/bezier.inc	/^        $p01 = $this->start->lerp($this->tan1, $t);$/;"	v
p012	svg/bezier.inc	/^        $p012 = $p01->lerp($p12, $t);$/;"	v
p0123	svg/bezier.inc	/^        $p0123 = $p012->lerp($p123, $t);$/;"	v
p1	svg/bezier.inc	/^                $p1 = $this->point($t);$/;"	v
p1	svg/bezier.inc	/^                $p1 = $this->points[$i];$/;"	v
p1	svg/bezier.inc	/^            $p1 = $this->points[$i];$/;"	v
p1	svg/bezier.inc	/^            $p1 = self::bezier_solve($t1, $this->start, $this->tan1, $this->tan2, $this->finish);$/;"	v
p1	svg/edges/edge_type.inc	/^                $p1 = $seg->polar_relative($feature_width \/ 2, 0);$/;"	v
p1	svg/edges/edge_type.inc	/^                $p1 = $seg->polar_relative($feature_width \/ 2, M_PI);$/;"	v
p1	svg/edges/edge_type.inc	/^            $p1 = $seg->point_at_length($feature_width\/M_SQRT2);$/;"	v
p1	svg/edges/edge_type.inc	/^            $p1 = $source->finish();$/;"	v
p1	svg/edges/edge_type.inc	/^            $p1 = $source->point_at_length($i * $size);$/;"	v
p1	svg/edges/edge_type.inc	/^        $p1 = $seg_a->lerp($seg_b, $p->x);$/;"	v
p12	svg/bezier.inc	/^        $p12 = $this->tan1->lerp($this->tan2, $t);$/;"	v
p123	svg/bezier.inc	/^        $p123 = $p12->lerp($p23, $t);$/;"	v
p2	svg/edges/edge_type.inc	/^            $p2 = $p1->lerp($p2, $scale);$/;"	v
p23	svg/bezier.inc	/^        $p23 = $this->tan2->lerp($this->finish, $t);$/;"	v
p_left	svg/bezier.inc	/^            $p_left = $points[$i - 1];$/;"	v
p_left	svg/bezier.inc	/^            $p_left = $points[$n_points - 2];$/;"	v
p_right	svg/bezier.inc	/^            $p_right = $points[$i+1];$/;"	v
p_right	svg/bezier.inc	/^            $p_right = $points[1];$/;"	v
padding	svg/ordinaries/shield_shape_utils.inc	/^        $padding = $width \/ 5;$/;"	v
pageHeight	drawshield.php	/^          $pageHeight = 990;$/;"	v
pageWidth	drawshield.php	/^          $pageWidth = 765;$/;"	v
pageWidth	drawshield.php	/^    $pageWidth = $pageHeight = false;$/;"	v
palet_length	svg/ordinaries/bar.inc	/^          $palet_length = sprintf("%d", $height - 200);$/;"	v
palet_length	svg/ordinaries/bar.inc	/^          $palet_length = sprintf("%d", $height - 200);;$/;"	v
palet_length	svg/ordinaries/bar.inc	/^  $palet_length = sprintf("%d", $height + 200);$/;"	v
palet_length	svg/ordinaries/bar.inc	/^$palet_length = 1400;$/;"	v
palet_start	svg/ordinaries/bar.inc	/^          $palet_start = '-100';$/;"	v
palet_start	svg/ordinaries/bar.inc	/^          $palet_start = '100';$/;"	v
palet_start	svg/ordinaries/bar.inc	/^  $palet_start = '-100';$/;"	v
palette	svg/tinctures.inc	/^          $palette = 'drawshield';$/;"	v
palette	svg/tinctures.inc	/^        $palette = $options['palette'];$/;"	v
parallelSpec	svg/linetypes.inc	/^function parallelSpec ( $shapeSpec, $io, $size ) {$/;"	f
params	svg/transform.inc	/^        $params = preg_split("\/(,|\\s)\\s*\/", trim($params));$/;"	v
parent	analyser/references.inc	/^      $parent = $item->parentNode;$/;"	v
parent	svg/treatment.inc	/^  $parent = $node->parentNode;$/;"	v
parse	parser/parser.inc	/^  public function parse($blazon, $format = 'xml' ) {$/;"	f
parse_alpha	svg/bezier.inc	/^    private function parse_alpha($tok)$/;"	f
parse_d	svg/bezier.inc	/^    static function parse_d($d) : MutableShape$/;"	f
parse_fill	svg/tinctures.inc	/^    function parse_fill($layout)$/;"	f
parse_param	svg/bezier.inc	/^    private function parse_param()$/;"	f
parser	parser/parser.inc	/^class parser {$/;"	c
part_word	parser/tokeniser.inc	/^            $part_word = '';$/;"	v
part_word	parser/tokeniser.inc	/^          $part_word = '';$/;"	v
part_word	parser/tokeniser.inc	/^          $part_word = '{';$/;"	v
part_word	parser/tokeniser.inc	/^    $part_word = '';$/;"	v
parts	parser/english/grammar.inc	/^            $parts = explode('\/', $keyterm);$/;"	v
patTrans	svg/tinctures.inc	/^            $patTrans = ' patternTransform="' . $this->pattern_transform . '" ';$/;"	v
patTrans	svg/tinctures.inc	/^            $patTrans = '';$/;"	v
path	svg/bezier.inc	/^        $path = "<path";$/;"	v
path	svg/edges/edge_type.inc	/^        $path = SvgDParser::parse_d($element->getAttribute("d"));$/;"	v
path	svg/linetypes.inc	/^        $path = scalePath ( $path, (($dist\/$reps)\/$len), 1 );$/;"	v
path	svg/linetypes.inc	/^      $path = mirrorPath($path,'x');$/;"	v
path	svg/linetypes.inc	/^    $path = preg_replace_callback('\/{D.*?}\/', 'subFunc', $spec);$/;"	v
path	svg/linetypes.inc	/^    $path = rotatePath($path, $angle);$/;"	v
path	svg/ordinaries/flag/saltire.inc	/^$path = new MutableShape();$/;"	v
path	svg/ordinaries/mount.inc	/^        $path = new MutableShape();$/;"	v
path_bottom	svg/edges/edge_type.inc	/^                $path_bottom = self::load_path($xpath, 2, $filename)[1];$/;"	v
path_bottom_small	svg/edges/edge_type.inc	/^                $path_bottom_small = self::load_path($xpath, 3, $filename)[1];$/;"	v
path_builder	svg/linetypes.inc	/^function path_builder($x, $y)$/;"	f
path_builder	svg/ordinaries/bend-helper.inc	/^        $path_builder = new PathBuilder();$/;"	v
path_builder	svg/ordinaries/bordure.inc	/^$path_builder = new MutableShape();$/;"	v
path_builder	svg/ordinaries/double-tressure.inc	/^$path_builder = new MutableShape();$/;"	v
path_builder	svg/ordinaries/orle.inc	/^$path_builder = new MutableShape();$/;"	v
path_builder	svg/ordinaries/tressure.inc	/^    $path_builder = new MutableShape();$/;"	v
path_spec	svg/divisions/flag/per-bend.inc	/^$path_spec = makePath($shape_spec, getModifierByType($node,'linetype', false), $feature_size);$/;"	v
path_spec	svg/ordinaries/flag/bend.inc	/^$path_spec = makePath($shape_spec, getModifierByType($node,'linetype'), $feature_size);$/;"	v
path_svg	svg/ordinaries/mount.inc	/^    $path_svg = "";$/;"	v
paths	svg/charges/characters/digit.inc	/^    $paths = array ($/;"	v
paths	svg/charges/sports/number.inc	/^$paths = array ($/;"	v
paths	svg/ordinaries/mount.inc	/^$paths = implode("", $paths_arr);$/;"	v
paths	svg/ordinary.inc	/^    $paths = $svg->xpath('\/\/svg:g[@id="body2"]\/*');$/;"	v
paths	svg/ordinary.inc	/^    $paths = $svg->xpath('\/\/svg:path');$/;"	v
paths_arr	svg/ordinaries/mount.inc	/^$paths_arr = [];$/;"	v
patt_id	svg/getcharge.inc	/^      $patt_id = add_def ( 'pattern width="100%" height="100%" patternUnits="objectBoundingBox" preserveAspectRatio="none" viewBox="0 0 1000 1000"',$/;"	v
patt_id	svg/ordinary.inc	/^                $patt_id = add_def ( 'pattern width="100%" height="100%" patternUnits="objectBoundingBox" preserveAspectRatio="none" viewBox="0 0 1000 ' .   $height . '"',$/;"	v
patt_id	svg/tinctures.inc	/^                    $patt_id = add_def ($/;"	v
patt_id	svg/tinctures.inc	/^                    $patt_id = add_def('mask', '<g style="fill:#ffffff;">' . $targetSVG . '<\/g>');$/;"	v
patt_id	svg/tinctures.inc	/^                $patt_id = $this->add_def($/;"	v
patt_id	svg/tinctures.inc	/^                $patt_id = add_def ( 'mask', '<g style="fill:#ffffff;">' . $targetSVG . '<\/g>' );$/;"	v
patt_id	svg/tinctures.inc	/^                $patt_id = add_def('mask', '<g style="fill:#ffffff;">' . $targetSVG . '<\/g>');$/;"	v
patt_id	svg/tinctures.inc	/^            $patt_id = add_def ( 'pattern width="100%" height="100%" patternUnits="objectBoundingBox" preserveAspectRatio="none" viewBox="0 0 1000 1000"',$/;"	v
pattern	svg/treatment.inc	/^            $pattern = apply_tincture($tinctures[1], $treatment, $layout, $size);$/;"	v
pattern	svg/treatment.inc	/^            $pattern = apply_tincture($tinctures[2], $treatment, $layout, $size);$/;"	v
pattern	svg/treatment.inc	/^        $pattern = $treatment_data['pattern'];$/;"	v
patternArray	parser/english/grammar.inc	/^            $patternArray = self::threadcount($value);$/;"	v
patternArray	parser/english/grammar.inc	/^        $patternArray = [];$/;"	v
patternDB	parser/grammar.inc	/^    $this->patternDB = new languageDB();$/;"	v
patternDB	parser/grammar.inc	/^  protected $patternDB;$/;"	v
patternDB	parser/matcher.inc	/^    $this->patternDB = $patternDB;$/;"	v
patternDB	parser/matcher.inc	/^  protected $patternDB;$/;"	v
pattern_transform	svg/tinctures.inc	/^        $this->pattern_transform = '';$/;"	v
patterns	parser/english/lexicon.inc	/^        $this->patterns = array($/;"	v
patterns	parser/lexicon.inc	/^   protected $patterns = array(); \/\/ of objects$/;"	v
peaks	svg/ordinaries/mount.inc	/^    $peaks = 3;$/;"	v
peaks	svg/ordinaries/mount.inc	/^$peaks = max((int)getModifierValueByKeyterm($node, 'points', true), 1);$/;"	v
penalty	svg/getcharge.inc	/^    $penalty = 0;$/;"	v
penalty	svg/placement-data.inc	/^      $penalty = 0;$/;"	v
pending	analyser/references.inc	/^            $pending = $firstChild->firstChild;$/;"	v
pendingShield	parser/english/grammar.inc	/^                    $pendingShield = $this->schema->makeNode(blazonML::E_SHIELD);$/;"	v
per_side	svg/arrangements.inc	/^        $per_side = $n \/ 2;$/;"	v
percent	svg/pathtools.inc	/^        $percent = substr($percent, 0, $len - 1); \/\/ strip flag$/;"	v
percent	svg/pathtools.inc	/^    $percent = substr($match[0],2,strlen($match[0])-3);$/;"	v
persistentStore	parser/utilities.inc	/^class persistentStore implements checkpoint {$/;"	c
phraseMatcher	parser/grammar.inc	/^    $this->phraseMatcher = new matcher($tokenList, $this->patternDB);$/;"	v
phraseMatcher	parser/grammar.inc	/^  protected $phraseMatcher;$/;"	v
pink	svg/proper.inc	/^  static $pink;$/;"	v
plac	svg/arrangements.inc	/^                $plac = $placement[count($placement)-1];$/;"	v
plac	svg/arrangements.inc	/^        $plac = [];$/;"	v
plac	svg/ordinaries/bend-helper.inc	/^        $plac = [];$/;"	v
plac	svg/ordinaries/shield_shape_utils.inc	/^        $plac = [];$/;"	v
plac_base	svg/arrangements.inc	/^    $plac_base = new ShieldRect($/;"	v
plac_size	svg/arrangements.inc	/^    $plac_size = $chev_width * $relative_size;$/;"	v
place_charges	svg/placecharge.inc	/^function place_charges ( DOMElement $node, $placement, $layout ) {$/;"	f
place_list	svg/placecharge.inc	/^      $place_list = ltrim(calcPlace($node,'w','100,100,800,800'),'x\/');$/;"	v
place_list	svg/placecharge.inc	/^    $place_list = $num_of_list[$num_of - 1];$/;"	v
place_list	svg/placecharge.inc	/^    $place_list = 's';$/;"	v
place_list	svg/placecharge.inc	/^  $place_list = explode(':', $place_list);$/;"	v
placement	svg/arrangements.inc	/^                    $placement = calcPlace($item,'h', $layout->chief);$/;"	v
placement	svg/arrangements.inc	/^                $placement = 'i';$/;"	v
placement	svg/arrangements.inc	/^                $placement = 'x\/x\/250,250,180,400,-45:750,250,,,45:500,750,,,0\/s\/s\/s' ;$/;"	v
placement	svg/arrangements.inc	/^                $placement = 'x\/x\/250,250,300,300:500,600:750,250\/x\/x\/250,200,200,200:500:750:333.33,500:666.67:500,800';$/;"	v
placement	svg/arrangements.inc	/^                $placement = adjustplacement($placement, '150,150,700,700');$/;"	v
placement	svg/arrangements.inc	/^                $placement = adjustplacement($placement,"$x,$y,$w,$h");$/;"	v
placement	svg/arrangements.inc	/^                $placement = adjustplacement($placement,'100,66,800,800');$/;"	v
placement	svg/arrangements.inc	/^                $placement = adjustplacement(calcPlace($item, 'w', $boundingBox), '150,150,700,700');$/;"	v
placement	svg/arrangements.inc	/^                $placement = calcPlace($item,'h',$boundingBox);$/;"	v
placement	svg/arrangements.inc	/^                $placement = calcPlace($item,'v',$boundingBox);$/;"	v
placement	svg/arrangements.inc	/^                $placement = implode("\/", $placement_arr);$/;"	v
placement	svg/arrangements.inc	/^                $placement = inAnnulo($number, $boundingBox, $layout);$/;"	v
placement	svg/arrangements.inc	/^                $placement = inOrle($layout, $number);$/;"	v
placement	svg/arrangements.inc	/^                $placement = placement_chevron($layout, 200, 0.8);$/;"	v
placement	svg/arrangements.inc	/^                $placement = placement_combattant($boundingBox, 0, 0);$/;"	v
placement	svg/arrangements.inc	/^                $placement = placement_combattant($boundingBox, 0, 1);$/;"	v
placement	svg/arrangements.inc	/^                $placement = placement_combattant($boundingBox, 0.1, 0);$/;"	v
placement	svg/arrangements.inc	/^                $placement = placement_counter_passant($boundingBox);$/;"	v
placement	svg/arrangements.inc	/^                $placement = placement_from_ordinary("plain-cross", $boundingBox, $layout);$/;"	v
placement	svg/arrangements.inc	/^                $placement = placement_in_bend($boundingBox, false, 0);$/;"	v
placement	svg/arrangements.inc	/^                $placement = placement_in_bend($boundingBox, true, 0);$/;"	v
placement	svg/arrangements.inc	/^                $placement = placement_pilewise($boundingBox);$/;"	v
placement	svg/arrangements.inc	/^                $placement = placement_quadrangle($boundingBox, $layout);$/;"	v
placement	svg/arrangements.inc	/^              $placement = '\/\/\/300,300,160,160:700,300,160,160:300,700:700,700';$/;"	v
placement	svg/arrangements.inc	/^              $placement = 'x\/125,500,200,800:875,500\/250,200,300,280:750,200,300,280:500,1000\/250,200,280,280:750,200,280,280:250,900:750,900\/250,200,240,240:750,200,240,240:500,200:250,900:750,900';$/;"	v
placement	svg/arrangements.inc	/^            $placement = '500,150,1000,200';$/;"	v
placement	svg/arrangements.inc	/^            $placement = 'i';        $/;"	v
placement	svg/arrangements.inc	/^            $placement = 'i';$/;"	v
placement	svg/arrangements.inc	/^            $placement = adjustplacement($placement,'400,400,200,200');$/;"	v
placement	svg/arrangements.inc	/^            $placement = calcPlace($item,'w',$boundingBox);$/;"	v
placement	svg/arrangements.inc	/^           $placement = adjustPlacement($placement,'100,100,800,800', false);$/;"	v
placement	svg/arrangements.inc	/^           $placement = adjustPlacement($placement,'150,150,700,700', false);$/;"	v
placement	svg/arrangements.inc	/^           $placement = adjustPlacement($placement,'50,50,900,900', false);$/;"	v
placement	svg/arrangements.inc	/^          $placement = adjustPlacement($placement,'-100,-100,1200,1200', false);$/;"	v
placement	svg/arrangements.inc	/^          $placement = adjustPlacement($placement,'-200,-200,1400,1400', false);$/;"	v
placement	svg/arrangements.inc	/^          $placement = adjustPlacement($placement,'-300,-300,1600,1600', false);$/;"	v
placement	svg/arrangements.inc	/^        $placement = '';$/;"	v
placement	svg/arrangements.inc	/^        $placement = adjustDistance($item, $placement);$/;"	v
placement	svg/arrangements.inc	/^    $placement = ''; \/\/ This is what we are after, keep going until we find one$/;"	v
placement	svg/arrangements.inc	/^    $placement = [];$/;"	v
placement	svg/arrangements.inc	/^    $placement = str_repeat('\/',$number - 1);$/;"	v
placement	svg/arrangements.inc	/^  $placement = str_repeat('x\/', $number-1);$/;"	v
placement	svg/placecharge.inc	/^  $placement = subPercent($placement, $layout);$/;"	v
placementData	svg/placement-data.inc	/^$placementData = array ($/;"	v
placementList	svg/arrangements.inc	/^    $placementList = [];$/;"	v
placement_arr	svg/arrangements.inc	/^                $placement_arr = explode("\/", placement_from_ordinary("saltire", $boundingBox, $layout));$/;"	v
placement_arr	svg/arrangements.inc	/^    $placement_arr = [[]];$/;"	v
placement_arr	svg/arrangements.inc	/^    $placement_arr = [];$/;"	v
placement_arr	svg/ordinaries/bend-helper.inc	/^    $placement_arr = [];$/;"	v
placement_chevron	svg/arrangements.inc	/^function placement_chevron(ShieldLayout $layout, $chev_width, $relative_size)$/;"	f
placement_combattant	svg/arrangements.inc	/^function placement_combattant($boundingBox, $gap, $flip)$/;"	f
placement_counter_passant	svg/arrangements.inc	/^function placement_counter_passant($boundingBox)$/;"	f
placement_from_ordinary	svg/arrangements.inc	/^function placement_from_ordinary($ordinary_file, $boundingBox, $layout)$/;"	f
placement_in_bend	svg/ordinaries/bend-helper.inc	/^function placement_in_bend($boundingBox, $sinister, $angle, $scale = 0.23)$/;"	f
placement_pilewise	svg/arrangements.inc	/^function placement_pilewise($boundingBox)$/;"	f
placement_quadrangle	svg/arrangements.inc	/^function placement_quadrangle($boundingBox, $layout)$/;"	f
planet	svg/charges/astronomical/symbol.inc	/^$planet = strtolower(getModifierValueByKeyterm($node,'value'));$/;"	v
pm	svg/bezier.inc	/^                    $pm = self::bezier_solve($tm, $this->start, $this->tan1, $this->tan2, $this->finish);$/;"	v
pm	svg/edges/edge_type.inc	/^                $pm = $seg->point();$/;"	v
pm	svg/edges/edge_type.inc	/^            $pm = $seg->start();$/;"	v
point	svg/bezier.inc	/^    function point($t)$/;"	f
point	svg/bezier.inc	/^    function point() : ShieldPos$/;"	f
point	svg/bezier.inc	/^    private function point()$/;"	f
point_at_length	svg/bezier.inc	/^    function point_at_length($length)$/;"	f
points	svg/bezier.inc	/^        $points = $this->points;$/;"	v
points	svg/bezier.inc	/^        $this->points = $cloned;$/;"	v
points	svg/bezier.inc	/^        $this->points = array_reverse($this->points);$/;"	v
points	svg/bezier.inc	/^    function points()$/;"	f
points	svg/bezier.inc	/^    public $points = [];$/;"	v
points	svg/divisions/pily-bendy.inc	/^$points = [$/;"	v
points	svg/divisions/pily.inc	/^$points = [$/;"	v
points	svg/ordinaries/mount.inc	/^            $points = $path->last_path()->points();$/;"	v
points	svg/ordinaries/shield_shape_utils.inc	/^                $points = [$/;"	v
points	svg/ordinaries/shield_shape_utils.inc	/^        $points = $this->on_charge_placement($layout, $margin, $width);$/;"	v
points	svg/transform.inc	/^        $points = [$/;"	v
polar_relative	svg/bezier.inc	/^    function polar_relative($distance, $angle) : ShieldPos$/;"	f
pos	parser/english/grammar.inc	/^                    $pos = getModifierByType($child, 'position', false);$/;"	v
pos	svg/arrangements.inc	/^          $pos = getModifiersByTypeAsArray($item->parentNode->parentNode,'position');$/;"	v
pos	svg/arrangements.inc	/^    $pos = getModifiersByTypeAsArray($item,'position'); \/\/ THIS IS AN array, go through each one, appending * bounding_box as many times as required.$/;"	v
pos	svg/bezier.inc	/^        $this->pos = $pos;$/;"	v
pos	svg/bezier.inc	/^        $this->pos = $this->pos->translated($p->x, $p->y);$/;"	v
pos	svg/bezier.inc	/^        $this->pos = clone $this->pos;$/;"	v
pos	svg/bezier.inc	/^        $this->pos = new ShieldPos($this->pos->x * $x, $this->pos->y * $y);$/;"	v
pos	svg/bezier.inc	/^    public $pos;$/;"	v
pos	svg/ordinaries/bend-helper.inc	/^            $pos = $start + $size * $i;$/;"	v
pos	svg/quartering.inc	/^        $this->pos = $pos;$/;"	v
pos	svg/size.inc	/^        $this->pos = $comb->pos;$/;"	v
pos	svg/size.inc	/^        $this->pos = $pos;$/;"	v
posArray	parser/english/grammar.inc	/^            $posArray = array();$/;"	v
posMods	parser/english/grammar.inc	/^                $posMods = array_merge($mods, $positions);$/;"	v
posMods	parser/english/grammar.inc	/^        $posMods = array();$/;"	v
posX	svg/placecharge.inc	/^  $posX = $centreX - ($sizeX \/ 2);$/;"	v
posY	svg/placecharge.inc	/^  $posY = $centreY - ($sizeY \/ 2);$/;"	v
pos_adjust	svg/arrangements.inc	/^                $pos_adjust = adjustment_from_position($position, $layout, $underlying_div, $bigOrdinary, $cadency, $item);$/;"	v
positionWeight	svg/getcharge.inc	/^  $positionWeight = 2;$/;"	v
positionWeight	svg/placement-data.inc	/^    $positionWeight = 2;$/;"	v
positions	parser/english/grammar.inc	/^        $positions = array();$/;"	v
pr	svg/charges/mullet/mullet.inc	/^        $pr = $r2 * $r_scale * 0.9;$/;"	v
prefix	randomblazon.php	/^                $prefix = substr($prefix,0,-4);$/;"	v
prefix	randomblazon.php	/^    $prefix = '';$/;"	v
prefix	randomblazon.php	/^$prefix = '';$/;"	v
prefix	svg/tinctures.inc	/^    $prefix = '#';$/;"	v
prefix	svg/tinctures.inc	/^  $prefix = '';$/;"	v
prepare	randomblazon.php	/^function prepare()$/;"	f
presentNotRequiredPenalty	svg/getcharge.inc	/^  $presentNotRequiredPenalty = 10;$/;"	v
presentNotRequiredPenalty	svg/placement-data.inc	/^    $presentNotRequiredPenalty = 10;$/;"	v
prevCharge	analyser/references.inc	/^        $prevCharge = $prevCharges->item($prevCharges->length - 1);$/;"	v
prevCharges	analyser/references.inc	/^      $prevCharges = $this->xpath->query('preceding-sibling::charge',$item);$/;"	v
prevCharges	analyser/references.inc	/^      $prevCharges = $this->xpath->query('preceding-sibling::charge',$ordinaryNode);$/;"	v
prevDir	svg/linetypes.inc	/^    $prevDir = strtoupper($dir);$/;"	v
prevDir	svg/linetypes.inc	/^  $prevDir = strtoupper($shape[($numSegments-1)]['dir']);$/;"	v
prevIndex	parser/matcher.inc	/^      $this->prevIndex = 0;$/;"	v
prevIndex	parser/matcher.inc	/^    $this->prevIndex = $this->tokenList->cur_word;$/;"	v
prevIndex	parser/matcher.inc	/^  protected $prevIndex = 0;$/;"	v
prev_segment	svg/edges/edge_type.inc	/^            $prev_segment = $seg;$/;"	v
prev_segment	svg/edges/edge_type.inc	/^        $prev_segment = $segments[$source->size()-1];$/;"	v
previous	analyser/utilities.inc	/^      $previous = $additions[$word];$/;"	v
previous	analyser/utilities.inc	/^  $previous = 0;$/;"	v
previousTypes	parser/english/grammar.inc	/^    private $previousTypes = [];$/;"	v
proper	parser/english/grammar.inc	/^      $proper = $this->schema->makeNode(blazonML::E_PROPER,null,self::tokens(), self::lineNo());$/;"	v
proper	svg/getcharge.inc	/^    $proper = new properColour();$/;"	v
proper	svg/getcharge.inc	/^  static $proper = null;$/;"	v
properColour	svg/proper.inc	/^class properColour {$/;"	c
proportion	drawshield.php	/^  $proportion = ($options['shape'] == 'flag') ? $options['aspectRatio'] : 1.2;$/;"	v
punctuate	randomblazon.php	/^function punctuate($string) {$/;"	f
purple	svg/proper.inc	/^  static $purple;$/;"	v
q1_size	svg/quartering.inc	/^    $q1_size = $layout->size->scaled(1, $h);$/;"	v
q4_size	svg/quartering.inc	/^    $q4_size = $layout->size->scaled(1, 1-$h);$/;"	v
qSize	svg/ordinaries/flag/canton.inc	/^$qSize = (int)($calcHeight \/ 2);$/;"	v
qSize	svg/ordinaries/flag/quarter.inc	/^$qSize = (int)($calcHeight \/ 2);$/;"	v
qSize	svg/ordinaries/flag/square-canton.inc	/^$qSize = (int)($calcHeight \/ 3);$/;"	v
qsize	svg/quartering.inc	/^        $qsize = $this->layout->size->scaled(1 \/ $n_columns, $height_mult);$/;"	v
qsize_norm	svg/quartering.inc	/^        $qsize_norm = $qsize->scaled($norm_factor);$/;"	v
quadratic_to	svg/bezier.inc	/^    function quadratic_to()$/;"	f
quadratic_to	svg/bezier.inc	/^    function quadratic_to(ShieldPos $handle, ShieldPos $dest)$/;"	f
quarter	parser/english/grammar.inc	/^                    $quarter = self::shield(); \/\/ Look for the description of this quarter$/;"	v
quarter	svg/quartering.inc	/^            $quarter = $this->quarters[$index];$/;"	v
quarterType	parser/english/grammar.inc	/^                        $quarterType = $quarterMark[1];$/;"	v
quarterType	parser/english/grammar.inc	/^            $quarterType = null; \/\/ accept any type of numbering$/;"	v
quartered	parser/english/grammar.inc	/^            $quartered = $this->schema->makeNode(blazonML::E_COMPLEX, array('keyterm' => blazonML::V_QUARTERED), self::tokens(), self::lineNo());$/;"	v
quartered	parser/english/grammar.inc	/^    protected function quartered()$/;"	f
quartering	svg/quartering.inc	/^    $quartering = new Quartering($layout);$/;"	v
quarterly	svg/linetypes.inc	/^    function quarterly($flag=true)$/;"	f
quartermarker	parser/english/grammar.inc	/^    protected function quartermarker($matchType = null)$/;"	f
quarters	svg/quartering.inc	/^        $this->quarters = [];$/;"	v
quickPlace	svg/placecharge.inc	/^function quickPlace($svg, $chargeX, $chargeY, $boundX, $boundY, $centreX, $centreY, $fill = null, $adjustments = [] ) {$/;"	f
r	svg/arrangements.inc	/^    $r = $boundingBox->size->height \/ 2;$/;"	v
r	svg/bezier.inc	/^        $r = $this->offset_side($c->pos, $seg_right, $amount);$/;"	v
r	svg/size.inc	/^        $r = $this->distance($origin);$/;"	v
r	svg/size.inc	/^        $r = $this->right() - $x2;$/;"	v
r1	svg/charges/mullet/mullet.inc	/^    $r1 = $size \/ 2 - $stroke;$/;"	v
r2	svg/charges/mullet/mullet.inc	/^    $r2 = $r1 * $r_scale;$/;"	v
r_scale	svg/charges/mullet/mullet.inc	/^        $r_scale = 0.4;$/;"	v
r_scale	svg/charges/mullet/mullet.inc	/^    $r_scale = min(($num_of - 5) \/ (64-5) * .2 + .5, 0.7);$/;"	v
radial_compony	svg/ordinaries/shield_shape_utils.inc	/^    protected static function radial_compony(ShieldLayout $layout, MutableShape $builder, $count = 16, $angle_start = 0, $angle_delta = 0, $direction = 1)$/;"	f
radius	svg/arrangements.inc	/^    $radius = min($box->size->height, $box->size->width) \/ 2;$/;"	v
radius	svg/divisions/gyronny.inc	/^    $radius = 2000;$/;"	v
raiseError	parser/grammar.inc	/^  protected function raiseError ( $type, $message, $getOffset = false ) {$/;"	f
randomShieldCallback	shieldcommon.js	/^function randomShieldCallback(callback)$/;"	f
randomly	randomblazon.php	/^function randomly($choices, $checkUsed = false) {$/;"	f
ratio	svg/ordinaries/shield_shape_utils.inc	/^                $ratio = $layout->size->height \/ $layout->size->width * 1.5;$/;"	v
re_base	svg/getcharge.inc	/^        $re_base = preg_quote($base_name);$/;"	v
readGrammar	parser/grammar.inc	/^  public function readGrammar ( tokeniser $tokenList ) {$/;"	f
readTinctureFile	svg/tinctures.inc	/^function readTinctureFile($filename, $prefix) {$/;"	f
read_chg_file	svg/getcharge.inc	/^function read_chg_file(DOMElement $node) {$/;"	f
rect	svg/ordinaries/chief.inc	/^    $rect = $layout->rect_area()->margin($layout->size->height \/ 6);$/;"	v
rect	svg/ordinaries/mount.inc	/^$rect = $layout->rect_area()->margin(100, 100, 100, $height * 0.8);$/;"	v
rect_area	svg/size.inc	/^    function rect_area()$/;"	f
rect_compony	svg/ordinaries/shield_shape_utils.inc	/^    protected static function rect_compony(ShieldRect $rect, MutableShape $builder, $width, $top = true, $bottom = true, $left = true, $right = true)$/;"	f
rect_path	svg/ordinaries/shield_shape_utils.inc	/^    static function rect_path(ShieldRect $area, $inset, $reversed, MutableShape $builder)$/;"	f
red	svg/proper.inc	/^  static $red;$/;"	v
red	svg/tinctures.inc	/^  $red = intval('0x' . substr($hex,0,2),16);$/;"	v
red1	svg/tinctures.inc	/^    $red1 = intval('0x' . substr($hex1,0,2),16);$/;"	v
red2	svg/tinctures.inc	/^    $red2 = intval('0x' . substr($hex2,0,2),16);$/;"	v
red3	svg/tinctures.inc	/^    $red3 = intval(($red1 + $red2) \/ 2);$/;"	v
ref	svg/divisions/per-chevron.inc	/^  $ref = $y + -25;$/;"	v
ref	svg/divisions/tierced-in-chevron.inc	/^  $ref = $y + 150;$/;"	v
ref	svg/ordinaries/chevron.inc	/^  $ref = 0;$/;"	v
ref	svg/ordinaries/chevron.inc	/^  $ref = 475;$/;"	v
refDist	parser/english/grammar.inc	/^        $refDist = 0;$/;"	v
refList	analyser/references.inc	/^    $refList = array ($/;"	v
refNodes	analyser/references.inc	/^        $refNodes = $this->xpath->query($ref[1],$sourceNode);$/;"	v
refNodes	analyser/references.inc	/^      $refNodes = $this->xpath->query('following::tincture[1]|preceding::tincture[1]',$sourceNode);$/;"	v
refNodes	analyser/references.inc	/^      $refNodes = $this->xpath->query('preceding::charge[@number>"1"]|preceding::ordinary[@number>"1"]',$sourceNode);$/;"	v
refNodes	analyser/references.inc	/^      $refNodes = $this->xpath->query('preceding::modifier[@type="shown"]',$sourceNode);$/;"	v
reference	parser/english/grammar.inc	/^                        $reference = $quarter->cloneNode(true);$/;"	v
reference	parser/english/grammar.inc	/^                        $reference = $this->schema->makeNode(blazonML::E_SHIELD, array(blazonML::A_IDREF => $ID)); \/\/ Set other quarters to point to this one$/;"	v
references	analyser/references.inc	/^class references {$/;"	c
references	drawshield.php	/^  $references = new references($dom);$/;"	v
references	drawshield.php	/^  $references = null; \/\/ destroy references$/;"	v
references	quickimage.php	/^  $references = new references($dom);$/;"	v
references	quickimage.php	/^  $references = null; \/\/ destroy references$/;"	v
refresh	tests/runtests.php	/^        $refresh = true;$/;"	v
refresh	tests/runtests.php	/^$refresh = false;$/;"	v
refresh	tests/runtests.php	/^function refresh($match = null) {$/;"	f
regex	parser/matcher.inc	/^        $regex = substr($regex, 1);$/;"	v
regex	parser/matcher.inc	/^        $regex = substr($regex,1);$/;"	v
regexs	parser/matcher.inc	/^    $regexs = explode(' ', $match_string);$/;"	v
rel_size	svg/quartering.inc	/^        $this->rel_size = $rel_size;$/;"	v
relative	svg/bezier.inc	/^            $relative = array_pop($args);$/;"	v
relative	svg/bezier.inc	/^        $relative = false;$/;"	v
relative	svg/bezier.inc	/^        $this->relative = ctype_lower($tok);$/;"	v
relative	svg/bezier.inc	/^        $this->relative = false;$/;"	v
relative_box	svg/size.inc	/^    function relative_box($x, $y, $width, $height)$/;"	f
relpoint	svg/bezier.inc	/^    private function relpoint()$/;"	f
relpoint	svg/edges/edge_type.inc	/^    private function relpoint(ShieldPos $p, ShieldPos $seg_a, ShieldPos $seg_b, $height, ShieldPos $normal)$/;"	f
removePatterns	parser/lexicon.inc	/^  public function removePatterns($key) {$/;"	f
remove_path	svg/bezier.inc	/^    function remove_path($index)$/;"	f
render	svg/getwords.inc	/^                $render = $this->stringToGlyphs($this->words[$i]);$/;"	v
render_svg	svg/quartering.inc	/^    function render_svg(DOMNodeList $children, $clips = null)$/;"	f
renders	svg/getwords.inc	/^            $renders = [];$/;"	v
repeatCount	svg/treatments/tartan.inc	/^$repeatCount = 0;$/;"	v
replacement	randomblazon.php	/^                    $replacement = ''; \/\/ remove error expansion$/;"	v
replacement	randomblazon.php	/^                    $replacement = randomly($lexicon[$tokenValue]);$/;"	v
replacement	randomblazon.php	/^                $replacement = number($lower,$upper);$/;"	v
replacement	randomblazon.php	/^                $replacement = randomly($lexicon[$tokenValue]);$/;"	v
replacement	randomblazon.php	/^                $replacement = randomly($lexicon[$tokenValue], true); \/\/ check re-use $/;"	v
replacement	randomblazon.php	/^            $replacement = expand($replacement);$/;"	v
replacement	randomblazon.php	/^        $replacement = null;$/;"	v
replacement	svg/draw.inc	/^                    $replacement = $dom->createElementNS('http:\/\/drawshield.net\/blazonML', 'blazonML:'.$node->localName);$/;"	v
report_errors_svg	drawshield.php	/^function report_errors_svg($errno, $errstr, $errfile, $errline)$/;"	f
reps	svg/linetypes.inc	/^      $reps = (int)($dist\/$len);$/;"	v
request	drawshield.php	/^$request = array_merge($_GET, $_POST);$/;"	v
requestHTML	shieldcommon.js	/^function requestHTML(url,id) {$/;"	f
requestSVG	shieldcommon.js	/^function requestSVG(url,id,messageFunc) {$/;"	f
request_blazon_ml	demopage.php	/^        function request_blazon_ml(url, id)$/;"	f
requiredNotPresentPenalty	svg/getcharge.inc	/^  $requiredNotPresentPenalty = 20;$/;"	v
requiredNotPresentPenalty	svg/placement-data.inc	/^    $requiredNotPresentPenalty = 20;$/;"	v
requiredParts	svg/getcharge.inc	/^  $requiredParts = explode('-', $base);$/;"	v
requiredParts	svg/placement-data.inc	/^    $requiredParts = explode('-', $target);$/;"	v
res	parser/matcher.inc	/^          $res = 0;$/;"	v
res	parser/matcher.inc	/^          $res = 1;$/;"	v
res	parser/matcher.inc	/^        $res = @preg_match('\/^' . $regex . '$\/i', transliterate($this->tokenList->words[$t_word]));$/;"	v
resetToken	parser/tokeniser.inc	/^  public function resetToken() {$/;"	f
resolution	svg/bezier.inc	/^            $resolution = 10;$/;"	v
resolveReference	analyser/utilities.inc	/^function resolveReference(DOMElement $node) {$/;"	f
response	reflectfile.php	/^		$response = "File must be .txt and less than 1Mb";$/;"	v
response	reflectfile.php	/^	  $response = file_get_contents($fileTmpName);$/;"	v
response	reflectfile.php	/^$response = "No file selected";$/;"	v
response	saveblazon.php	/^	$response = $_POST['blazon'];$/;"	v
response	saveblazon.php	/^$response = "\/\/ No blazon entered";$/;"	v
response	tests/runtests.php	/^        $response = getResponse(getTest($case));$/;"	v
responseCode	tests/runtests.php	/^    $responseCode = curl_getinfo($curlHandle, CURLINFO_HTTP_CODE);$/;"	v
responses	tests/tests.inc	/^$responses = "responses\/";$/;"	v
restore	parser/grammar.inc	/^  public function restore($state) {$/;"	f
restore	parser/utilities.inc	/^  public function restore($state) {$/;"	f
restore	parser/utilities.inc	/^  public function restore($state);$/;"	f
restoreAnd	parser/grammar.inc	/^  protected function restoreAnd() {$/;"	f
restoreWord	parser/tokeniser.inc	/^  public function restoreWord($offset) {$/;"	f
result	tests/runtests.php	/^        $result = doCompare($basename);$/;"	v
resultFile	tests/tests.inc	/^$resultFile = "results.txt";$/;"	v
retVal	parser/matcher.inc	/^    $retVal = $this->matchedValue;$/;"	v
return	svg/ordinaries/flag/chevron.inc	/^$return = $calcHeight + 200;$/;"	v
return	tests/runtests.php	/^    $return = curl_exec($curlHandle);$/;"	v
retval	analyser/utilities.inc	/^        $retval = (string)$child->getAttribute('value');$/;"	v
retval	analyser/utilities.inc	/^      $retval = $child;$/;"	v
retval	analyser/utilities.inc	/^  $retval = array();$/;"	v
retval	analyser/utilities.inc	/^  $retval = null;$/;"	v
retval	parser/english/grammar.inc	/^            $retval = $motherNode;$/;"	v
retval	parser/english/grammar.inc	/^        $retval = $node1;$/;"	v
retval	parser/english/grammar.inc	/^        $retval = [];$/;"	v
retval	parser/grammar.inc	/^      $retval = true;$/;"	v
retval	parser/grammar.inc	/^    $retval = false;$/;"	v
retval	parser/matcher.inc	/^      $retval = $this->tokenList->lineNos[$this->prevIndex];$/;"	v
retval	parser/matcher.inc	/^    $retval = 0;$/;"	v
retval	parser/matcher.inc	/^    $retval = implode(' ', array_slice($this->tokenList->words, $this->prevIndex, $length ));$/;"	v
retval	parser/matcher.inc	/^    $retval = preg_replace('\/ ?\\[.*?\\] ?\/', ' ', $retval );$/;"	v
retval	svg/achievement.inc	/^        $retval = [];$/;"	v
retval	svg/achievement.inc	/^        $retval = getSvgFragment($svg, array(), 'scroll', 'plain', array(), getStroke(null, true));$/;"	v
retval	svg/achievement.inc	/^    $retval = '';$/;"	v
retval	svg/achievement.inc	/^    $retval = getSvgFragment($svg, $features, 'helmet', $style, $extras, getStroke($fill));$/;"	v
retval	svg/achievement.inc	/^    $retval = getSvgFragment($svg, $features, 'mantling', $type, $extras, getStroke(null, true));$/;"	v
retval	svg/achievement.inc	/^    $retval = getSvgFragment(file_get_contents("svg\/components\/compartments\/$compType.svg"), array(), 'compartments', $compType,$/;"	v
retval	svg/arrangements.inc	/^    $retval = implode('*',$placementList);$/;"	v
retval	svg/division.inc	/^  $retval = "$div1\\n$div2\\n$div3\\n$div4\\n";$/;"	v
retval	svg/divisions/barry-bendy.inc	/^$retval = '<path d="';$/;"	v
retval	svg/divisions/barry-indented-oio.inc	/^$retval = '<path d="';$/;"	v
retval	svg/divisions/fusily-bendy.inc	/^$retval = '<path d="';$/;"	v
retval	svg/divisions/fusily.inc	/^$retval = '<path d="';$/;"	v
retval	svg/draw.inc	/^      $retval = " near line $lineNo";$/;"	v
retval	svg/draw.inc	/^  $retval = '';$/;"	v
retval	svg/effects.inc	/^      $retval = $data[$item][0] . ',' . $data[$item][1] . ',' . ($width + $data[$item][2]) . ',' . ($height + $data[$item][2]);$/;"	v
retval	svg/effects.inc	/^    $retval = $data[$item];$/;"	v
retval	svg/getcharge.inc	/^  $retval = '';$/;"	v
retval	svg/getcharge.inc	/^  $retval = makeCharge($node, new ShieldLayout(new ShieldSize(1000, 1000), "square", null, null, false));$/;"	v
retval	svg/getwords.inc	/^            $retval = '<svg xmlns="http:\/\/www.w3.org\/2000\/svg" xmlns:xlink="http:\/\/www.w3.org\/1999\/xlink" height="' .$/;"	v
retval	svg/getwords.inc	/^        $retval = '';$/;"	v
retval	svg/getwords.inc	/^        $retval = '<svg xmlns="http:\/\/www.w3.org\/2000\/svg" xmlns:xlink="http:\/\/www.w3.org\/1999\/xlink" height="' .$/;"	v
retval	svg/getwords.inc	/^       $retval = '';$/;"	v
retval	svg/hatching.inc	/^	$retval = "<g fill=\\"none\\" stroke=\\"#000000\\" stroke-width=\\"2\\">\\n";$/;"	v
retval	svg/hatching.inc	/^	$retval = "<g stroke=\\"none\\" fill=\\"#000000\\">\\n";$/;"	v
retval	svg/hatching.inc	/^    $retval = "<g fill=\\"none\\" stroke=\\"#000000\\" stroke-width=\\"2\\" stroke-dasharray='40,40'>\\n";$/;"	v
retval	svg/hatching.inc	/^    $retval = "<g fill=\\"none\\" stroke=\\"#000000\\" stroke-width=\\"2\\" stroke-dasharray='5,7,21,7'>\\n";$/;"	v
retval	svg/hatching.inc	/^    $retval = "<g fill=\\"none\\" stroke=\\"#000000\\" stroke-width=\\"2\\">\\n";$/;"	v
retval	svg/linetypes.inc	/^         $retval = true;$/;"	v
retval	svg/linetypes.inc	/^        $retval = true;$/;"	v
retval	svg/linetypes.inc	/^  $retval = '';$/;"	v
retval	svg/linetypes.inc	/^  $retval = false;$/;"	v
retval	svg/ordinaries/grid.inc	/^$retval = '';$/;"	v
retval	svg/ordinary.inc	/^    $retval = '<g stroke-width="3" stroke="' . rgb('ordinary-stroke') . '" >' . $retval . '<\/g>';$/;"	v
retval	svg/ordinary.inc	/^    $retval = '<g transform="' . $transform . '">' . $retval . "<\/g>\\n";$/;"	v
retval	svg/ordinary.inc	/^  $retval = '';$/;"	v
retval	svg/ordinary.inc	/^  $retval = '<g><title>' . $subtype . '<\/title>' . $retval . '<\/g>';$/;"	v
retval	svg/ordinary.inc	/^  $retval = '<path fill-rule="evenodd" d="' . makeVoid ( $spec, $layout, $lineType, $feature_size ) . '" \/>';$/;"	v
retval	svg/ordinary.inc	/^  $retval = '<path fill-rule="evenodd" d="';$/;"	v
retval	svg/ordinary.inc	/^  $retval = add_def() . $retval . $cotiseSVG . $onObjectSVG . $chargeWithinSVG;$/;"	v
retval	svg/ordinary.inc	/^  $retval = apply_tincture ( $tinc1, $bodySVG, $layout, null, $rot, $mirrored, $inverted );$/;"	v
retval	svg/pathtools.inc	/^  $retval = sprintf('%.4g,%.4g',$x2,$y2);$/;"	v
retval	svg/placecharge.inc	/^          $retval = "<g transform=\\"translate($chargeY,0) rotate(90)\\"><desc>fesswise charge<\/desc>$retval<\/g>\\n";$/;"	v
retval	svg/placecharge.inc	/^          $retval = "<g transform=\\"translate(0,$chargeX) rotate(-90)\\"><desc>palewise charge<\/desc>$retval<\/g>\\n";$/;"	v
retval	svg/placecharge.inc	/^        $retval = "<g transform=\\"translate($XY2,$XY2) rotate($angle) translate(-$X2,-$Y2)\\"><desc>bendwise<\/desc>$retval<\/g>\\n";$/;"	v
retval	svg/placecharge.inc	/^        $retval = "<g transform=\\"translate($chargeY,0) rotate(90)\\"><desc>erect charge<\/desc>$retval<\/g>\\n";$/;"	v
retval	svg/placecharge.inc	/^    $retval = "<g transform=\\"translate($chargeX,0) scale(-1,1)\\"><desc>reversed charge<\/desc>$retval<\/g>\\n";$/;"	v
retval	svg/placecharge.inc	/^    $retval = "<g transform=\\"translate(0,$chargeY) scale(1,-1)\\"><desc>inverted charge<\/desc>$retval<\/g>\\n";$/;"	v
retval	svg/placecharge.inc	/^  $retval = "<g transform=\\"$transform\\" >\\n<title>" . $charge['title'] . '<\/title>' . $retval . "<\/g>\\n";$/;"	v
retval	svg/placecharge.inc	/^  $retval = $charge['body'];$/;"	v
retval	svg/placecharge.inc	/^  $retval = '';$/;"	v
retval	svg/placecharge.inc	/^  $retval = apply_tincture( $tincture, $retval, $layout, new ShieldSize($chargeX, $chargeY), $rotation, $reversed, $inverted );$/;"	v
retval	svg/quartering.inc	/^        $retval = '';$/;"	v
retval	svg/shield.inc	/^    $retval = '';$/;"	v
retval	svg/shield.inc	/^  $retval = '';$/;"	v
retval	svg/shield.inc	/^  $retval = '<g>';$/;"	v
retval	svg/svgtools.inc	/^      $retval = '';$/;"	v
retval	svg/svgtools.inc	/^      $retval = '<defs>' . $defs . '<\/defs>';$/;"	v
retval	svg/svgtools.inc	/^    $retval = array();$/;"	v
retval	svg/svgtools.inc	/^  $retval = '';$/;"	v
retval	svg/tinctures.inc	/^                        $retval = add_def();$/;"	v
retval	svg/tinctures.inc	/^                    $retval = '<g>' . $title . '<desc>Division used to fill field<\/desc>' . makeDivision( $data->type_node, $layout ) . '<\/g>';$/;"	v
retval	svg/tinctures.inc	/^                    $retval = add_def() . '<g mask="url(#' . $patt_id . ')"  >' . $fill . '<\/g>';$/;"	v
retval	svg/tinctures.inc	/^                    $retval = add_def();$/;"	v
retval	svg/tinctures.inc	/^                $retval = add_def() . '<g mask="url(#' . $patt_id . ')"  >' . $div_data . '<\/g>';$/;"	v
retval	svg/tinctures.inc	/^                $retval = rgb('stroke-dark');$/;"	v
retval	svg/tinctures.inc	/^                $retval = rgb('stroke-light'); $/;"	v
retval	svg/tinctures.inc	/^            $retval = add_def();$/;"	v
retval	svg/tinctures.inc	/^            $retval = rgb('stroke-dark');$/;"	v
retval	svg/tinctures.inc	/^            $retval = rgb('stroke-light'); $/;"	v
retval	svg/tinctures.inc	/^            $retval = rgb('stroke-light'); \/\/ use default colour$/;"	v
retval	svg/tinctures.inc	/^          $retval = getStroke($tincture->firstChild->firstChild);$/;"	v
retval	svg/tinctures.inc	/^    $retval =  sprintf("%s%02x%02x%02x",'#',$red3,$green3,$blue3);$/;"	v
retval	svg/tinctures.inc	/^    $retval = '';$/;"	v
retval	svg/tinctures.inc	/^    $retval = array();$/;"	v
retval	svg/tinctures.inc	/^    $retval = rgb('charge-stroke'); \/\/ sensible default$/;"	v
retval	svg/tinctures.inc	/^  $retval =  sprintf("%s%02x%02x%02x",$prefix,$newRed,$newGreen,$newBlue);$/;"	v
retval	svg/treatment.inc	/^  $retval = array ( 'width' =>  $size_x, 'height' => $size_y, 'offset' => $offset,$/;"	v
retval	svg/treatment.inc	/^  $retval = array();$/;"	v
rev	svg/placecharge.inc	/^  $rev = 0;$/;"	v
rev	svg/tinctures.inc	/^        $this->rev = $rev;$/;"	v
reverse	svg/bezier.inc	/^    function reverse()$/;"	f
reverse	svg/treatment.inc	/^      $reverse = false;$/;"	v
reverse	svg/treatment.inc	/^  $reverse = true;$/;"	v
reversePath	svg/pathtools.inc	/^function reversePath ( $path ) {$/;"	f
reverse_behaviour	svg/edges/edge_type.inc	/^                $reverse_behaviour = self::get_meta_flag($element, "reverse-behaviour", EdgeTypeRepeating::REVERSE_NORMAL);$/;"	v
reverse_behaviour	svg/edges/edge_type.inc	/^        $this->reverse_behaviour = $reverse_behaviour;$/;"	v
reverse_last	svg/bezier.inc	/^    function reverse_last()$/;"	f
reversed	svg/bezier.inc	/^    function reversed()$/;"	f
reversed	svg/ordinaries/shield_shape_utils.inc	/^                $reversed = !$reversed;$/;"	v
reversed	svg/placecharge.inc	/^                            $reversed = '0' ) {$/;"	v
reversed	svg/placecharge.inc	/^            $reversed = true;$/;"	v
rewriteAttributes	svg/svgtools.inc	/^function rewriteAttributes($attributes, $strokeCol, $strokeWidth, $class = '', $fillSet = false) {$/;"	f
rgb	svg/tinctures.inc	/^function rgb($keyterm) {$/;"	f
rgbCode	svg/treatment.inc	/^    $rgbCode = $colours[$i][0] == '#' ? $colours[$i] : rgb($colours[$i]);$/;"	v
right	svg/divisions/quarterly.inc	/^$right = $layout->size->width - $layout->center_point->x + $margin;$/;"	v
right	svg/linetypes.inc	/^    function right($length)$/;"	f
right	svg/ordinaries/flag/saltire.inc	/^$right = $layout->size->width;$/;"	v
right	svg/ordinaries/shield_shape_utils.inc	/^        $right = $layout->size->width - $inset;$/;"	v
right	svg/quartering.inc	/^    $right = $layout->size->width;$/;"	v
right	svg/size.inc	/^    function right()$/;"	f
right_plain	svg/linetypes.inc	/^    function right_plain($length)$/;"	f
rivet	svg/divisions/_rivet.inc	/^$rivet = '<g>$/;"	v
rivet	svg/ordinaries/_rivet.inc	/^$rivet = '<g>$/;"	v
rivetList	svg/divisions/per-bend.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/divisions/per-chevron.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/divisions/per-chief.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/divisions/per-fess.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/divisions/per-pale.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/divisions/tierced-in-bend.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/divisions/tierced-in-chevron.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/divisions/tierced-in-fess.inc	/^	$rivetList = '';$/;"	v
rivetList	svg/divisions/tierced-in-pale.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/ordinaries/base.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/ordinaries/bend.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/ordinaries/chevron.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/ordinaries/chief.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/ordinaries/fess.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/ordinaries/pale.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/ordinaries/plain-cross.inc	/^    $rivetList = '';$/;"	v
rivetList	svg/ordinaries/point-dexter.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/ordinaries/point-in-point.inc	/^  $rivetList = '';$/;"	v
rivetList	svg/ordinaries/point-sinister.inc	/^  $rivetList = '';$/;"	v
rose	svg/proper.inc	/^  static $rose;$/;"	v
rot	svg/ordinary.inc	/^	  $rot = $ord_data['rotate_pattern'];$/;"	v
rot	svg/ordinary.inc	/^	  $rot = 0;$/;"	v
rot	svg/placecharge.inc	/^      $rot = $items[4];$/;"	v
rot	svg/placecharge.inc	/^  $rot = 0;$/;"	v
rot	svg/tinctures.inc	/^        $rot = '0', $rev = false, $inv = false ) {$/;"	v
rotate	svg/placecharge.inc	/^    $rotate = 0;$/;"	v
rotate	svg/transform.inc	/^    function rotate($radians)$/;"	f
rotatePath	svg/pathtools.inc	/^function rotatePath( $path, $theta ) {$/;"	f
rotatePoint	svg/pathtools.inc	/^function rotatePoint( $x, $y, $theta ) {$/;"	f
rotateX	svg/placecharge.inc	/^      $rotateX = $chargeX \/ 2;$/;"	v
rotateY	svg/placecharge.inc	/^      $rotateY = $chargeY \/ 2;$/;"	v
rotated	svg/bezier.inc	/^    function rotated($angle, ShieldPos $origin = null)$/;"	f
rotated	svg/size.inc	/^    function rotated($angle, ShieldPos $origin = null)$/;"	f
rotation	svg/placecharge.inc	/^                            $rotation = '0',$/;"	v
rotation	svg/placecharge.inc	/^        $rotation = 0 ;$/;"	v
rotation	svg/placecharge.inc	/^      $rotation = "rotate($rotate,$rotateX,$rotateY)";$/;"	v
rotation	svg/placecharge.inc	/^    $rotation = 0; \/\/ An explicit charge orientation overrides a rotation from the arrangement$/;"	v
rotation	svg/placecharge.inc	/^  $rotation = '';$/;"	v
rotation	svg/transform.inc	/^    static function rotation($radians): TransformMatrix$/;"	f
rotations	svg/linetypes.inc	/^  $rotations = array ( 'A' => 0, 'B' => 45, 'C' => 90, 'D' => 135, 'E' => 180, 'F' => 225, 'G' => 270, 'H' => 315 );$/;"	v
row	svg/transform.inc	/^    function row($i)$/;"	f
row_list	svg/arrangements.inc	/^          $row_list = explode(',',$big_rows[$number - 21]);$/;"	v
row_list	svg/arrangements.inc	/^          $row_list = explode(',',$narrow_rows[$number]);$/;"	v
row_list	svg/arrangements.inc	/^          $row_list = explode(',',$wide_rows[$number]);$/;"	v
row_list	svg/arrangements.inc	/^        $row_list = array($number);$/;"	v
row_list	svg/arrangements.inc	/^        $row_list = array_fill(0,$number,'1');$/;"	v
row_list	svg/arrangements.inc	/^    $row_list = explode(',', $rows);$/;"	v
rows	parser/english/grammar.inc	/^                $rows = array($num);$/;"	v
rows	svg/ordinaries/mount.inc	/^$rows = [];$/;"	v
runtests	tests/runtests.php	/^function runtests($match = null) {$/;"	f
rx	svg/ordinaries/shield_shape_utils.inc	/^        $rx = ($right - $left) \/ 2;$/;"	v
rx	svg/ordinaries/shield_shape_utils.inc	/^        $rx = ($right - $left);$/;"	v
rx	svg/svgtools.inc	/^    $rx = $hold_point->x * $hints->scale_x;$/;"	v
ry	svg/ordinaries/shield_shape_utils.inc	/^        $ry = ($bottom - $top) \/ 2;$/;"	v
ry	svg/ordinaries/shield_shape_utils.inc	/^        $ry = ($bottom - $top);$/;"	v
ry	svg/svgtools.inc	/^    $ry = $hold_point->y * $hints->scale_y;$/;"	v
s0	svg/bezier.inc	/^            $s0 = $p0->y > 0 ? 1 : -1;$/;"	v
s1	svg/bezier.inc	/^            $s1 = $p1->y > 0 ? 1 : -1;$/;"	v
save	parser/grammar.inc	/^  public function save() {$/;"	f
save	parser/utilities.inc	/^  public function save() {$/;"	f
save	parser/utilities.inc	/^  public function save();$/;"	f
saveshield	shieldcommon.js	/^function saveshield(url) {$/;"	f
scalar	svg/transform.inc	/^    function scalar($value)$/;"	f
scale	svg/bezier.inc	/^    function scale($x, $y = null)$/;"	f
scale	svg/bezier.inc	/^    function scale($x, $y)$/;"	f
scale	svg/getcharge.inc	/^        $scale = $targetSize \/ 1000;$/;"	v
scale	svg/getcharge.inc	/^        $scale = min ( 500\/$width, 500\/$height);$/;"	v
scale	svg/getcharge.inc	/^    $scale = (max($width,$height) \/ $sunArray['height']) * $enlargement;  \/\/ assume sun is square (!)$/;"	v
scale	svg/getwords.inc	/^            $scale = min($width \/ $glyphLine['width'], $height \/ $lineCount \/ $this->ySize);$/;"	v
scale	svg/ordinaries/mount.inc	/^    $scale = 0.75 ** $rown;$/;"	v
scale	svg/ordinaries/shield_shape_utils.inc	/^        $scale = ($layout->size->width - 2 * $mid) \/ 1000;$/;"	v
scale	svg/ordinaries/shield_shape_utils.inc	/^        $scale = ($layout->size->width - 2*$inset) \/ 1000;$/;"	v
scale	svg/ordinaries/shield_shape_utils.inc	/^        $scale = ($layout->size->width - 2*$inset) \/ 500;$/;"	v
scale	svg/quartering.inc	/^        $this->scale = $scale;$/;"	v
scale	svg/svgtools.inc	/^        $scale = ($element['width'] \/ $extra['width']);$/;"	v
scale	svg/svgtools.inc	/^        $scale = min ( $element['height'] \/ $extra['height'], $element['width'] \/ $extra['width']);$/;"	v
scale	svg/tinctures.inc	/^        $scale = max ( $chgX \/ 1000, $chgY \/ 1200 ); \/\/ multiply here to adjust relative size of fur etc. on a charge$/;"	v
scale	svg/transform.inc	/^    function scale($x, $y = null)$/;"	f
scalePath	svg/pathtools.inc	/^function scalePath ( $path, $xScale = 1, $yScale = 1 ) {$/;"	f
scale_x	svg/edges/edge_type.inc	/^                $scale_x = self::get_meta_flag($element, "scale-x", 1);$/;"	v
scale_x	svg/edges/edge_type.inc	/^        $this->scale_x = $scale_x;$/;"	v
scale_x	svg/placecharge.inc	/^    public $scale_x = 1;$/;"	v
scale_y	svg/edges/edge_type.inc	/^                $scale_y = self::get_meta_flag($element, "scale-y", 1);$/;"	v
scale_y	svg/edges/edge_type.inc	/^        $this->scale_y = $scale_y;$/;"	v
scale_y	svg/placecharge.inc	/^    public $scale_y = 1;$/;"	v
scaled	svg/size.inc	/^    function scaled($dx, $dy = null)$/;"	f
scaled	svg/size.inc	/^    function scaled($x, $y = null)$/;"	f
scaled_curve	svg/ordinaries/shield_shape_utils.inc	/^    protected function scaled_curve($tip, $scale, $direction)$/;"	f
schema	parser/grammar.inc	/^    $this->schema = $schema;$/;"	v
schema	parser/grammar.inc	/^  protected $schema;$/;"	v
search	svg/metadata.inc	/^    $search = $chargeGroup . '\/' . $chargeName;$/;"	v
search	svg/proper.inc	/^      $search = $chargeName . '\/' . $feature;$/;"	v
search	svg/proper.inc	/^    $search = $chargeGroup . '\/' . $chargeName;$/;"	v
searchMatch	parser/matcher.inc	/^  public function searchMatch ( $patterns ) {$/;"	f
searchTerm	parser/matcher.inc	/^         $searchTerm = $keyTerm = $term;$/;"	v
searchTerm	parser/matcher.inc	/^         $searchTerm = $keyTerm = $term[0];$/;"	v
secondDiv	svg/division.inc	/^  $secondDiv = null;$/;"	v
section	svg/quartering.inc	/^        $this->section = "quarter";$/;"	v
section	svg/size.inc	/^        $this->section = $section;$/;"	v
seg	svg/bezier.inc	/^            $seg = $this->sub_segments[$i];$/;"	v
seg	svg/bezier.inc	/^        $seg = $this->translated(-$p0->x, -$p0->y)->rotated(-$p0->angle_to($p1));$/;"	v
seg	svg/edges/edge_type.inc	/^                $seg = $source->line_single_intersection($line_p0, $line_p1);$/;"	v
seg	svg/edges/edge_type.inc	/^                $seg = $source->segment_at_length($i * $size);$/;"	v
seg	svg/edges/edge_type.inc	/^            $seg = $segments[$i];$/;"	v
seg	svg/edges/edge_type.inc	/^            $seg = $shape->sub_segments()[$i];$/;"	v
seg_left	svg/bezier.inc	/^        $seg_left = $p_left->pos;$/;"	v
seg_outer	svg/edges/edge_type.inc	/^                $seg_outer = $data["lines"][$i];$/;"	v
seg_right	svg/bezier.inc	/^        $seg_right = $p_right->pos;$/;"	v
segment	svg/bezier.inc	/^        $this->segment = $segment;$/;"	v
segment_at_length	svg/bezier.inc	/^    function segment_at_length($length) : SegmentAtData$/;"	f
segment_tags	svg/bezier.inc	/^        $this->segment_tags = $tags;$/;"	v
segment_tags	svg/bezier.inc	/^        $this->segment_tags = [BezierSegmentFlags::PLAIN];$/;"	v
segment_tags	svg/bezier.inc	/^        $this->segment_tags = [];$/;"	v
segment_tags	svg/bezier.inc	/^    public $segment_tags = [];$/;"	v
segments	svg/bezier.inc	/^        $this->segments = $segments;$/;"	v
segments	svg/bezier.inc	/^    function segments()$/;"	f
segments	svg/bezier.inc	/^    private $segments = [];$/;"	v
segments	svg/edges/edge_type.inc	/^            $segments = $source->reversed()->segments();$/;"	v
segments	svg/edges/edge_type.inc	/^        $segments = $source->segments();$/;"	v
segs	svg/bezier.inc	/^        $segs = [$seg1];$/;"	v
semicolon	parser/grammar.inc	/^  protected function semicolon($lookback = false) {$/;"	f
semy	svg/treatment.inc	/^    $semy = PlaceCharge($charge1, $layout, 100, 100, 100, 0);$/;"	v
semy	svg/treatment.inc	/^    $semy = PlaceCharge($charge1, $layout, 100, 100, 200, 150);$/;"	v
semyde	parser/english/grammar.inc	/^          $semyde = $this->schema->makeNode(blazonML::E_SEMYDE,null,self::tokens(), self::lineNo());$/;"	v
sep	svg/ordinaries/chevron.inc	/^            $sep = $layout->center_point->y \/ M_SQRT2;$/;"	v
sep	svg/ordinaries/chevron.inc	/^            $sep = $width * 2;$/;"	v
separator	randomblazon.php	/^    $separator = "\\n#####################\\n";$/;"	v
separator	randomblazon.php	/^$separator = "\\n created by Drawshield.net\/random\\n";$/;"	v
set	svg/transform.inc	/^    function set($row, $col, $value)$/;"	f
setOptions	randomblazon.php	/^function setOptions($newValue,$prefix = null) {$/;"	f
setReferences	analyser/references.inc	/^  public function setReferences() {$/;"	f
setRenderInfo	analyser/utilities.inc	/^function setRenderInfo(DOMElement $node, $param, $value = null ) {$/;"	f
set_a	svg/transform.inc	/^    function set_a($v) {  $this->set(0, 0, $v); }$/;"	f
set_b	svg/transform.inc	/^    function set_b($v) {  $this->set(0, 1, $v); }$/;"	f
set_c	svg/transform.inc	/^    function set_c($v) {  $this->set(1, 0, $v); }$/;"	f
set_d	svg/transform.inc	/^    function set_d($v) {  $this->set(1, 1, $v); }$/;"	f
set_tx	svg/transform.inc	/^    function set_tx($v) { $this->set(3, 0, $v); }$/;"	f
set_ty	svg/transform.inc	/^    function set_ty($v) { $this->set(3, 1, $v); }$/;"	f
setupshield	shieldcommon.js	/^function setupshield(target, size, initial, caption) {$/;"	f
sf	svg/bezier.inc	/^            $sf = $this->finish->y > 0 ? 1 : -1;$/;"	v
shape	svg/achievement.inc	/^    $shape = $layout->shape;$/;"	v
shape	svg/arrangements.inc	/^       $shape = $layout->shape;$/;"	v
shape	svg/edges/edge_type.inc	/^            $shape = $this->is_tight_corner($p0, $p1, $pm) ? $shape = $this->bottom_small : $this->bottom;$/;"	v
shape	svg/edges/edge_type.inc	/^        $shape = $this->shape;$/;"	v
shape	svg/edges/edge_type.inc	/^        $shape = clone $shape;$/;"	v
shape	svg/edges/edge_type.inc	/^        $this->shape = $this->normalized($shape);$/;"	v
shape	svg/getcharge.inc	/^                        $shape = substr($modifier, 6);$/;"	v
shape	svg/getcharge.inc	/^        $shape = 'heater';$/;"	v
shape	svg/linetypes.inc	/^  $shape = array();$/;"	v
shape	svg/ordinaries/base.inc	/^    $shape = new MutableShape();$/;"	v
shape	svg/ordinaries/bordure.inc	/^$shape = ShieldShape::from_layout($layout);$/;"	v
shape	svg/ordinaries/cross-nordic.inc	/^$shape = 'X-10Y{';$/;"	v
shape	svg/ordinaries/cross-nordic.inc	/^$shape = sprintf('X-10Y%dA%dG%da%d', $unit3, $unit3 + 10, $unit3 + 10, $unit);$/;"	v
shape	svg/ordinaries/double-tressure.inc	/^$shape = ShieldShape::from_layout($layout);$/;"	v
shape	svg/ordinaries/inescutcheon.inc	/^$shape = ShieldShape::from_layout($layout);$/;"	v
shape	svg/ordinaries/mount.inc	/^$shape = new MutableShape();$/;"	v
shape	svg/ordinaries/orle.inc	/^$shape = ShieldShape::from_layout($layout);$/;"	v
shape	svg/ordinaries/tressure.inc	/^    $shape = ShieldShape::from_layout($layout);$/;"	v
shape	svg/quartering.inc	/^        $this->shape = $shape;$/;"	v
shape	svg/size.inc	/^        $shape = $options["shape"];$/;"	v
shape	svg/size.inc	/^        $shape = 'square';$/;"	v
shape	svg/size.inc	/^        $this->shape = $shape;$/;"	v
shape_spec	svg/divisions/flag/per-bend.inc	/^    $shape_spec = "X${startX}Y${startY}A" . ($d + 200) . "c${h}e" . ($d + 200) . "g${h}";$/;"	v
shape_spec	svg/divisions/flag/per-bend.inc	/^$shape_spec = subPercent($shape_spec, $layout);$/;"	v
shape_spec	svg/ordinaries/flag/bend.inc	/^$shape_spec = "X${startX}Y${startY}A" . ($d + 200) . 'c{%25}E' . ($d + 200) . 'g{%25}';$/;"	v
shape_spec	svg/ordinaries/flag/bend.inc	/^$shape_spec = subPercent($shape_spec, $layout);$/;"	v
shape_spec	svg/ordinary.inc	/^	  $shape_spec = $ord_data['shape_spec'];$/;"	v
shield	analyser/references.inc	/^            $shield = $this->dom->createElement(blazonML::E_SHIELD);$/;"	v
shield	parser/english/grammar.inc	/^    protected function shield()$/;"	f
shield	parser/grammar.inc	/^      $shield = $this->schema->makeNode(blazonML::E_SHIELD, array ( blazonML::A_INDEX => '0' )); \/\/ TODO - add a field?$/;"	v
shield	parser/grammar.inc	/^    $shield = $this->getShield();$/;"	v
shield	svg/getcharge.inc	/^                    $shield = $child;$/;"	v
shield	svg/getcharge.inc	/^        $shield = null;$/;"	v
shield	svg/tinctures.inc	/^            $shield = makeshield( $data->type_node, new ShieldLayout(new ShieldSize(1000, 1000), $layout->shape) );$/;"	v
shield1	parser/english/grammar.inc	/^                $shield1 = $this->schema->makeNode(blazonML::E_MISSING);$/;"	v
shield2	parser/english/grammar.inc	/^                $shield2 = $this->schema->makeNode(blazonML::E_MISSING);$/;"	v
shieldAdjustments	svg/draw.inc	/^    $shieldAdjustments = [];$/;"	v
shieldNode	parser/english/grammar.inc	/^                        $shieldNode = $this->schema->makeNode(blazonML::E_SHIELD, array( blazonML::A_KEYTERM => 'shield'));$/;"	v
shieldNode	parser/grammar.inc	/^  protected $shieldNode;$/;"	v
shiftRGB	svg/tinctures.inc	/^function shiftRGB($hex, $direction="lighter") {$/;"	f
showCharge	randomblazon.php	/^                    $showCharge = false;$/;"	v
showCharge	randomblazon.php	/^    $showCharge = byChance($options['chg-chance']);$/;"	v
showCharge	randomblazon.php	/^$showCharge = false;$/;"	v
showDivision	randomblazon.php	/^    $showDivision = byChance($options['div-chance']);$/;"	v
showDivision	randomblazon.php	/^$showDivision = false;$/;"	v
showOrdinary	randomblazon.php	/^    $showOrdinary = byChance($options['ord-chance']);$/;"	v
showOrdinary	randomblazon.php	/^$showOrdinary = false;$/;"	v
shownRotation	svg/placecharge.inc	/^    $shownRotation = $hints->angle;$/;"	v
shownRotation	svg/placecharge.inc	/^  $shownRotation = 0;$/;"	v
shrinkFactor	svg/getcharge.inc	/^              $shrinkFactor = $supers[2];$/;"	v
shrinkFactor	svg/getcharge.inc	/^        $shrinkFactor = 72;  \/\/ <<< As percentage of existing charge size$/;"	v
side	svg/divisions/per-pall.inc	/^$side = $up \/ M_SQRT2;$/;"	v
side	svg/divisions/per-saltire.inc	/^$side = $arm * M_SQRT2;$/;"	v
side_off	svg/ordinaries/chevron.inc	/^$side_off = $chevron_width \/ M_SQRT2 + $within_margin \/ 2 \/ M_SQRT2;$/;"	v
side_off	svg/ordinaries/pall.inc	/^    $side_off = $width \/ M_SQRT2;$/;"	v
side_size	svg/quartering.inc	/^    $side_size = $layout->size->scaled(0.5, $h * 2);$/;"	v
side_size_norm	svg/quartering.inc	/^    $side_size_norm = $side_size->scaled($norm_factor);$/;"	v
silver	svg/proper.inc	/^  static $silver;$/;"	v
simple	analyser/references.inc	/^            $simple = $this->greyShield();$/;"	v
simple	analyser/references.inc	/^      $simple = $this->dom->createElement(blazonML::E_PLAIN);$/;"	v
simple	parser/english/grammar.inc	/^            $simple = $this->schema->makeNode(blazonML::E_PLAIN);$/;"	v
simple	parser/english/grammar.inc	/^    protected function simple()$/;"	f
simpleCharge	parser/english/grammar.inc	/^    protected function simpleCharge($assumeNum = false, $allowArr = false, $allowPos = false)$/;"	f
sin	svg/pathtools.inc	/^      $sin = sin(deg2rad($theta));$/;"	v
single_root_t	svg/bezier.inc	/^    function single_root_t($tolerance = 0.01)$/;"	f
sinister	svg/divisions/pily-bendy.inc	/^$sinister = existModifierWithKeyterm($node, 'sinister');$/;"	v
sinisterX	svg/achievement.inc	/^    $sinisterX = 1000 - $dexterX;$/;"	v
size	drawshield.php	/^$size = 500;$/;"	v
size	drawshield.php	/^$size = null;$/;"	v
size	parser/english/grammar.inc	/^                    $size = self::number();$/;"	v
size	parser/english/grammar.inc	/^                $size = null;$/;"	v
size	quickimage.php	/^  $size = strip_tags ($_GET['size']);$/;"	v
size	svg/arrangements.inc	/^            $size = $cadency ? 400 : 600;$/;"	v
size	svg/arrangements.inc	/^        $size = $boundingBox->size->scaled(1\/ ($n+1), 0.5);$/;"	v
size	svg/arrangements.inc	/^        $size = 200;$/;"	v
size	svg/arrangements.inc	/^    $size = $boundingBox->size->scaled(.4);$/;"	v
size	svg/arrangements.inc	/^    $size = intval(($radius * M_PI) \/ ($number * 0.9));$/;"	v
size	svg/bezier.inc	/^    function size()$/;"	f
size	svg/charges/mullet/mullet.inc	/^    $size = 400;$/;"	v
size	svg/edges/edge_type.inc	/^        $size = $source->length() \/ $count;$/;"	v
size	svg/ordinaries/bend-helper.inc	/^        $size = 1 \/ $n * 0.8;$/;"	v
size	svg/ordinaries/cross-nordic.inc	/^$size = (int)($unit * 0.9);$/;"	v
size	svg/ordinaries/shield_shape_utils.inc	/^        $size = new ShieldSize($width-$padding, $width-$padding);$/;"	v
size	svg/quartering.inc	/^        $this->size = $size;$/;"	v
size	svg/shield.inc	/^  $size = $layout->size->scaled(0.5, 1);$/;"	v
size	svg/shield.inc	/^  $size = $layout->size->scaled(1, 2);$/;"	v
size	svg/size.inc	/^        $size = new ShieldSize($width, $height);$/;"	v
size	svg/size.inc	/^        $this->size = $comb->size;$/;"	v
size	svg/size.inc	/^        $this->size = $size;$/;"	v
size	svg/treatment.inc	/^        $size = new ShieldSize($size_x, $size_y);$/;"	v
size	svg/treatments/tartan.inc	/^        $size = $mod->getAttribute('value');$/;"	v
sizeH	svg/linetypes.inc	/^  $sizeH = $size * 0.707;$/;"	v
sizeT	svg/linetypes.inc	/^  $sizeT = $size * 0.866;$/;"	v
sizeU	svg/linetypes.inc	/^  $sizeU = $size * 0.5;$/;"	v
sizeX	svg/placecharge.inc	/^  $sizeX = $chargeX * $Xscale;$/;"	v
sizeY	svg/placecharge.inc	/^  $sizeY = $chargeY * $Yscale;$/;"	v
size_mult	svg/edges/edge_type.inc	/^        $this->size_mult = abs(($bottom->finish()->pos->x - $bottom->start()->pos->x) \/ ($top->finish()->pos->x - $top->start()->pos->x));$/;"	v
size_x	svg/treatment.inc	/^        $size_x = $treatment_data['width'];$/;"	v
size_y	svg/treatment.inc	/^        $size_y = $treatment_data['height'];$/;"	v
skew	svg/getwords.inc	/^                    $skew = $factor * $this->fontInfo['underline-thickness'];$/;"	v
skew	svg/transform.inc	/^    function skew($x_rad, $y_rad)$/;"	f
skip_segment	svg/edges/edge_type.inc	/^    protected function skip_segment(CompiledBezierSegment $source, MutableShape $target)$/;"	f
slug	demopage.php	/^            $slug = $item[1];$/;"	v
sm	svg/bezier.inc	/^                    $sm = $pm->y > 0 ? 1 : -1;$/;"	v
solid_color	svg/getcharge.inc	/^            $solid_color = get_rgb($charge_col);$/;"	v
sourceTokens	analyser/references.inc	/^          $sourceTokens = $sourceNode->getAttribute('tokens');$/;"	v
space_pct	svg/arrangements.inc	/^  $space_pct = 0.2;$/;"	v
spareRoom	drawshield.php	/^        $spareRoom = null;$/;"	v
spareRoom	drawshield.php	/^$spareRoom = str_repeat('*', 1024 * 1024);$/;"	v
spec	svg/linetypes.inc	/^    public $spec = "";$/;"	v
spec	svg/ordinaries/bar.inc	/^        $spec = "X{$X1}Y{$Y1}h{$H1}B{$bend_length}d{$H1}F{$bend_length}";$/;"	v
spec	svg/ordinaries/bar.inc	/^        $spec = "X{$X1}Y{$Y1}h{$H4}B{$bend_length}d{$H4}F{$bend_length}";$/;"	v
spec	svg/ordinaries/bar.inc	/^        $spec = "X{$X1}Y{$palet_start}a{$H1}C{$palet_length}e{$H1}G{$palet_length}";$/;"	v
spec	svg/ordinaries/bar.inc	/^        $spec = "X{$X1}Y{$palet_start}a{$H4}C{$palet_length}e{$H4}G{$palet_length}    X{$X2}Y{$palet_start}a{$H4}C{$palet_length}e{$H4}G{$palet_length}";$/;"	v
spec	svg/ordinaries/bar.inc	/^        $spec = "X{$bar_start}Y{$Y1}A{$bar_length}c{$H1}E{$bar_length}g{$H1}";$/;"	v
spec	svg/ordinaries/bar.inc	/^        $spec = "X{$bar_start}Y{$Y1}A{$bar_length}c{$H4}E{$bar_length}g{$H4}   X{$bar_start}Y{$Y2}A{$bar_length}c{$H4}E{$bar_length}g{$H4}";$/;"	v
spec	svg/ordinaries/bar.inc	/^  $spec = '';$/;"	v
spec	svg/ordinary.inc	/^  $spec = subPercent($spec, $layout);$/;"	v
special	svg/ordinary.inc	/^    $special = [];$/;"	v
specifiers	parser/english/grammar.inc	/^            $specifiers = array();$/;"	v
split	svg/bezier.inc	/^    function split($t)$/;"	f
split	svg/bezier.inc	/^    function split()$/;"	f
splitArray	svg/getcharge.inc	/^    $splitArray = preg_split(':\/:', $node->getAttribute('keyterm'));$/;"	v
splitStyle	svg/svgtools.inc	/^function splitStyle ( $styles, $attributeKeys, $strokeCol, $strokeWidth ) {$/;"	f
splitWords	svg/getwords.inc	/^    private function splitWords($text) {$/;"	f
split_points	svg/bezier.inc	/^    private function split_points($t)$/;"	f
spot_col	svg/ordinaries/orle.inc	/^      $spot_col = createColourNode('argent');$/;"	v
spot_col	svg/ordinaries/orle.inc	/^      $spot_col = createColourNode('or');$/;"	v
spot_col	svg/ordinaries/orle.inc	/^      $spot_col = createColourNode('sable');$/;"	v
spot_col	svg/ordinaries/orle.inc	/^  $spot_col = null;$/;"	v
spots	svg/ordinaries/shield_shape_utils.inc	/^        $spots = [$/;"	v
square	svg/size.inc	/^    static function square()$/;"	f
ss	svg/bezier.inc	/^            $ss = $this->start->y > 0 ? 1 : -1;$/;"	v
stackedInput	parser/english/grammar.inc	/^                    $stackedInput = $this->phraseMatcher->furthestWord - 1;$/;"	v
stackedInput	parser/english/grammar.inc	/^                    $stackedInput = null;$/;"	v
stackedInput	parser/english/grammar.inc	/^        $stackedInput = null; \/\/ temporary store to try out ignoring words$/;"	v
staff	svg/achievement.inc	/^                    $staff = $colours[0];$/;"	v
staff	svg/achievement.inc	/^                $staff = rgb('or');$/;"	v
staff	svg/achievement.inc	/^    $staff = null;$/;"	v
start	parser/grammar.inc	/^         $start = $start < 0 ? 0 : $start; $/;"	v
start	parser/grammar.inc	/^      $start = $offset - self::PRIORWORDS;$/;"	v
start	parser/grammar.inc	/^      $start = max(1,$i - 5);$/;"	v
start	svg/bezier.inc	/^        $this->start = $start;$/;"	v
start	svg/bezier.inc	/^    function start() : BezierPoint$/;"	f
start	svg/bezier.inc	/^    function start()$/;"	f
start	svg/bezier.inc	/^    public $start;$/;"	v
start	svg/linetypes.inc	/^      $start = '-';$/;"	v
start	svg/linetypes.inc	/^    $start = $defaultStart;$/;"	v
start	svg/ordinaries/bend-helper.inc	/^        $start = 0.1 + $size \/ 2;$/;"	v
start	svg/ordinaries/bend.inc	/^  $start = 5;$/;"	v
start	svg/ordinaries/mount.inc	/^        $start = $target_width \/ 2;$/;"	v
start	svg/ordinaries/mount.inc	/^        $start = $width\/4;$/;"	v
start	svg/ordinaries/mount.inc	/^        $start = 0;$/;"	v
start	svg/ordinaries/shield_shape_utils.inc	/^                $start = atan2(-$layout->center_point->y, $layout->size->width - $layout->center_point->x);$/;"	v
start1	svg/ordinaries/shield_shape_utils.inc	/^                $start1 = atan2(-$layout->center_point->y, $layout->size->width - $layout->center_point->x);$/;"	v
startDir	svg/linetypes.inc	/^  $startDir = strtoupper($startDir);$/;"	v
startOffset	svg/charges/characters/word.inc	/^      $startOffset = '0%';$/;"	v
startOffset	svg/charges/characters/word.inc	/^      $startOffset = '100%';$/;"	v
startOffset	svg/charges/characters/word.inc	/^      $startOffset = '50%';$/;"	v
startOffset	svg/charges/characters/word.inc	/^    $startOffset = '0%';$/;"	v
startOffset	svg/charges/characters/word.inc	/^    $startOffset = '100%';$/;"	v
startOffset	svg/charges/characters/word.inc	/^    $startOffset = '50%';$/;"	v
startX	svg/divisions/flag/per-bend.inc	/^$startX = intval(-100 * cos($theta));$/;"	v
startX	svg/ordinaries/flag/bend.inc	/^$startX = intval((-100 * cos($theta)) - ($w2 * sin($theta)));$/;"	v
startY	svg/divisions/chevronny.inc	/^  $startY = $layout->division_offset->y \/ 2 + ( $i * 2 * $stepV);$/;"	v
startY	svg/divisions/flag/per-bend.inc	/^$startY = intval(-100 * sin($theta));$/;"	v
startY	svg/ordinaries/flag/bend.inc	/^$startY = intval(($w2 * cos($theta)) + (-100 * sin($theta)));$/;"	v
startswith	tests/runtests.php	/^function startswith($string, $start) {$/;"	f
state	parser/english/grammar.inc	/^            $state = self::save();$/;"	v
state	parser/english/grammar.inc	/^        $state = self::save();$/;"	v
state	parser/english/grammar.inc	/^    $state = self::save();$/;"	v
state	parser/grammar.inc	/^      $state = self::save();$/;"	v
state	parser/grammar.inc	/^    $state = self::save();$/;"	v
state	parser/matcher.inc	/^        $state = $this->tokenList->cur_word;$/;"	v
state2	parser/english/grammar.inc	/^            $state2 = self::save();$/;"	v
stateStore	parser/grammar.inc	/^    $this->stateStore = new persistentStore();$/;"	v
stateStore	parser/grammar.inc	/^  protected $stateStore;$/;"	v
step	parser/matcher.inc	/^    $step = $inc > 0 ? 1 : -1;$/;"	v
stepC	svg/divisions/barry.inc	/^$stepC = 900 \/ $num_of; \/\/ with a chief$/;"	v
stepH	svg/divisions/paly.inc	/^$stepH = 1000 \/ $num_of;$/;"	v
stepV	svg/divisions/barry-pily.inc	/^$stepV = $calcHeight \/ $num_of;$/;"	v
stepV	svg/divisions/barry.inc	/^$stepV = $calcHeight \/ $num_of;$/;"	v
stepV	svg/divisions/chevronny.inc	/^$stepV = ($layout->size->height - $layout->division_offset->y \/ 2) \/ 2 \/ ($num-1);$/;"	v
step_x	svg/ordinaries/shield_shape_utils.inc	/^        $step_x = $rect->size->width \/ $count_x;$/;"	v
step_y	svg/ordinaries/shield_shape_utils.inc	/^        $step_y = $rect->size->height \/ $count_y;$/;"	v
stop	svg/treatment.inc	/^  $stop = implode("\\n",$stops);$/;"	v
stops	svg/treatment.inc	/^  $stops = [];$/;"	v
storage	parser/utilities.inc	/^    $this->storage = array();$/;"	v
storage	parser/utilities.inc	/^  protected $storage = array();$/;"	v
storageKey	parser/utilities.inc	/^    $this->storageKey = 0;$/;"	v
storageKey	parser/utilities.inc	/^  private $storageKey = 0;$/;"	v
store	parser/utilities.inc	/^  public function store($data) {$/;"	f
str_split_unicode	svg/getwords.inc	/^    private function  str_split_unicode($str, $length = 1) {$/;"	f
stringToGlyphs	svg/getwords.inc	/^    private function stringToGlyphs($words) {$/;"	f
stroke	svg/charges/mullet/mullet.inc	/^    $stroke = 3;$/;"	v
stroke	svg/tinctures.inc	/^                        $stroke = ($targetType == 'ordinary') ? 'stroke="' . rgb('sable') . '" stroke-width="5"' : '';$/;"	v
stroke	svg/tinctures.inc	/^                $stroke = '';$/;"	v
strokeCol	svg/getcharge.inc	/^              $strokeCol = rgb($child->getAttribute(blazonML::A_PARAM));$/;"	v
strokeCol	svg/getcharge.inc	/^        $strokeCol = getStroke($charge_col, array_key_exists('fixStroke',$chg_data)); $/;"	v
strokeCol	svg/getcharge.inc	/^      $strokeCol = get_rgb($tincNode);$/;"	v
strokeCol	svg/getcharge.inc	/^    $strokeCol = null;$/;"	v
strokeColours	svg/svgtools.inc	/^$strokeColours = array ($/;"	v
style	svg/achievement.inc	/^        $style = $helmetNode->getAttribute(blazonML::A_KEYTERM);$/;"	v
style	svg/achievement.inc	/^        $style = 'esquire';$/;"	v
style	svg/svgtools.inc	/^        $style = splitStyle( $data, $existingAttributes, $strokeCol, $strokeWidth);$/;"	v
style	svg/svgtools.inc	/^  $style = ''; \/\/ decide whether to use style or fill$/;"	v
styleArray	svg/svgtools.inc	/^  $styleArray = explode(';', $styles . ';');$/;"	v
sub	svg/bezier.inc	/^            $sub = 1;$/;"	v
sub	svg/bezier.inc	/^        $sub = 0;$/;"	v
subArg	svg/linetypes.inc	/^    $subArg = $dist;$/;"	v
subArg	svg/linetypes.inc	/^    $subArg = $size;$/;"	v
subArg	svg/linetypes.inc	/^  $subArg = $size;$/;"	v
subArg	svg/linetypes.inc	/^$subArg = '';$/;"	v
subFunc	svg/linetypes.inc	/^function subFunc( $match ) {$/;"	f
subHeightPercent	svg/pathtools.inc	/^function subHeightPercent( $match, $layout ) {$/;"	f
subPercent	svg/pathtools.inc	/^function subPercent($str, $layout) {$/;"	f
subSize	svg/linetypes.inc	/^function subSize($str,$size) {$/;"	f
sub_paths	svg/bezier.inc	/^        $this->sub_paths = $cleaned;$/;"	v
sub_paths	svg/bezier.inc	/^        $this->sub_paths = $cloned;$/;"	v
sub_paths	svg/bezier.inc	/^        $this->sub_paths = $sub_paths;$/;"	v
sub_paths	svg/bezier.inc	/^    function sub_paths()$/;"	f
sub_paths	svg/bezier.inc	/^    private $sub_paths = [];$/;"	v
sub_segments	svg/bezier.inc	/^        $this->sub_segments = $sub_segments;$/;"	v
sub_segments	svg/bezier.inc	/^    function sub_segments()$/;"	f
sub_segments	svg/bezier.inc	/^    private $sub_segments = [];$/;"	v
subfile	svg/ordinary.inc	/^    $subfile = getBestMatchFilename($folder, $filename, null, false);$/;"	v
subitem	svg/svgtools.inc	/^      $subitem = htmlentities((string)$element, ENT_XML1);$/;"	v
subitem	svg/svgtools.inc	/^  $subitem = '';$/;"	v
subshields	parser/english/grammar.inc	/^        $subshields = array_fill(1, 64, null);$/;"	v
subtype	svg/division.inc	/^  $subtype = $node->getAttribute('keyterm');$/;"	v
subtype	svg/ordinaries/bar.inc	/^$subtype = $node->getAttribute('keyterm');$/;"	v
subtype	svg/ordinary.inc	/^    $subtype = $node->getAttribute('keyterm');$/;"	v
suffix	svg/charges/celestial/star.inc	/^$suffix = '-of' . $num_of;$/;"	v
suffix	svg/charges/label/label.inc	/^  $suffix = '-dovetailed';$/;"	v
suffix	svg/charges/label/label.inc	/^  $suffix = '-pattee';$/;"	v
suffix	svg/charges/label/label.inc	/^$suffix = '-straight';$/;"	v
suffix	svg/charges/mullet/mullet.inc	/^    $suffix = '-of' . $num_of . '-voided-interlaced';$/;"	v
sunArray	svg/getcharge.inc	/^    $sunArray = getSvgFragment($sunOutline,array(),'celestial','sun-outline', array(), null); \/\/ don't set stroke, we will do that below$/;"	v
sunBody	svg/getcharge.inc	/^    $sunBody = '<g fill="' . rgb('or') . ' " stroke="' . rgb('stroke-light') . '" transform=" scale(' . $scale . ') translate(' . "$Xshift,$Yshift" . ')">' . $sunArray['body'] . '<\/g>';$/;"	v
sunOutline	svg/getcharge.inc	/^    $sunOutline = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>$/;"	v
supers	svg/getcharge.inc	/^          $supers = explode(',',$chg_data['superposition']);$/;"	v
supportCount	svg/achievement.inc	/^    $supportCount = 0;$/;"	v
supportNode	parser/english/grammar.inc	/^        $supportNode = $this->schema->makeNode(blazonML::E_SUPPORTERS, array ($/;"	v
supporters	parser/english/grammar.inc	/^    protected function supporters() {$/;"	f
supports	svg/draw.inc	/^                            $supports = drawSupporters($subNode, $layout);$/;"	v
supports	svg/draw.inc	/^    $supports = '';$/;"	v
svg	php.tags	/^class	svg\/svgtools.inc	\/^      $class = "feature $id";$\/;"	v$/;"	c
svg	php.tags	/^class	svg\/svgtools.inc	\/^    $class = '';$\/;"	v$/;"	c
svg	svg/achievement.inc	/^        $svg = '<g transform="scale(0.9,0.9) translate(50,180)">' . $svg . "<\/g>\\n";$/;"	v
svg	svg/achievement.inc	/^        $svg = file_get_contents('svg\/components\/scroll\/plain.svg');$/;"	v
svg	svg/achievement.inc	/^        $svg = file_get_contents('svg\/components\/scroll\/plaque.svg');$/;"	v
svg	svg/achievement.inc	/^        $svg = str_replace('%COLOUR%', $colour, $svg);$/;"	v
svg	svg/achievement.inc	/^        $svg = str_replace('%FONT-SIZE%', "${fontSize}px", $svg);$/;"	v
svg	svg/achievement.inc	/^        $svg = str_replace('%TEXT%', htmlentities($text, ENT_XML1), $svg);$/;"	v
svg	svg/achievement.inc	/^        $svg = str_replace('%UP%', $up, $svg);$/;"	v
svg	svg/achievement.inc	/^    $svg = file_get_contents("svg\/components\/helmet\/$style.svg");$/;"	v
svg	svg/achievement.inc	/^    $svg = file_get_contents("svg\/components\/mantling\/$type.svg");$/;"	v
svg	svg/achievement.inc	/^    $svg = file_get_contents("svg\/components\/torse\/$type.svg");$/;"	v
svg	svg/achievement.inc	/^    $svg = getSvgFragment(file_get_contents("svg\/components\/fringes\/$shape.svg"), array(), 'fringes', $shape,$/;"	v
svg	svg/charges/characters/digit.inc	/^    $svg = '';$/;"	v
svg	svg/charges/characters/digit.inc	/^    $svg = '<?xml version="1.0" encoding="UTF-8"?>$/;"	v
svg	svg/charges/characters/letter.inc	/^$svg = '';$/;"	v
svg	svg/charges/characters/letter.inc	/^$svg = '<?xml version="1.0" encoding="UTF-8"?>$/;"	v
svg	svg/charges/sports/number.inc	/^$svg = '<?xml version="1.0" encoding="UTF-8"?>$/;"	v
svg	svg/divisions/barry-pily.inc	/^$svg = '';$/;"	v
svg	svg/getwords.inc	/^            $svg = '<g transform="scale(1,-1) translate(0, -' . $this->yHeight . ')">' . $svg . "<\/g>";$/;"	v
svg	svg/getwords.inc	/^        $svg = '';$/;"	v
svg	svg/ordinary.inc	/^    $svg = simplexml_load_file( $folder . $subfile);$/;"	v
svg	svg/svgtools.inc	/^        $svg = simplexml_load_string('<?xml version="1.0" encoding="UTF-8" standalone="no"?>$/;"	v
svg	svg/treatments/tartan.inc	/^$svg = "<g>\\n";$/;"	v
svgText	svg/charges/characters/word.inc	/^$svgText = '';$/;"	v
svg_id	svg/getcharge.inc	/^      $svg_id = "ds_filter_fimbriated_$filter_id";$/;"	v
svg_id	svg/getcharge.inc	/^      $svg_id = "ds_filter_voided_$filter_id";$/;"	v
svg_path	svg/ordinaries/shield_shape_utils.inc	/^    function svg_path(ShieldLayout $layout, $inset, $reversed = false, MutableShape $builder = null)$/;"	f
svg_rect	svg/size.inc	/^    function svg_rect()$/;"	f
svg_rotate	svg/transform.inc	/^    function svg_rotate($degrees, $x = 0, $y = 0)$/;"	f
svg_transform	svg/quartering.inc	/^    function svg_transform()$/;"	f
swap	svg/pathtools.inc	/^          $swap = $swap == 1? 0 : 1;$/;"	v
swapCharges	parser/english/grammar.inc	/^                            $swapCharges = true;$/;"	v
swapCharges	parser/english/grammar.inc	/^                        $swapCharges = true; \/\/ turn this into case (1rose)$/;"	v
swapCharges	parser/english/grammar.inc	/^                    $swapCharges = true; \/\/ turn this into case (6)$/;"	v
swapCharges	parser/english/grammar.inc	/^                $swapCharges = false;$/;"	v
swapCharges	parser/english/grammar.inc	/^                $swapCharges = true; \/\/ turn this into case (4)$/;"	v
swapCharges	parser/english/grammar.inc	/^            $swapCharges = false;$/;"	v
symmetrical	parser/english/grammar.inc	/^                    $symmetrical = false;$/;"	v
symmetrical	parser/english/grammar.inc	/^                    $symmetrical = true;$/;"	v
symmetrical	parser/english/grammar.inc	/^        $symmetrical = true;$/;"	v
symmetrical	svg/edges/edge_type.inc	/^                $symmetrical = self::get_meta_flag($element, "symmetrical");$/;"	v
t	svg/bezier.inc	/^                $t = $i\/$resolution;$/;"	v
t	svg/bezier.inc	/^            $t = ($t2-$t1) \/ (1-$t1);$/;"	v
t	svg/bezier.inc	/^            $t = abs($this->start->y) \/ $dy;$/;"	v
t	svg/bezier.inc	/^        $t = $this->line_single_intersection_t($p0, $p1);$/;"	v
t	svg/bezier.inc	/^        $this->t = $t;$/;"	v
t	svg/ordinaries/mount.inc	/^            $t = $arch_back->line_single_intersection_t($/;"	v
t	svg/size.inc	/^        $t = $this->top() + $y1;$/;"	v
t0	svg/bezier.inc	/^            $t0 = $t1;$/;"	v
t0	svg/bezier.inc	/^        $t0 = 0;$/;"	v
t1	svg/bezier.inc	/^            $t1 = $i\/count($this->length_steps);$/;"	v
t1	svg/bezier.inc	/^            $t1 = $t;$/;"	v
t1	svg/bezier.inc	/^            $t1 = (float)$t1;$/;"	v
t1	svg/bezier.inc	/^        $t1 = array_shift($positions);$/;"	v
t_at_length	svg/bezier.inc	/^    function t_at_length($length)$/;"	f
t_step	svg/ordinaries/shield_shape_utils.inc	/^        $t_step = 1 \/ $n_bez;$/;"	v
t_word	parser/matcher.inc	/^          $t_word = $this->tokenList->cur_word - 1;$/;"	v
t_word	parser/matcher.inc	/^    $t_word = $this->tokenList->cur_word;$/;"	v
table_cat	demopage.php	/^    function table_cat($title, $type, $items)$/;"	f
table_check	demopage.php	/^    function table_check($title, $slug)$/;"	f
table_items	demopage.php	/^    function table_items($type, $items)$/;"	f
tag	svg/bezier.inc	/^                    $tag = $this->segment_tags[$i];$/;"	v
tag	svg/bezier.inc	/^                $tag = BezierSegmentFlags::PLAIN;$/;"	v
tag	svg/bezier.inc	/^        $tag = BezierSegmentFlags::NORMAL;$/;"	v
tag_old	svg/bezier.inc	/^            $tag_old = $tag;$/;"	v
tag_old	svg/bezier.inc	/^        $tag_old = $this->segment_tags[0] ?? BezierSegmentFlags::NORMAL;$/;"	v
tag_segment	svg/bezier.inc	/^    function tag_segment($flags)$/;"	f
tags	svg/bezier.inc	/^        $tags = [];$/;"	v
tan	svg/bezier.inc	/^            $tan = $this->adjust_tangent($first->tan_out, $first->pos, $off[0]);$/;"	v
tan	svg/bezier.inc	/^            $tan = $this->adjust_tangent($last->tan_in, $last->pos, $off[1]);$/;"	v
tan1	svg/bezier.inc	/^        $this->tan1 = $tan1;$/;"	v
tan1	svg/bezier.inc	/^    public $tan1;$/;"	v
tan1	svg/ordinaries/shield_shape_utils.inc	/^        $this->tan1 = $tan1;$/;"	v
tan2	svg/bezier.inc	/^        $this->tan2 = $tan2;$/;"	v
tan2	svg/bezier.inc	/^    public $tan2;$/;"	v
tan2	svg/ordinaries/shield_shape_utils.inc	/^        $this->tan2 = $tan2;$/;"	v
tan_in	svg/bezier.inc	/^        $this->tan_in = $tan_in ?? clone $pos;$/;"	v
tan_in	svg/bezier.inc	/^        $this->tan_in = $this->tan_in->translated($p->x, $p->y);$/;"	v
tan_in	svg/bezier.inc	/^        $this->tan_in = clone $this->tan_in;$/;"	v
tan_in	svg/bezier.inc	/^        $this->tan_in = new ShieldPos($this->tan_in->x * $x, $this->tan_in->y * $y);$/;"	v
tan_in	svg/bezier.inc	/^    public $tan_in;$/;"	v
tan_in_1	svg/ordinaries/cross-formy.inc	/^$tan_in_1 = 9;$/;"	v
tan_in_2	svg/ordinaries/cross-formy.inc	/^$tan_in_2 = 166;$/;"	v
tan_out	svg/bezier.inc	/^        $this->tan_out = $tan_out ?? clone $pos;$/;"	v
tan_out	svg/bezier.inc	/^        $this->tan_out = $this->tan_out->translated($p->x, $p->y);$/;"	v
tan_out	svg/bezier.inc	/^        $this->tan_out = clone $this->tan_out;$/;"	v
tan_out	svg/bezier.inc	/^        $this->tan_out = new ShieldPos($this->tan_out->x * $x, $this->tan_out->y * $y);$/;"	v
tan_out	svg/bezier.inc	/^    public $tan_out;$/;"	v
tan_out_1	svg/ordinaries/cross-formy.inc	/^$tan_out_1 = 136.88444;$/;"	v
tan_out_2	svg/ordinaries/cross-formy.inc	/^$tan_out_2 = 91.07927;$/;"	v
tangent	svg/bezier.inc	/^    function tangent($t)$/;"	f
tangent	svg/bezier.inc	/^    function tangent()$/;"	f
target	analyser/references.inc	/^          $target = $refNodes->item(0);$/;"	v
target	analyser/references.inc	/^        $target = $refNodes->item($refNodes->length - 1);$/;"	v
target	analyser/references.inc	/^        $target = $refNodes->item(0);$/;"	v
target	svg/arrangements.inc	/^       $target = $shape . '-';$/;"	v
target	tests/tests.inc	/^$target="\/include\/drawshield.php?";$/;"	v
targetCentre	svg/getcharge.inc	/^        $targetCentre = $targetSize \/ 2;$/;"	v
targetColours	svg/svgtools.inc	/^$targetColours = array ($/;"	v
targetID	analyser/references.inc	/^          $targetID = $target->getAttribute('ID');$/;"	v
targetID	analyser/references.inc	/^        $targetID = $target->getAttribute('ID');$/;"	v
targetKeyterm	svg/tinctures.inc	/^        $targetKeyterm = $targetNode->getAttribute('keyterm');$/;"	v
targetKeyterm	svg/tinctures.inc	/^    $targetKeyterm = "";$/;"	v
targetNode	svg/tinctures.inc	/^    $targetNode = $tinctureNode->parentNode;$/;"	v
targetSize	svg/getcharge.inc	/^        $targetSize = min ( $width * ($shrinkFactor \/ 100), $height * ($shrinkFactor \/ 100));$/;"	v
targetType	svg/tinctures.inc	/^    $targetType = $targetNode->nodeName;$/;"	v
target_width	svg/ordinaries/mount.inc	/^    $target_width = $layout->size->width * $scale;$/;"	v
tartan	parser/english/grammar.inc	/^    protected function tartan() {$/;"	f
tartanPattern	svg/treatments/tartan.inc	/^    $tartanPattern = [$/;"	v
tartanPattern	svg/treatments/tartan.inc	/^$tartanPattern = [];$/;"	v
temp	parser/english/grammar.inc	/^                        $temp = $otherCharge;$/;"	v
temp	svg/getwords.inc	/^            $temp = "<g fill=\\"$fill\\" transform=\\"translate($centering,$yShift) scale($scale, -$scale)\\">\\n" .$/;"	v
temp	svg/placecharge.inc	/^          $temp = $Xflex; $Xflex = $Yflex; $Yflex = $temp;$/;"	v
temp	svg/placecharge.inc	/^          $temp = $chargeX; $chargeX = $chargeY; $chargeY = $temp;$/;"	v
temp	svg/placecharge.inc	/^        $temp = $Xflex; $Xflex = $Yflex; $Yflex = $temp;$/;"	v
temp	svg/placecharge.inc	/^        $temp = $chargeX; $chargeX = $chargeY; $chargeY = $temp;$/;"	v
temp	svg/placecharge.inc	/^      $temp = $boundX;$/;"	v
tempBody	svg/ordinary.inc	/^        $tempBody = '';$/;"	v
tempBody	svg/ordinary.inc	/^    $tempBody = '';$/;"	v
tempPath	svg/pathtools.inc	/^          $tempPath = $newCPStart . $newCPEnd . $newEnd . $tempPath;$/;"	v
tempPath	svg/pathtools.inc	/^          $tempPath = sprintf('%.4g,%.4g ', $newX,$newY) . $tempPath;$/;"	v
tempPath	svg/pathtools.inc	/^        $tempPath = $command . $tempPath;$/;"	v
tempPath	svg/pathtools.inc	/^        $tempPath = $command;$/;"	v
tempPath	svg/pathtools.inc	/^        $tempPath = '';$/;"	v
tempPath	svg/pathtools.inc	/^        $tempPath = 'c';$/;"	v
tempPath	svg/pathtools.inc	/^        $tempPath = strtolower($command);$/;"	v
temp_word	parser/tokeniser.inc	/^              $temp_word = ";;";$/;"	v
temp_word	parser/tokeniser.inc	/^            $temp_word = ';';$/;"	v
terms	parser/matcher.inc	/^    $terms = $this->patternDB->getPatterns($patterns);$/;"	v
testcases	tests/tests.inc	/^$testcases = "testcases\/";$/;"	v
text	parser/english/grammar.inc	/^    $text = $this->phraseMatcher->getValue();$/;"	v
text	svg/achievement.inc	/^    $text = $mottoNode->getAttribute('text');$/;"	v
textAlign	svg/charges/characters/word.inc	/^$textAlign = 'middle';$/;"	v
textLayout	svg/charges/characters/word.inc	/^    $textLayout = 'block';$/;"	v
textLayout	svg/charges/characters/word.inc	/^    $textLayout = 'embowed';$/;"	v
textLayout	svg/charges/characters/word.inc	/^    $textLayout = 'enarched';$/;"	v
textLayout	svg/charges/characters/word.inc	/^    $textLayout = 'encircled';$/;"	v
textLayout	svg/charges/characters/word.inc	/^    $textLayout = 'wavy';$/;"	v
textLayout	svg/charges/characters/word.inc	/^$textLayout = WordBuilder::LEFT;$/;"	v
textLen	svg/achievement.inc	/^        $textLen = strlen($text);$/;"	v
textOptions	svg/charges/characters/word.inc	/^$textOptions = array();$/;"	v
textOptions	svg/getwords.inc	/^        $this->textOptions = [ \/\/ set some defaults$/;"	v
textOptions	svg/getwords.inc	/^    private $textOptions;$/;"	v
theID	analyser/references.inc	/^            $theID = unique('N1-');$/;"	v
theMod	parser/english/grammar.inc	/^                    $theMod = $betweenMod;$/;"	v
theMod	parser/english/grammar.inc	/^                    $theMod = $nearMod;$/;"	v
theMod	parser/english/grammar.inc	/^                    $theMod = $onMod;$/;"	v
theta	svg/divisions/flag/per-bend.inc	/^$theta = atan($h\/1000);$/;"	v
theta	svg/ordinaries/flag/bend.inc	/^$theta = atan($h\/1000);$/;"	v
thisID	analyser/references.inc	/^            $thisID = $subShield->getAttribute('ID');$/;"	v
thisMessage	drawshield.php	/^          $thisMessage = [];$/;"	v
threadScale	svg/treatments/tartan.inc	/^    $threadScale = 1;$/;"	v
threadScale	svg/treatments/tartan.inc	/^    $threadScale = 3;$/;"	v
threadScale	svg/treatments/tartan.inc	/^$threadScale = 2; \/\/ default$/;"	v
threadcount	parser/english/grammar.inc	/^    protected function threadcount($value) {$/;"	f
tight	svg/edges/edge_type.inc	/^            $tight = $this->is_tight_corner($/;"	v
tinc	analyser/utilities.inc	/^  $tinc = $dom->createElement('tincture');$/;"	v
tinc	parser/english/grammar.inc	/^                $tinc = $this->schema->makeNode(blazonML::E_TINCTURE, array(blazonML::A_ORIGIN => 'given',$/;"	v
tinc	svg/achievement.inc	/^        $tinc = $fringeNode->firstChild;$/;"	v
tinc	svg/achievement.inc	/^        $tinc = createColourNode('or' );$/;"	v
tinc	svg/ordinaries/orle.inc	/^$tinc = getTinctureNode($node);$/;"	v
tinc1	parser/english/grammar.inc	/^          $tinc1 = $this->schema->makeNode(blazonML::E_TINCTURE, array ( blazonML::A_INDEX => '1'));$/;"	v
tinc1	parser/english/grammar.inc	/^          $tinc1 = $this->schema->makeNode(blazonML::E_TINCTURE, array(blazonML::A_INDEX => '1',$/;"	v
tinc1	svg/ordinary.inc	/^	$tinc1 = getTinctureNode($node,'1');$/;"	v
tinc2	parser/english/grammar.inc	/^                $tinc2 = self::tincture(true); \/\/ Must have a tincture$/;"	v
tinc2	parser/english/grammar.inc	/^            $tinc2 = self::tincture(!$grady);$/;"	v
tinc2	parser/english/grammar.inc	/^      $tinc2 = self::tincture(!$grady); \/\/ grady might not need second tincture$/;"	v
tincCount	parser/english/grammar.inc	/^            $tincCount = 2;$/;"	v
tincCount	parser/english/grammar.inc	/^      $tincCount = 0;$/;"	v
tincNode	parser/english/grammar.inc	/^        $tincNode = self::tincture();$/;"	v
tincNode	svg/getcharge.inc	/^      $tincNode = getTinctureNode($fimNode);$/;"	v
tincture	analyser/utilities.inc	/^  $tincture = $dom->createElement('tincture');$/;"	v
tincture	parser/english/grammar.inc	/^  protected function tincture($required=false) {$/;"	f
tincture	svg/achievement.inc	/^                        $tincture = $locNode->firstChild;$/;"	v
tincture	svg/achievement.inc	/^                $tincture = $location->childNodes->item($j);$/;"	v
tincture	svg/placecharge.inc	/^      $tincture = $child;$/;"	v
tincture	svg/placecharge.inc	/^  $tincture = null;$/;"	v
tincture	svg/svgtools.inc	/^    $tincture = $xpath->query("tincture", $held["node"]);$/;"	v
tinctureType	svg/getcharge.inc	/^              $tinctureType = $featureTinc->firstChild;$/;"	v
tincture_data	svg/achievement.inc	/^                $tincture_data = new TinctureData($tincture);$/;"	v
tincture_data	svg/getcharge.inc	/^                    $tincture_data = new TinctureData($featureTinc);$/;"	v
tinctures	parser/english/grammar.inc	/^      $tinctures = [];$/;"	v
tinctures	svg/division.inc	/^  $tinctures = array();$/;"	v
tinctures	svg/tinctures.inc	/^            $tinctures = array_merge($tinctures, $options['customPalette']);$/;"	v
tinctures	svg/tinctures.inc	/^            $tinctures = array_merge($tinctures, readTinctureFile(__dir__ . '\/schemes\/' . $palette . '.txt', 'heraldic'));$/;"	v
tinctures	svg/tinctures.inc	/^          $tinctures = array_merge($tinctures, readTinctureFile(__dir__ . '\/schemes\/tartan.txt','tartan'));$/;"	v
tinctures	svg/tinctures.inc	/^          $tinctures = array_merge($tinctures, readTinctureFile(__dir__ . '\/schemes\/warhammer.txt', 'wh'));$/;"	v
tinctures	svg/tinctures.inc	/^          $tinctures = array_merge($tinctures, readTinctureFile(__dir__ . '\/schemes\/web.txt','web'));$/;"	v
tinctures	svg/tinctures.inc	/^        $tinctures = readTinctureFile(__dir__ . '\/schemes\/drawshield.txt','heraldic');$/;"	v
tinctures	svg/tinctures.inc	/^    static $tinctures = array ();$/;"	v
tinctures	svg/treatment.inc	/^  $tinctures = array();$/;"	v
tip	svg/ordinaries/mount.inc	/^$tip = $layout->size->height - $height;$/;"	v
tip	svg/ordinaries/shield_shape_utils.inc	/^        $tip = new ShieldPos($inset, $layout->size->height - ($inset + $this->margin_bottom) * 1.5 );$/;"	v
tip	svg/ordinaries/shield_shape_utils.inc	/^        $tip = new ShieldPos($layout->center_point->x, $layout->size->height - $inset - $this->margin_bottom);$/;"	v
tip	svg/ordinaries/shield_shape_utils.inc	/^        $tip = new ShieldPos($layout->size->width - $inset, $layout->size->height - ($inset + $this->margin_bottom) * 1.5 );$/;"	v
tip	svg/ordinaries/shield_shape_utils.inc	/^        $tip = new ShieldPos($layout->size->width \/ 2, $layout->size->height - $this->margin_bottom - $mid);$/;"	v
tip_pos	svg/ordinaries/mount.inc	/^        $tip_pos = new ShieldPos($tip_x, $ystart + $arch->point_at_length($tip_x \/ $layout->size->width * $arch->length())->y);$/;"	v
tip_x	svg/ordinaries/mount.inc	/^        $tip_x = $start + $i * $dx;$/;"	v
title	svg/getcharge.inc	/^    $title = 'missing';$/;"	v
title	svg/getcharge.inc	/^  $title = '???';$/;"	v
title	svg/tinctures.inc	/^            $title = '<title>' . $data->type_node->getAttribute('keyterm') . '<\/title>';$/;"	v
tm	svg/bezier.inc	/^                    $tm = ($t0+$t1) \/ 2;$/;"	v
tmp	svg/getwords.inc	/^            $tmp = $chunks;$/;"	v
tmp	svg/getwords.inc	/^        $tmp = preg_split('~~u', $str, -1, PREG_SPLIT_NO_EMPTY);$/;"	v
toReverse	svg/linetypes.inc	/^$toReverse = array ( 'A' => 'E', 'B' => 'F', 'C' => 'G', 'D' => 'H', 'E' => 'A', 'F' => 'B', 'G' => 'C', 'H' => 'D', $/;"	v
to_identity	svg/transform.inc	/^    function to_identity()$/;"	f
to_layout	svg/quartering.inc	/^    function to_layout()$/;"	f
to_svg_d	svg/bezier.inc	/^    function to_svg_d()$/;"	f
to_svg_path	svg/bezier.inc	/^    function to_svg_path($attrs=[])$/;"	f
to_svg_transform	svg/transform.inc	/^    function to_svg_transform()$/;"	f
tok	svg/bezier.inc	/^            $tok = $this->curtok();$/;"	v
tokenList	parser/grammar.inc	/^    $this->tokenList = $tokenList;$/;"	v
tokenList	parser/grammar.inc	/^  protected $tokenList;$/;"	v
tokenList	parser/matcher.inc	/^    $this->tokenList = $tokenList;$/;"	v
tokenList	parser/matcher.inc	/^  protected $tokenList;$/;"	v
tokenList	parser/parser.inc	/^    $this->tokenList = new tokeniser($blazon);$/;"	v
tokenList	parser/parser.inc	/^  protected $tokenList;$/;"	v
tokenNode	parser/parser.inc	/^      $tokenNode = $this->xmlMaker->createElement(blazonML::E_TOKEN);$/;"	v
tokenValue	randomblazon.php	/^            $tokenValue = substr($token,1,strlen($token)-2);$/;"	v
tokeniser	parser/tokeniser.inc	/^class tokeniser {$/;"	c
tokens	parser/english/grammar.inc	/^        $tokens = self::tokens();$/;"	v
tokens	parser/grammar.inc	/^      $tokens = $this->tokenList->getTokens();$/;"	v
tokens	parser/grammar.inc	/^  protected function tokens () { return $this->phraseMatcher->getMatchedTokens(); }$/;"	f
tokens	parser/parser.inc	/^    $tokens = $this->tokenList->getTokens();$/;"	v
tokens	randomblazon.php	/^    $tokens = preg_split("\/([ ,;\\"'\\\\.]+)\/", $tokenString, -1, PREG_SPLIT_DELIM_CAPTURE );$/;"	v
tokens	svg/bezier.inc	/^        $this->tokens = preg_split('\/(,|\\s)+\/', $add_spaces);$/;"	v
tokpos	svg/bezier.inc	/^        $this->tokpos = 0;$/;"	v
top	svg/divisions/pily-bendy.inc	/^$top = $layout->division_offset->y;$/;"	v
top	svg/divisions/pily.inc	/^$top = $layout->division_offset->y;$/;"	v
top	svg/ordinaries/flag/saltire.inc	/^$top = $left = 0;$/;"	v
top	svg/ordinaries/shield_shape_utils.inc	/^        $top = $inset;$/;"	v
top	svg/size.inc	/^    function top()$/;"	f
topCharge	parser/english/grammar.inc	/^                        $topCharge = $otherCharge;$/;"	v
topNode	parser/parser.inc	/^    $topNode = $this->xmlMaker->createElementNS('http:\/\/drawshield.net\/blazonML',blazonML::E_BLAZON);$/;"	v
torse	parser/english/grammar.inc	/^  protected function torse() {$/;"	f
torse	svg/achievement.inc	/^                $torse = drawTorse($childNode);$/;"	v
torse	svg/achievement.inc	/^    $torse = null;$/;"	v
torseNode	parser/english/grammar.inc	/^    $torseNode = $this->schema->makeNode(blazonML::E_TORSE, array ($/;"	v
tot_counts	svg/edges/edge_type.inc	/^        $tot_counts = 0;$/;"	v
totalLength	svg/charges/characters/word.inc	/^    $totalLength = strlen($item);$/;"	v
totalWidth	svg/charges/characters/digit.inc	/^    $totalWidth = 0;$/;"	v
totalWidth	svg/charges/characters/letter.inc	/^$totalWidth = 0;$/;"	v
total_h	svg/arrangements.inc	/^                $total_h = $layout->size->height;$/;"	v
total_w	svg/arrangements.inc	/^                $total_w = $layout->size->width;$/;"	v
trailer	svg/draw.inc	/^        $trailer =  "<\/svg>\\n";$/;"	v
transform	svg/ordinary.inc	/^	$transform = '';$/;"	v
transform	svg/placecharge.inc	/^  $transform = '';$/;"	v
transform	svg/quartering.inc	/^            $transform = $quarter->svg_transform();$/;"	v
transform	svg/svgtools.inc	/^    $transform = TransformMatrix::from_svg_transform($anchor_transform);$/;"	v
transform	svg/svgtools.inc	/^    $transform = TransformMatrix::from_svg_transform($element['transform'] ?? "");$/;"	v
transform_attr	svg/svgtools.inc	/^    $transform_attr = $transform->to_svg_transform();$/;"	v
translate	svg/bezier.inc	/^    function translate()$/;"	f
translate	svg/bezier.inc	/^    function translate(ShieldPos $p)$/;"	f
translate	svg/transform.inc	/^    function translate($x, $y = null)$/;"	f
translatePath	svg/pathtools.inc	/^function translatePath( $path, $xTrans, $yTrans ) {$/;"	f
translated	svg/bezier.inc	/^    function translated($dx, $dy)$/;"	f
translated	svg/size.inc	/^    function translated($dx, $dy)$/;"	f
translated	svg/size.inc	/^    function translated($x, $y)$/;"	f
transliterate	parser/utilities.inc	/^function transliterate($string) {$/;"	f
treatPatt_id	svg/tinctures.inc	/^                    $treatPatt_id = add_def ( 'pattern ' . $data->pattern_transform .$/;"	v
treat_data	svg/tinctures.inc	/^                    $treat_data = makeTreatment( $this->type_node, $layout );$/;"	v
treat_data	svg/tinctures.inc	/^                    $treat_data = makeTreatment($counterTreatment, $layout, true);$/;"	v
treat_data	svg/tinctures.inc	/^                $treat_data = makeSemy($this->type_node, $layout);$/;"	v
treatment	parser/english/grammar.inc	/^  protected function treatment() {$/;"	f
treatment	svg/tinctures.inc	/^                $treatment = $xpath->query('preceding::field\/tincture\/treatment',$data->node);$/;"	v
treatment	svg/treatment.inc	/^        $treatment = $treatment_data['body'];$/;"	v
treatment_data	svg/treatment.inc	/^            $treatment_data = getSvgTreatment("${folder}checky.svg");$/;"	v
treatment_data	svg/treatment.inc	/^            $treatment_data = getSvgTreatment($filename);$/;"	v
treatment_data	svg/treatment.inc	/^  $treatment_data = [];$/;"	v
turn	svg/arrangements.inc	/^    $turn = 360 \/ $number;$/;"	v
tx	svg/transform.inc	/^    function tx(){ return $this->get(3, 0); }$/;"	f
ty	svg/transform.inc	/^    function ty(){ return $this->get(3, 1); }$/;"	f
type	parser/english/grammar.inc	/^            $type = $parts[1];$/;"	v
type	svg/achievement.inc	/^        $type = $mantlingNode->getAttribute(blazonML::A_KEYTERM);$/;"	v
type	svg/achievement.inc	/^        $type = $torseNode->getAttribute(blazonML::A_KEYTERM);$/;"	v
type	svg/achievement.inc	/^        $type = 'ribbons';$/;"	v
type	svg/achievement.inc	/^        $type = 'torse';$/;"	v
type	svg/edges/edge_type.inc	/^        $type = self::get_meta_flag($element, "type", "repeating");$/;"	v
type	svg/ordinary.inc	/^                $type = $onObject->getAttribute('keyterm'); \/\/ TODO can we find this out from a flag?$/;"	v
type	svg/svgtools.inc	/^    $type = $element_words[0];$/;"	v
type	svg/treatment.inc	/^  $type = $node->getAttribute("keyterm");$/;"	v
type_name	svg/tinctures.inc	/^        $this->type_name = $this->type_node->nodeName;$/;"	v
type_node	svg/tinctures.inc	/^            $this->type_node = createColourNode('gray','1');$/;"	v
type_node	svg/tinctures.inc	/^        $this->type_node = $this->node->firstChild;$/;"	v
uid	parser/utilities.inc	/^    $this->uid = new unique();$/;"	v
uid	parser/utilities.inc	/^  protected $uid;$/;"	v
unchecked_t_at_length	svg/bezier.inc	/^    private function unchecked_t_at_length($length)$/;"	f
underline	svg/charges/characters/word.inc	/^$underline = false;$/;"	v
underlying_div	svg/arrangements.inc	/^      $underlying_div = $divisionNode->getAttribute('keyterm');$/;"	v
underlying_div	svg/arrangements.inc	/^      $underlying_div = null;$/;"	v
underside	svg/edges/edge_type.inc	/^        $underside = $segments[0]->flags() & BezierSegmentFlags::UNDERSIDE;$/;"	v
uni_num	parser/utilities.inc	/^  static $uni_num = 0;$/;"	v
unique	parser/utilities.inc	/^class unique {$/;"	c
unique	parser/utilities.inc	/^function unique($prefix = 'item') {$/;"	f
unit	svg/ordinaries/cross-nordic.inc	/^$unit = (int)$height \/ 7;$/;"	v
unit3	svg/ordinaries/cross-nordic.inc	/^$unit3 = $unit * 3;$/;"	v
unit5	svg/ordinaries/cross-nordic.inc	/^$unit5 = 1000 - $unit - $unit3; \/\/ actually whatever is left over$/;"	v
up	svg/achievement.inc	/^                $up = 12;$/;"	v
up	svg/achievement.inc	/^            $up = ($textLen - 10) \/ 1.5;$/;"	v
up	svg/achievement.inc	/^        $up = 2;$/;"	v
up	svg/divisions/per-pall.inc	/^$up = (max($layout->center_point->x, $layout->center_point->y) + $margin)  * M_SQRT2;$/;"	v
up	svg/divisions/quarterly.inc	/^$up = $cy + $margin;$/;"	v
up	svg/linetypes.inc	/^    function up($length)$/;"	f
up_left	svg/linetypes.inc	/^    function up_left($length)$/;"	f
up_left_plain	svg/linetypes.inc	/^    function up_left_plain($length)$/;"	f
up_plain	svg/linetypes.inc	/^    function up_plain($length)$/;"	f
up_right	svg/linetypes.inc	/^    function up_right($length)$/;"	f
up_right_plain	svg/linetypes.inc	/^    function up_right_plain($length)$/;"	f
updateHTML	shieldcommon.js	/^function updateHTML() {$/;"	f
updateSVG	shieldcommon.js	/^function updateSVG() {$/;"	f
upper	svg/divisions/chevronny.inc	/^$upper = $layout->size->width \/ 2 * M_SQRT2 + $width;$/;"	v
upperOnly	svg/linetypes.inc	/^        $upperOnly = true;$/;"	v
upperOnly	svg/linetypes.inc	/^      $upperOnly = ($dist == 0);$/;"	v
upperOnly	svg/linetypes.inc	/^  $upperOnly = false;$/;"	v
url	tests/tests.inc	/^$url="test.drawshield.home";$/;"	v
used	randomblazon.php	/^                    $used = true;$/;"	v
used	randomblazon.php	/^    $used = in_array($tincture,$usedFieldTinctures,true);$/;"	v
usedFieldTinctures	randomblazon.php	/^        $usedFieldTinctures = array_merge($usedFieldTinctures, $componentTinctures[$tincture]);$/;"	v
usedFieldTinctures	randomblazon.php	/^$usedFieldTinctures = [];$/;"	v
usedOrdinary	randomblazon.php	/^    $usedOrdinary = false;$/;"	v
v	svg/bezier.inc	/^        $v = (float)$this->curtok();$/;"	v
vSpacing	svg/ordinaries/bar.inc	/^  $vSpacing = $height\/($num+1);$/;"	v
val	analyser/utilities.inc	/^        $val = $child->getAttribute('value');$/;"	v
val	svg/edges/edge_type.inc	/^            $val = $element->getAttribute("data-drawshield-$attribute");$/;"	v
val	svg/linetypes.inc	/^    $val = floatVal(substr($match[0],3));$/;"	v
vals	svg/bezier.inc	/^            $vals = $this->offset_helper($p_left, $c, $p_right, $amount, $miter_limit);$/;"	v
vals	svg/bezier.inc	/^            $vals = [$new_p_left, $new_p_right];$/;"	v
vals	svg/bezier.inc	/^            $vals = [$new_p_left];$/;"	v
vals	svg/bezier.inc	/^        $vals = [];$/;"	v
value	analyser/utilities.inc	/^  $value = 0;$/;"	v
value	parser/english/grammar.inc	/^                $value = strtolower($this->phraseMatcher->getValue());$/;"	v
value	parser/english/grammar.inc	/^            $value = $this->phraseMatcher->getValue();$/;"	v
value	parser/english/grammar.inc	/^        $value = strtoupper($value);$/;"	v
value	parser/matcher.inc	/^          $this->value = $num;$/;"	v
value	parser/matcher.inc	/^        $this->value = mb_substr($this->tokenList->words[$t_word],0,192, "UTF-8");$/;"	v
value	parser/matcher.inc	/^        $this->value = null; \/\/ TODO rewrite as a try\/catch block?$/;"	v
value	parser/matcher.inc	/^  protected $value = null;$/;"	v
value	svg/charges/characters/digit.inc	/^    $value = getModifierValueByKeyterm ( $node, 'value' );$/;"	v
value	svg/charges/characters/letter.inc	/^$value = getModifierValueByKeyterm ( $node, 'value' );$/;"	v
value	svg/charges/sports/number.inc	/^$value = getModifierValueByKeyterm ( $node, 'value' );$/;"	v
value	svg/svgtools.inc	/^                $value = $strokeCol;$/;"	v
value	svg/svgtools.inc	/^              $value = floatval($value) * $multiplier;$/;"	v
vector3	svg/transform.inc	/^        $vector3 = [$p->x, $p->y, 0, 1];$/;"	v
version	version.inc	/^$version = array ($/;"	v
vert_gap	svg/arrangements.inc	/^    $vert_gap = ($num_rows == 1) ? 0 : ($bb_h * $space_pct) \/ ($num_rows-1);$/;"	v
vertical	svg/bezier.inc	/^    function vertical($y, $relative = false)$/;"	f
viewbox	svg/svgtools.inc	/^    $viewbox = $svg['viewBox'] ?? '0 0 100 100';$/;"	v
visible	svg/svgtools.inc	/^      $visible = true;$/;"	v
visible	svg/svgtools.inc	/^    $visible = false;$/;"	v
visible	svg/svgtools.inc	/^  $visible = true;$/;"	v
visitedNodes	analyser/utilities.inc	/^  $visitedNodes = [];$/;"	v
voidTincture	svg/ordinary.inc	/^      $voidTincture = getTinctureNode($onObject);$/;"	v
voided	svg/ordinary.inc	/^  $voided = getModifierNodeWithKeyterm($node, 'voided');$/;"	v
w	svg/arrangements.inc	/^                $w = $total_w * 0.4;$/;"	v
w	svg/ordinaries/shield_shape_utils.inc	/^        $w = $layout->size->width - 2 * $margin;$/;"	v
w	svg/ordinaries/square-flaunch.inc	/^$w = $layout->size->width \/ 3;$/;"	v
w2	svg/ordinaries/flag/bend.inc	/^$w2 = $width\/-2;$/;"	v
whenRotated	svg/linetypes.inc	/^        $whenRotated = 'offset';$/;"	v
whenRotated	svg/linetypes.inc	/^        $whenRotated = 'reflected';$/;"	v
whenRotated	svg/linetypes.inc	/^  $whenRotated = 'overlay'; \/\/ Flag for linetype, result when rotated 180 degreees$/;"	v
white	svg/proper.inc	/^  static $white;$/;"	v
wide_rows	svg/arrangements.inc	/^  $wide_rows = array ($/;"	v
width	svg/arrangements.inc	/^    $width = (1 - $gap) \/ 2;$/;"	v
width	svg/charges/characters/word.inc	/^    $width = 25 * $longestLine;$/;"	v
width	svg/charges/characters/word.inc	/^    $width = 25 * $longestWord;$/;"	v
width	svg/charges/characters/word.inc	/^    $width = 25 * strlen($item);$/;"	v
width	svg/charges/characters/word.inc	/^    $width = 500;$/;"	v
width	svg/charges/characters/word.inc	/^    $width = 800;$/;"	v
width	svg/charges/characters/word.inc	/^  $width = 450;$/;"	v
width	svg/charges/characters/word.inc	/^$width = 100;$/;"	v
width	svg/divisions/chevronny.inc	/^$width = $stepV \/ M_SQRT2;$/;"	v
width	svg/divisions/flag/per-pall.inc	/^$width = 100;$/;"	v
width	svg/divisions/tierced-in-bend.inc	/^$width = 400;$/;"	v
width	svg/divisions/tierced-in-chevron.inc	/^$width = 300;$/;"	v
width	svg/divisions/tierced-in-fess.inc	/^$width = $layout->size->width + 2 * $margin;$/;"	v
width	svg/getcharge.inc	/^            $width = 1000;$/;"	v
width	svg/getcharge.inc	/^        $width = $half;$/;"	v
width	svg/getcharge.inc	/^        $width = $height = 1000;$/;"	v
width	svg/getcharge.inc	/^      $width = $half;$/;"	v
width	svg/getwords.inc	/^        $width = max($this->longest, intval(ceil(sqrt($chars\/$aspectRatio))));$/;"	v
width	svg/ordinaries/baton.inc	/^$width = 56;$/;"	v
width	svg/ordinaries/bend.inc	/^    $width = (200 + 156) * 2;$/;"	v
width	svg/ordinaries/bend.inc	/^    $width = 200;$/;"	v
width	svg/ordinaries/bend.inc	/^$width = 300;$/;"	v
width	svg/ordinaries/bordure.inc	/^$width = 180;$/;"	v
width	svg/ordinaries/chevron.inc	/^    $width = chevron_width($layout, $number);$/;"	v
width	svg/ordinaries/chevronel.inc	/^$width = 50;$/;"	v
width	svg/ordinaries/double-tressure.inc	/^$width = 40.4;$/;"	v
width	svg/ordinaries/fess.inc	/^    $width = $layout->size->height * 0.3;$/;"	v
width	svg/ordinaries/flag/bend.inc	/^$width = $h * 0.25;$/;"	v
width	svg/ordinaries/flag/pall.inc	/^$width = 100;$/;"	v
width	svg/ordinaries/flag/saltire.inc	/^$width = 200;$/;"	v
width	svg/ordinaries/mount.inc	/^        $width = $target_width * ($rown*.5\/4 + .4);$/;"	v
width	svg/ordinaries/mount.inc	/^    $width = $target_width \/ max(1, $num_of-$rown\/6-3);$/;"	v
width	svg/ordinaries/orle.inc	/^    $width = min($ext \/ 4, $width);$/;"	v
width	svg/ordinaries/orle.inc	/^$width = 100;$/;"	v
width	svg/ordinaries/pall.inc	/^    $width = 141;$/;"	v
width	svg/ordinaries/plain-cross.inc	/^    $width = 100;$/;"	v
width	svg/ordinaries/plain-cross.inc	/^$width = 200;$/;"	v
width	svg/ordinaries/saltire.inc	/^    $width = 100;$/;"	v
width	svg/ordinaries/saltire.inc	/^$width = 200;$/;"	v
width	svg/ordinaries/tressure.inc	/^    $width = 40.4;$/;"	v
width	svg/quartering.inc	/^            $width = $quarter->size->width;$/;"	v
width	svg/size.inc	/^        $this->width = $width;$/;"	v
width	svg/size.inc	/^        $width = $this->size->width;$/;"	v
width	svg/size.inc	/^        $width = 1000;$/;"	v
width	svg/svgtools.inc	/^        $width = ($x1 - $x0) * intval($widthVal) \/ 100;$/;"	v
width	svg/svgtools.inc	/^        $width = floatval($widthVal);$/;"	v
widthVal	svg/svgtools.inc	/^    $widthVal = $svg['width'] ?? $y1;$/;"	v
width_bottom	svg/ordinaries/cross-formy.inc	/^$width_bottom = $layout->size->height *  0.718;$/;"	v
width_delta	svg/ordinaries/bend-helper.inc	/^    $width_delta = $width \/ 2 \/ M_SQRT2 + 10;$/;"	v
width_diag	svg/ordinaries/shield_shape_utils.inc	/^        $width_diag = $width * M_SQRT2;$/;"	v
width_side	svg/ordinaries/cross-formy.inc	/^$width_side = $layout->size->width * 0.618;$/;"	v
width_top	svg/ordinaries/cross-formy.inc	/^$width_top = $layout->size->height \/ 1.2 * 0.618;$/;"	v
widths	svg/charges/characters/digit.inc	/^    $widths = array ( '0' => 79, '1' => 64, '2' => 69, '3' => 74, '4' => 84, '5' => 74,$/;"	v
withinPlacement	svg/ordinary.inc	/^        $withinPlacement = calcPlace($chargesWithin, $withinPlacement[0], $withinPlacement[1]);$/;"	v
withinPlacement	svg/ordinary.inc	/^      $withinPlacement = $ord_data['chargesWithin'];$/;"	v
withinPlacement	svg/ordinary.inc	/^      $withinPlacement = 'n'; \/\/ error if no placement for ordinary with charges on it, but let placeCharges handle it$/;"	v
within_2	svg/ordinaries/bend-helper.inc	/^    $within_2 = [$/;"	v
within_4	svg/ordinaries/bend-helper.inc	/^    $within_4 = [$/;"	v
within_bb	svg/ordinaries/plain-cross.inc	/^$within_bb = $within_bt + $within_tb - $within_tt;$/;"	v
within_bottom	svg/ordinaries/chevron.inc	/^$within_bottom = new ShieldRect($/;"	v
within_bottom	svg/ordinaries/pall.inc	/^    $within_bottom = new ShieldRect($/;"	v
within_bottom	svg/ordinaries/saltire.inc	/^$within_bottom = $layout->size->height - $cy - $width \/ M_SQRT2;$/;"	v
within_bottom_height	svg/ordinaries/chevron.inc	/^$within_bottom_height = ($layout->size->height - $layout->center_point->y - $within_margin) * 2\/3;$/;"	v
within_bottom_height	svg/ordinaries/pall.inc	/^    $within_bottom_height = ($layout->size->height - $layout->center_point->y - $within_margin) * 2\/3;$/;"	v
within_bt	svg/ordinaries/plain-cross.inc	/^$within_bt = $layout->center_point->y + $width\/2 + $within_margin;$/;"	v
within_center	svg/ordinaries/saltire.inc	/^$within_center = new ShieldRect(clone $layout->center_point, $within_size);$/;"	v
within_delta	svg/ordinaries/saltire.inc	/^$within_delta = $within_length + $width \/ M_SQRT2;$/;"	v
within_left	svg/ordinaries/chevron.inc	/^$within_left = ShieldRect::from_corners($within_margin, $within_margin, $layout->center_point->x - $side_off, $layout->center_point->y - $side_off);$/;"	v
within_left	svg/ordinaries/pall.inc	/^    $within_left = ShieldRect::from_corners($within_margin, $within_margin, $layout->center_point->x - $side_off * 2, $layout->center_point->y - $side_off \/ 2);$/;"	v
within_left	svg/ordinaries/saltire.inc	/^$within_left = $cx - $width \/ M_SQRT2;$/;"	v
within_length	svg/ordinaries/saltire.inc	/^$within_length = min([$within_left, $within_top, $within_bottom]) * 2 \/ 3;$/;"	v
within_ll	svg/ordinaries/plain-cross.inc	/^$within_ll = $within_margin;$/;"	v
within_lr	svg/ordinaries/plain-cross.inc	/^$within_lr = $layout->center_point->x - $width\/2 - $within_margin;$/;"	v
within_margin	svg/ordinaries/bend-helper.inc	/^    $within_margin = 50;$/;"	v
within_margin	svg/ordinaries/chevron.inc	/^$within_margin = 80;$/;"	v
within_margin	svg/ordinaries/pall.inc	/^    $within_margin = 80;$/;"	v
within_margin	svg/ordinaries/plain-cross.inc	/^$within_margin = 50;$/;"	v
within_right	svg/ordinaries/chevron.inc	/^$within_right = ShieldRect::from_corners($layout->center_point->x + $side_off, $within_margin, $layout->size->width - $within_margin, $layout->center_point->y - $side_off);$/;"	v
within_right	svg/ordinaries/pall.inc	/^    $within_right = ShieldRect::from_corners($layout->center_point->x + $side_off * 2, $within_margin, $layout->size->width - $within_margin, $layout->center_point->y - $side_off \/ 2);$/;"	v
within_rl	svg/ordinaries/plain-cross.inc	/^$within_rl = $layout->center_point->x + $width\/2 + $within_margin;$/;"	v
within_rr	svg/ordinaries/plain-cross.inc	/^$within_rr = $layout->size->width - $within_margin;$/;"	v
within_size	svg/ordinaries/saltire.inc	/^$within_size = new ShieldSize($within_length, $within_length);$/;"	v
within_tb	svg/ordinaries/plain-cross.inc	/^$within_tb = $layout->center_point->y - $width\/2 - $within_margin;$/;"	v
within_top	svg/ordinaries/chevron.inc	/^$within_top = new ShieldRect($/;"	v
within_top	svg/ordinaries/saltire.inc	/^$within_top = $cy - $width \/ M_SQRT2;$/;"	v
within_top_height	svg/ordinaries/chevron.inc	/^$within_top_height = ($layout->center_point->y - $chevron_width * M_SQRT2);$/;"	v
within_top_margin	svg/ordinaries/chevron.inc	/^$within_top_margin = $within_top_height > 200 ? $within_margin \/ 2 : 0;$/;"	v
within_tt	svg/ordinaries/plain-cross.inc	/^$within_tt = $within_margin;$/;"	v
word	analyser/utilities.inc	/^    $word = strtolower($word);$/;"	v
wordLen	svg/getwords.inc	/^            $wordLen = mb_strlen($words[$i]);$/;"	v
words	parser/tokeniser.inc	/^    $this->words = array();$/;"	v
words	parser/tokeniser.inc	/^  public $words = array(); \/\/ Used internally to manage tokens$/;"	v
words	randomblazon.php	/^    $words = preg_split('\/[ \\t]+\/', $string);$/;"	v
words	svg/getwords.inc	/^        $this->words = [];$/;"	v
words	svg/getwords.inc	/^        $this->words = mb_split('\\s', $text);$/;"	v
words2digits	analyser/utilities.inc	/^function words2digits ($words) {$/;"	f
x	svg/arrangements.inc	/^                $x = $total_w \/ 2 - 200;$/;"	v
x	svg/arrangements.inc	/^        $x = intval($cx + sin(deg2rad($angle)) * $radius);$/;"	v
x	svg/bezier.inc	/^        $x = $this->coord();$/;"	v
x	svg/bezier.inc	/^        $x = $this->relpoint()->x;$/;"	v
x	svg/charges/characters/word.inc	/^        $x = $width \/ 2;$/;"	v
x	svg/charges/characters/word.inc	/^        $x = $width;$/;"	v
x	svg/charges/characters/word.inc	/^        $x = 0;$/;"	v
x	svg/divisions/bendy.inc	/^        $x = $area_width \/ $num_of * $i;$/;"	v
x	svg/divisions/pily-bendy.inc	/^        $x = $layout->size->width - $x;$/;"	v
x	svg/divisions/pily-bendy.inc	/^    $x = $p[0];$/;"	v
x	svg/divisions/pily-bendy.inc	/^$x = $sinister ? $layout->size->width : 0;$/;"	v
x	svg/divisions/pily.inc	/^    $x = $p[0];$/;"	v
x	svg/getwords.inc	/^            $x = $glyph['horiz-adv-x'] ?? $this->defaultXSize;;$/;"	v
x	svg/linetypes.inc	/^  $x = 0; $y = 0;$/;"	v
x	svg/pathtools.inc	/^          $x = $numbers[$j];$/;"	v
x	svg/pathtools.inc	/^        $x = $numbers[0];$/;"	v
x	svg/size.inc	/^        $this->x = $x;$/;"	v
x	svg/transform.inc	/^                $x = $y = 0;$/;"	v
x	svg/treatments/tartan.inc	/^        $x = 0;$/;"	v
x	svg/treatments/tartan.inc	/^    $x = 0;$/;"	v
x1	svg/charges/mullet/mullet.inc	/^        $x1 = $cx + sin($angle * $i) * $r1;$/;"	v
x2	svg/charges/mullet/mullet.inc	/^        $x2 = $cx + sin($angle * ($i+0.5)) * $r2;$/;"	v
x2	svg/pathtools.inc	/^      $x2 = $x * -1;$/;"	v
x2	svg/pathtools.inc	/^      $x2 = $x;$/;"	v
x2	svg/pathtools.inc	/^      $x2 = $y * -1;$/;"	v
x2	svg/pathtools.inc	/^      $x2 = $y;$/;"	v
x2	svg/pathtools.inc	/^      $x2 = ($cos * $x) - ($sin * $y);$/;"	v
x2	svg/size.inc	/^            $x2 = $x1;$/;"	v
xAdjust	svg/getcharge.inc	/^        $xAdjust = 250 + (500 - ($width*$scale))\/2;$/;"	v
xAdjustment	svg/svgtools.inc	/^        $xAdjustment = ($element['width'] - ($extra['width'] * $scale))\/2;$/;"	v
xAdjustment	svg/svgtools.inc	/^        $xAdjustment = 0;$/;"	v
xLength	svg/getwords.inc	/^        $xLength = 0;$/;"	v
xPos	svg/getcharge.inc	/^              $xPos = $supers[0];$/;"	v
xPos	svg/getcharge.inc	/^        $xPos = $yPos = 50; \/\/ Centre Position of superposed charge, can be varied, as a percentage (0 = left\/top edge)$/;"	v
xScale	svg/arrangements.inc	/^     $xScale = $bbw \/ 1000;$/;"	v
xShift	svg/getcharge.inc	/^        $xShift = ($width * ($xPos \/ 100)) - $targetCentre; \/\/ convert percentage to factor$/;"	v
xSize	svg/treatments/tartan.inc	/^                $xSize = $tartanPattern[$j][1] * $threadScale;$/;"	v
xSize	svg/treatments/tartan.inc	/^            $xSize = $tartanPattern[$j][1] * $threadScale;$/;"	v
xSize	svg/treatments/tartan.inc	/^        $xSize = $tartanPattern[$j][1] * $threadScale;$/;"	v
xmlMaker	parser/parser.inc	/^    $this->xmlMaker = new blazonML('1.0',"utf-8");$/;"	v
xmlMaker	parser/parser.inc	/^  protected $xmlMaker;$/;"	v
xmlhttp.onreadystatechange	demopage.php	/^            xmlhttp.onreadystatechange = function()$/;"	j
xmlhttp.onreadystatechange	shieldcommon.js	/^    xmlhttp.onreadystatechange = function() {$/;"	j
xmult	svg/ordinaries/shield_shape_utils.inc	/^                $xmult = -1;$/;"	v
xmult	svg/ordinaries/shield_shape_utils.inc	/^                $xmult = 1;$/;"	v
xpath	analyser/references.inc	/^      $this->xpath = new DOMXPath($this->dom);$/;"	v
xpath	analyser/references.inc	/^  private $xpath;$/;"	v
xpath	drawshield.php	/^$xpath = new DOMXPath($dom);$/;"	v
xpath	drawshield.php	/^$xpath = null;$/;"	v
xpath	parser/english/grammar.inc	/^        $xpath = new DOMXPath($chief_ordinary->ownerDocument);$/;"	v
xpath	quickimage.php	/^  $xpath = new DOMXPath($dom);$/;"	v
xpath	quickimage.php	/^$xpath = null;$/;"	v
xpath	svg/draw.inc	/^                $xpath = new DOMXPath($dom);$/;"	v
xpath	svg/edges/edge_type.inc	/^        $xpath = new DOMXPath($dom);$/;"	v
xpath	svg/getcharge.inc	/^                $xpath = new DomXPath($node->ownerDocument);$/;"	v
xpath	svg/svgtools.inc	/^    $xpath = new DomXPath($held["node"]->ownerDocument);$/;"	v
y	svg/arrangements.inc	/^                $y = $total_h \/ 2 - 200;$/;"	v
y	svg/arrangements.inc	/^        $y = intval($cy + cos(deg2rad($angle)) * ($radius * -1));$/;"	v
y	svg/bezier.inc	/^            $y = $x;$/;"	v
y	svg/bezier.inc	/^        $y = $this->coord();$/;"	v
y	svg/bezier.inc	/^        $y = $this->relpoint()->y;$/;"	v
y	svg/charges/characters/word.inc	/^    $y = 44;$/;"	v
y	svg/divisions/bendy.inc	/^        $y = $area_height \/ $num_of * $i;$/;"	v
y	svg/divisions/chape-ploye.inc	/^$y = $layout->division_offset->y;$/;"	v
y	svg/divisions/per-bend.inc	/^$y = $layout->division_offset->y - 106;$/;"	v
y	svg/divisions/per-chevron.inc	/^    $y = $layout->center_point->y + 300 \/ M_SQRT2;$/;"	v
y	svg/divisions/per-chevron.inc	/^    $y = $layout->center_point->y - 150 \/ M_SQRT2;$/;"	v
y	svg/divisions/per-chief.inc	/^    $y = $layout->chief->bottom();$/;"	v
y	svg/divisions/per-chief.inc	/^    $y = $layout->division_offset->y;$/;"	v
y	svg/divisions/per-chief.inc	/^    $y = $layout->size->height * 0.3;$/;"	v
y	svg/divisions/pily-bendy.inc	/^    $y = $p[1]\/1200 * ($bottom - $top) + $top;$/;"	v
y	svg/divisions/pily.inc	/^    $y = $p[1]\/1200 * ($bottom - $top) + $top;$/;"	v
y	svg/divisions/tierced-in-chevron.inc	/^    $y = $layout->center_point->y - $ordinary_width \/ M_SQRT2;$/;"	v
y	svg/divisions/tierced-in-chevron.inc	/^    $y = $layout->center_point->y;$/;"	v
y	svg/edges/edge_type.inc	/^        $y = $height * $p->y;$/;"	v
y	svg/ordinaries/chevron.inc	/^        $y = $layout->center_point->y + 42;$/;"	v
y	svg/ordinaries/chevron.inc	/^        $y = $layout->center_point->y - 130;$/;"	v
y	svg/ordinaries/chevron.inc	/^    $y = $layout->center_point->y - 140;$/;"	v
y	svg/ordinaries/chevron.inc	/^    $y = $layout->center_point->y - 283;$/;"	v
y	svg/ordinaries/chevron.inc	/^    $y = $layout->center_point->y;$/;"	v
y	svg/ordinaries/chevron.inc	/^    $y = max(0, $layout->size->height - 1000);$/;"	v
y	svg/ordinaries/cross-2fretty.inc	/^$y = ($layout->center_point->y - 500);$/;"	v
y	svg/ordinaries/cross-3fretty.inc	/^$y = ($layout->center_point->y - 500);$/;"	v
y	svg/ordinaries/enty.inc	/^$y = ($layout->size->height - 1200);$/;"	v
y	svg/ordinaries/fret-couped.inc	/^$y = ($layout->center_point->y - 500);$/;"	v
y	svg/ordinaries/fret.inc	/^$y = ($layout->center_point->y - 500);$/;"	v
y	svg/ordinaries/saltire-2fretty.inc	/^$y = ($layout->center_point->y - 500);$/;"	v
y	svg/pathtools.inc	/^          $y = $numbers[$j+1];$/;"	v
y	svg/pathtools.inc	/^        $y = $numbers[0];$/;"	v
y	svg/quartering.inc	/^        $this->y = 0;$/;"	v
y	svg/quartering.inc	/^    private $y;$/;"	v
y	svg/size.inc	/^            $y = $x;$/;"	v
y	svg/size.inc	/^        $this->y = $y;$/;"	v
y	svg/transform.inc	/^            $y = $x;$/;"	v
y	svg/treatments/tartan.inc	/^$y = 0;$/;"	v
y1	svg/charges/mullet/mullet.inc	/^        $y1 = $cy - cos($angle * $i) * $r1;$/;"	v
y1	svg/divisions/per-fess.inc	/^  $y1 = $layout->center_point->y - 35;$/;"	v
y1	svg/divisions/tierced-in-fess.inc	/^$y1 = $layout->division_offset->y + $height;$/;"	v
y1	svg/size.inc	/^            $y1 = $x1;$/;"	v
y1Location	svg/draw.inc	/^                $y1Location = $layout->size->height + $extraSpace + 40;$/;"	v
y1Location	svg/draw.inc	/^            $y1Location = '1190';$/;"	v
y1Location	svg/draw.inc	/^    $y1Location = 0;$/;"	v
y2	svg/charges/mullet/mullet.inc	/^        $y2 = $cy - cos($angle * ($i+0.5)) * $r2;$/;"	v
y2	svg/divisions/per-fess.inc	/^  $y2 = $layout->center_point->y + 15;$/;"	v
y2	svg/divisions/tierced-in-fess.inc	/^$y2 = $y1 + $height;$/;"	v
y2	svg/pathtools.inc	/^      $y2 = $x * -1;$/;"	v
y2	svg/pathtools.inc	/^      $y2 = $x;$/;"	v
y2	svg/pathtools.inc	/^      $y2 = $y * -1;$/;"	v
y2	svg/pathtools.inc	/^      $y2 = $y;$/;"	v
y2	svg/pathtools.inc	/^      $y2 = ($cos * $y) + ($sin * $x);$/;"	v
y2	svg/size.inc	/^            $y2 = $y1;$/;"	v
yAdjust	svg/getcharge.inc	/^        $yAdjust = 250 + (500 - ($height*$scale))\/2;$/;"	v
yAdjustment	svg/svgtools.inc	/^        $yAdjustment = $element['height'] - ($extra['height'] * $scale);$/;"	v
yAdjustment	svg/svgtools.inc	/^        $yAdjustment = ($element['height'] - ($extra['height'] * $scale))\/2;$/;"	v
yHeight	svg/getwords.inc	/^        $this->yHeight = abs($this->fontInfo['ascent']);$/;"	v
yPos	svg/draw.inc	/^        $yPos = '995';$/;"	v
yPos	svg/getcharge.inc	/^              $yPos = $supers[1];$/;"	v
yScale	svg/arrangements.inc	/^     $yScale = $bbh \/ 1000;$/;"	v
yShift	svg/getcharge.inc	/^        $yShift = ($height * ($yPos \/ 100)) - $targetCentre; \/\/ convert percentage to factor$/;"	v
yShift	svg/getwords.inc	/^            $yShift = ($height \/ $lineCount) * ($lineCount - 1) * -1;$/;"	v
yShift	svg/getwords.inc	/^        $yShift = 0;$/;"	v
ySize	svg/getwords.inc	/^        $this->ySize = 500;$/;"	v
ySize	svg/getwords.inc	/^        $this->ySize = abs($this->fontInfo['ascent']) + abs($this->fontInfo['descent']);$/;"	v
ySize	svg/treatments/tartan.inc	/^        $ySize = $tartanPattern[$k][1] * $threadScale;$/;"	v
ySize	svg/treatments/tartan.inc	/^    $ySize = $tartanPattern[$k][1] * $threadScale;$/;"	v
yellow	svg/proper.inc	/^  static $yellow;$/;"	v
ymult	svg/ordinaries/shield_shape_utils.inc	/^                $ymult = -1;$/;"	v
ymult	svg/ordinaries/shield_shape_utils.inc	/^                $ymult = 1;$/;"	v
yshift	svg/ordinary.inc	/^    $yshift = $layout->size->height * -0.1666; \/\/ Adjust to change movement for enhanced (match in layout.inc)$/;"	v
yshift	svg/ordinary.inc	/^    $yshift = $layout->size->height * 0.1666; \/\/ As above$/;"	v
ystart	svg/ordinaries/mount.inc	/^$ystart = $tip + 60;$/;"	v
ystart	svg/ordinaries/mount.inc	/^$ystart = 0;$/;"	v
