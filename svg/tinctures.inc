<?php


function readTinctureFile($filename, $prefix) {
    $retval = array();
    foreach (file($filename) as $line) {
        // remove comments
        if (($comment = strpos($line, '//')) !== false) {
            $line = substr($line, 0, $comment);
        }
        $line = trim($line);
        // Now remove any internal spaces
        $line = str_replace(' ', '', $line);
        $line = str_replace("\t", '', $line);
        if ($line != '') {
            list($key,$value) = explode('=', $line);
            if (!is_null($key) && !is_null($value)) {
//                if ($value[0] != '#') {
//                    $value = '#' . $value;
//                }
                $retval["$prefix/$key"] = $value;
            }
        }
    }
    return $retval;
}

function rgb($keyterm) {
    global $options, $messages;

    static $loaded = false;
    static $errorColours = array ('#eeeeee','#dddddd','#cccccc', '#bbbbbb', '#aaaaaa',
                                  '#999999', '#888888', '#777777', '#666666', '#555555');
    static $tinctures = array ();

    if (!$loaded) {
        // always read in the drawshield colours as these are the defaults for any not given
        $tinctures = readTinctureFile(__dir__ . '/schemes/drawshield.txt','heraldic');
        $palette = $options['palette'];
        if (!file_exists(__dir__ . '/schemes/' . $palette . '.txt')) {
          $messages->addMessage('internal', "unknown colour scheme - $palette" );
          $palette = 'drawshield';
        } else {
            $tinctures = array_merge($tinctures, readTinctureFile(__dir__ . '/schemes/' . $palette . '.txt', 'heraldic'));
        }
        if ($options['useWebColours'] == true || $options['shape'] == 'flag') {
          $tinctures = array_merge($tinctures, readTinctureFile(__dir__ . '/schemes/web.txt','web'));
        }
        if ($options['useWarhammerColours'] == true || $options['shape'] == 'pauldron') {
          $tinctures = array_merge($tinctures, readTinctureFile(__dir__ . '/schemes/warhammer.txt', 'wh'));
        }
        if ($options['useTartanColours'] == true ) {
          $tinctures = array_merge($tinctures, readTinctureFile(__dir__ . '/schemes/tartan.txt','tartan'));
        }
        if ( isset($options['customPalette']) && is_array($options['customPalette']) ) {
            $tinctures = array_merge($tinctures, $options['customPalette']);
        }
        if ($options['effect'] == 'inked') { // override strokes
            $tinctures['charge-stroke']='#000000';
            $tinctures['ordinary-stroke']='#000000';
            $tinctures['pattern-stroke']='#000000';
            $tinctures['division-stroke']='#000000';
            $tinctures['stroke-width'] = 2;
        }
		$loaded = true;
    }

    if (!strpos($keyterm, '/')) {
        $keyterm = 'heraldic/' . $keyterm;
    }
    list($type,$name) = explode('/',$keyterm);

    if (array_key_exists($keyterm, $tinctures)) {
        return $tinctures[$keyterm];
    } else {
        switch($type) {
          case 'heraldic': // should not happen
            $messages->addMessage('internal', "unknown colour - $name" );
          break;
          case 'web':
            $messages->addMessage('warning', "$name is not a heraldic colour, to use, enable web colours in preferences" );
          break;
          case 'tartan':
            $messages->addMessage('warning', "$name is not a heraldic colour, to use, enable tartan colours in preferences" );
          break;
		  case 'wh':
            $messages->addMessage('warning', "$name is not a heraldic colour, to use, enable warhammer colours in preferences" );
          break;
        }
    }
    if (count($errorColours)) 
      return array_pop($errorColours);
    else
      return '#ffffff';
}

function lightnessValue($hex) {
  $prefix = '';
  if ($hex[0] == '#') {
    $prefix = '#';
    $hex = substr($hex,1);
  }
  $red = intval('0x' . substr($hex,0,2),16);
  $green = intval('0x' . substr($hex,2,2),16);
  $blue = intval('0x' . substr($hex,4,2),16);
  $hsp = sqrt(0.299 * ($red * $red) + 0.587 * ($green * $green) + 0.114 * ($blue * $blue));
  return ($hsp);
}

// Algorithm for stroke colour
// ===========================
// The colour scheme file defines 4 values:
// charge-stroke : the default value if the item is multi-coloured
// stroke-light : the stroke colour to use on light coloured objects
// stroke-dark : the stroke colour to use on dark coloured objects
// light-dark-threshold : the point at which to switch from light to dark
//
// Operation
// ---------
// 1) if $fixedStroke is true, always return the default value
// 2) $tincture can be two things:
// a) A string, which should be a colour name
//    in which case we calculate whether it is light or dark and return appropriately
// b) A tincture node
//    in which case we do things depending on the type of tincture this is
//    For now, we only deal with "proper", "semyDe" and "colour", we extract the hex value
//    and use that to return light or dark appropriately
//
//    In future we should probably do something with furs as well since these usually have a dominant colour
//
function getStroke($tincture, $fixedStroke = false) {
    $retval = rgb('charge-stroke'); // sensible default
    if ($fixedStroke) { // always use mid colour
        return($retval);
    }
    if (is_string($tincture)) { // should be a colour name
        $hex = rgb($tincture);
        if (lightnessValue($hex) < rgb('light-dark-threshold')) {
            // light
            $retval = rgb('stroke-dark');
        } else {
            // dark
            $retval = rgb('stroke-light'); 
        }
        return($retval);
    }
    // bad call protection
    if (!is_object($tincture) || !$tincture->hasChildNodes()) {
        return ($retval);
    }
    // otherwise, depends on the type of tincture
    switch ($tincture->firstChild->nodeName) {
    case 'proper': // should already have been resolved by now
        if ($tincture->firstChild->hasAttribute('spec')) {
            $bodyCol = $tincture->firstChild->getAttribute('spec');
            if (lightnessValue($bodyCol) < rgb('light-dark-threshold')) {
                // light
                $retval = rgb('stroke-dark');
            } else {
                // dark
                $retval = rgb('stroke-light'); 
            }
        }
        break;
    case 'treatment': // has two colours so probably mid-gray is best?
    case 'counterChanged': // ditto
    case 'division': // ditto
        break;
    case 'fur': // probably should improve this one and choose a stroke 
        // colour depending on the main colour of the fur
        break; // just go with default mid-gray for now
    case 'colour':
        $bodyCol = get_rgb($tincture);
        if (lightnessValue($bodyCol) < rgb('light-dark-threshold')) {
            // light
            $retval = rgb('stroke-dark');
        } else {
            // dark
            $retval = rgb('stroke-light'); // use default colour
        }
        break;
      case 'semyDe': // use the main background colour
          $retval = getStroke($tincture->firstChild->firstChild);
          break;
      default: // shouldn't happen
        break;
    }
    return($retval);
}

function shiftRGB($hex, $direction="lighter") {
  $factor = 0.33;
  $prefix = '';
  if ($hex[0] == '#') {
    $prefix = '#';
    $hex = substr($hex,1);
  }
  $red = intval('0x' . substr($hex,0,2),16);
  $green = intval('0x' . substr($hex,2,2),16);
  $blue = intval('0x' . substr($hex,4,2),16);
  if ($direction == "lighter") {
    $newRed = (int)($red * (1 - $factor));
    $newGreen = (int)($green * (1 - $factor));
    $newBlue = (int)($blue * (1 - $factor));
  } else {
    $newRed = (int)($red + (255 - $red) * $factor);
    $newGreen = (int)($green + (255 - $green) * $factor);
    $newBlue = (int)($blue + (255 - $blue) * $factor);
  }
  $retval =  sprintf("%s%02x%02x%02x",$prefix,$newRed,$newGreen,$newBlue);
  return $retval;
}

function mixRGB($hex1, $hex2) {
    if ($hex1[0] == '#') {
        $hex1 = substr($hex1,1);
    }
    if ($hex2[0] == '#') {
        $hex2 = substr($hex2,1);
    }
    $red1 = intval('0x' . substr($hex1,0,2),16);
    $green1 = intval('0x' . substr($hex1,2,2),16);
    $blue1 = intval('0x' . substr($hex1,4,2),16);
    $red2 = intval('0x' . substr($hex2,0,2),16);
    $green2 = intval('0x' . substr($hex2,2,2),16);
    $blue2 = intval('0x' . substr($hex2,4,2),16);

    $red3 = intval(($red1 + $red2) / 2);
    $green3 = intval(($green1 + $green2) / 2);
    $blue3 = intval(($blue1 + $blue2) / 2);

    $retval =  sprintf("%s%02x%02x%02x",'#',$red3,$green3,$blue3);

    return $retval;
}


function apply_tincture ($tinctureNode, $targetSVG, $chg_size = '',
        $rot = '0', $rev = false, $inv = false ) {
  global $_SERVER, $messages, $xpath, $options;
  $retval = '';

  if (is_null($tinctureNode)) return $targetSVG; // Maybe an error? Sometimes get here from makeOrdinary()
  if (!is_object($tinctureNode) || is_null($tinctureNode->parentNode) ) {
    // error_log("bad tincture in " . $options['blazon']);
    return $targetSVG;
  }

  $patTrans = '';
  $targetNode = $tinctureNode->parentNode;
	$targetType = $targetNode->nodeName;
  $tinctureNode = resolveReference($tinctureNode);
    $tinctureTypeNode = $tinctureNode->firstChild;
  $targetKeyterm = "";
  if ( $targetNode !== null) {
      $targetKeyterm = $targetNode->getAttribute('keyterm'); 
  } else {
      return $targetSVG;
  }

	if ( $targetType == 'charge' && $chg_size != '' && $tinctureTypeNode != null && $tinctureTypeNode->nodeName != blazonML::E_COUNTERCHANGED ) // We make some things a wee bit smaller if on a charge, just for looks
	{
	  list($chgX,$chgY) = explode(',', $chg_size);
		$scale = max ( $chgX / 1000, $chgY / 1200 ); // multiply here to adjust relative size of fur etc. on a charge
	  $patTrans = ' scale(' . $scale . ') ';
	} elseif ($options['shape'] == 'flag') { // adjust size based on flag AR?
    $patTrans = ' scale(0.5) ';
  }
	if ( $rot != '0' ) // If the object is rotated, we rotate some of the tinctures to match_number()
	  $patTrans .= ' rotate(' . ($rot * -1) . ') ';
	if ( $patTrans != '' )
	  $patTrans = ' patternTransform="' . $patTrans . '" ';

  if ( $tinctureNode->getAttribute('origin') == 'implied' ) return $targetSVG; // Nothing to do
  // stage "raw" means leave charge colours as they are
  // if ( $targetType == 'charge' && array_key_exists('raw', $options)) return $targetSVG;
  if ( $tinctureNode === null || !$tinctureNode->hasChildNodes() 
      || $tinctureNode->getAttribute('origin') == 'pending' 
      || $tinctureNode->getAttribute('origin') == 'missing') {
      $messages->addMessage ('blazon','Missing colour, Gray substituted.' );
      $tinctureNode = createColourNode('gray','1');
  }
  $spec = false;
  if (!is_object($tinctureTypeNode)) {
    // error_log("non-object tincture in " . $options['blazon']);
    $tinctureTypeNode = createColourNode('gray','1');
  }
  switch ( $tinctureTypeNode->nodeName ) {
    case 'colour':
    case 'default': // don't think these two ever occur
    case 'proper':
      if ($targetType == 'ordinary' && array_key_exists('raw', $options)) {
            $spec = '#999999';
      } elseif ( $tinctureTypeNode->hasAttribute('spec') )  {
        $spec = $tinctureTypeNode->getAttribute('spec');
      } else {
        $spec = rgb($tinctureTypeNode->getAttribute('keyterm'));
      }
      if ($spec !== false) { // set if we are to use the fill found
          if ($spec[0] == '"') { // mask athe element with this id
              $patt_id = add_def('mask', '<g style="fill:#ffffff;">' . $targetSVG . '</g>');
              $retval = '<g mask="url(#' . $patt_id . ')"  ><use xlink:href=' . $spec . ' /></g>';
              if ( $targetType == 'charge' ) // add the outline and any shading
                    $retval .= '<g style="fill:none;">' . $targetSVG . '</g>';

          } else {
              $retval = '<g fill="' . $spec . '">' . $targetSVG . '</g>';
          }
      } else {
        $retval =  $targetSVG;
      }
      break;
    case 'fur':
      $fur_name = $tinctureTypeNode->getAttribute('keyterm');
      $fur_data = makeFur( $fur_name );
      // If what we are placing is inverted, we also invert the fill so it appears the "right way up"
      // Don't need to do reversed as all furs are symmetrical
      if ( $inv ) $fur_data['body'] = "<g transform=\"translate(0,{$fur_data['height']}) scale(1,-1)\">{$fur_data['body']}</g>";
      $patt_id = add_def ( 'pattern ' . $patTrans .
         ' patternContentUnits="userSpaceOnUse" patternUnits="userSpaceOnUse" x="0" y="0" width="' .
         $fur_data['width'] . '" height="' . $fur_data['height'] . '"',
         '<g class="fur">' . $fur_data['body'] . '</g>' );
      $retval = add_def();
      $stroke = ($targetType == 'ordinary') ? 'stroke="' . rgb('sable') . '" stroke-width="5"' : '';
      $retval .= '<g ' . $stroke . ' fill="url(#' . $patt_id . ')"  >' . $targetSVG . '</g>';
      break;
    case 'treatment':
      // A bit messy, but we handle gradients as a fill, not a pattern fill (could make this its own node type really?)
      if (substr($tinctureTypeNode->getAttribute("keyterm"), 0, 5) == 'grady') {
        $patt_id = makeGrady( $tinctureTypeNode );
      } else {
        $treat_data = makeTreatment( $tinctureTypeNode );
        // If what we are placing is inverted, we also invert the fill so it appears the "right way up"
        // Don't need to do reversed as all treatments are symmetrical
        if ( $inv ) $treat_data['body'] = "<g transform=\"translate(0,{$treat_data['height']}) scale(1,-1)\">{$treat_data['body']}</g>";
        //do we need to offset the pattern to center it?
          $offset = 0;
          if (array_key_exists('offset', $treat_data)) {
              $offset = $treat_data['offset'];
          }
        $patt_id = add_def ( 'pattern ' . $patTrans .
          ' patternContentUnits="userSpaceOnUse" patternUnits="userSpaceOnUse" x="' . $offset . '" y="0" width="' .
          $treat_data['width'] . '" height="' . $treat_data['height'] . '"',
          '<g class="treatment">' . $treat_data['body'] . '</g>' );
      }
      $retval = add_def();
      $retval .= '<g fill="url(#' . $patt_id . ')"  >' . $targetSVG . '</g>';
      break;
    case 'semyde':
      $treat_data = makeSemy( $tinctureTypeNode );
      // If what we are placing is inverted, we also invert the fill so it appears the "right way up"
      if ( $inv ) $treat_data['body'] = "<g transform=\"translate(0,{$treat_data['height']}) scale(1,-1)\">{$treat_data['body']}</g>";
      if ( $rev ) $treat_data['body'] = "<g transform=\"translate({$treat_data['width']},0) scale(-1,1)\">{$treat_data['body']}</g>";
      $patt_id = add_def ( 'pattern ' . $patTrans .
         ' patternContentUnits="userSpaceOnUse" patternUnits="userSpaceOnUse" x="0" y="0" width="' .
         $treat_data['width'] . '" height="' . $treat_data['height'] . '"',
         $treat_data['body'] );
      $retval = add_def();
      $retval .= '<g fill="url(#' . $patt_id . ')"  >' . $targetSVG . '</g>';
      break;
    case 'division': 
		  $title = '<title>' . $tinctureTypeNode->getAttribute('keyterm') . '</title>';
	    // What we do depends on what we are filling...
      switch ($targetType) {
        case 'division':
            $new_div = makeDivision( $tinctureTypeNode );
            $mask_id = add_def ( 'mask width="1200" height="1400" maskUnits="userSpaceOnUse"',
              $title . "<desc>Division used to fill $targetKeyterm</desc>" .
              '<g fill="white">' . $targetSVG . '</g>' );
          $retval = add_def();
          $retval .= '<g mask="url(#' . $mask_id . ')"  >' . $new_div . '</g>';
          break;
        case 'field': // just the field of the shield
				  $retval = '<g>' . $title . '<desc>Division used to fill field</desc>' . makeDivision( $tinctureTypeNode ) . '</g>';
			  	break;
        case 'ordinary':
          if ($targetKeyterm == 'plain-cross' || $targetKeyterm == 'bend') {
            $new_div = makeDivision( $tinctureTypeNode );
             $mask_id = add_def ( 'mask width="1200" height="1400" maskUnits="userSpaceOnUse"',
                $title . "<desc>Division used to fill $targetKeyterm</desc>" .
                '<g fill="white">' . $targetSVG . '</g>' );
            $retval = add_def();
            $retval .= '<g mask="url(#' . $mask_id . ')"  >' . $new_div . '</g>';
            break;
          } // else flow through
        case 'charge':
				  chief('push','NC');
          $new_div = makeDivision( $tinctureTypeNode );
          chief('pop');
					$height = get_div_height($tinctureTypeNode);
          $patt_id = add_def ( 'pattern width="100%" height="100%" patternUnits="objectBoundingBox" preserveAspectRatio="none" viewBox="0 0 1000 ' .   $height . '"',
              $title . "<desc>Division used to fill $targetType</desc>" .
               $new_div ); 
          $retval = add_def();
          $retval .= '<g fill="url(#' . $patt_id . ')"  >' . $targetSVG . '</g>';
				  break;
			}
			break;	
	  case 'shield':
	    $shield = makeshield( $tinctureTypeNode, '10:10' );
	    $patt_id = add_def ( 'pattern width="100%" height="100%" patternUnits="objectBoundingBox" preserveAspectRatio="none" viewBox="0 0 1000 1000"',
              "<desc>Shield used to fill $targetType</desc>" .
               $shield ); 
      $retval = add_def();
      $retval .= '<g fill="url(#' . $patt_id . ')"  >' . $targetSVG . '</g>';
      break;
    case 'counterchanged': // Never change anything, just fill with this pattern
      // Try to find a field division
      $division = $xpath->query('preceding::field/tincture/division',$tinctureNode);
      if ( $division->length ) {
          $counterDiv = $division->item(($division->length)-1);
          $div_data = makeDivision( $counterDiv, true );
          $patt_id = add_def ( 'mask', '<g style="fill:#ffffff;">' . $targetSVG . '</g>' );
          $retval = add_def() . '<g mask="url(#' . $patt_id . ')"  >' . $div_data . '</g>';
      } else {
          $treatment = $xpath->query('preceding::field/tincture/treatment',$tinctureNode);
          if ( $treatment->length ) {
              $counterTreatment = $treatment->item(($treatment->length) - 1);
              $treat_data = makeTreatment($counterTreatment, true);
              if ( $inv ) $treat_data['body'] = "<g transform=\"translate(0,{$treat_data['height']}) scale(1,-1)\">{$treat_data['body']}</g>";
              //do we need to offset the pattern to center it?
              $offset = 0;
              if (array_key_exists('offset', $treat_data)) {
                  $offset = $treat_data['offset'];
              }
              $treatPatt_id = add_def ( 'pattern ' . $patTrans .
                  ' patternContentUnits="userSpaceOnUse" patternUnits="userSpaceOnUse" x="' . $offset . '" y="0" width="' .
                  $treat_data['width'] . '" height="' . $treat_data['height'] . '"',
                  '<g class="treatment">' . $treat_data['body'] . '</g>' );
//          }
              $fill = '<g fill="url(#' . $treatPatt_id . ')"  ><path d="M0,0 h1000 v1200 h-1000 z" /></g>';
//          $retval .= '<g fill="url(#' . $patt_id . ')"  >' . $targetSVG . '</g>';
              $patt_id = add_def('mask', '<g style="fill:#ffffff;">' . $targetSVG . '</g>');
              $retval = add_def() . '<g mask="url(#' . $patt_id . ')"  >' . $fill . '</g>';
          } else {
              $messages->addMessage ('error','Counterchange requires two colour field' );
              return '<g fill="#050505"><title>Counterchange</title><desc>Not possible</desc>' . $targetSVG . '</g>';
          }
      }
      break;
			// END of switch
  }
  return $retval;
}
